{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> CXBOX - Rapid Enterprise Level Application Development Platform <p> </p>        Website       |         Demo       |         Documentation      Description <p> CXBOX main purpose is to speed up development of typical Enterprise Level Application based on Spring Boot. A fixed contract with a user interface called Cxbox-UI allows backend developer to create typical interfaces providing just Json meta files. Full set of typical Enterprise Level UI components included - widgets, fields, layouts (views), navigation (screens). </p> Using CXBOX <ul> <li> download Intellij Plugin, which adds platform specific autocomplete, inspection, navigation and code generation features. </li> <li> download Demo and follow README.md instructions. Feel free to use demo as template project to start your own projects </li> </ul>"},{"location":"advancedCustomization/element/drillDown/drillDown/","title":"DrillDown","text":"<p>Work in progress</p>"},{"location":"advancedCustomization/element/filtration/filtration/","title":"Filtration","text":"<p>Work in progress</p>"},{"location":"advancedCustomization/element/searchparameter/searchparameter/","title":"SearchParameter","text":"<p>Work in progress</p>"},{"location":"advancedCustomization/element/validation/validation/","title":"Validation","text":"<p>Work in progress</p>"},{"location":"basic/frontbackinteraction/","title":"Frontend - Backend Interaction","text":"<p>CXBox provides a standardized and unified API mechanism for frontend\u2013backend communication. Developers don\u2019t need to design or maintain custom APIs \u2014 all data operations (read, update, delete, metadata retrieval, and custom actions) are handled by built-in endpoints. This approach simplifies development, improves consistency, and reduces integration errors.</p> <p>The platform includes a universal interaction mechanism that works equally well for forms, tables, and other widgets. This means that when you change the widget type, the underlying logic remains correct - everything continues to function without requiring additional API configuration.</p> <p>In this article, we'll examine how this mechanism is structured and explore the fundamental API methods that make it work.</p> <p>This page provides an understanding of the correspondence between UI elements and REST calls.</p> <p>A backend call can be routed to either any source or version and is processed as follows: </p> <ul> <li>VersionAwareResponseService</li> <li>AnySourceVersionAwareResponseService</li> </ul>"},{"location":"basic/frontbackinteraction/#api-structure","title":"API Structure","text":"<p>Interaction between the frontend and backend in CXBox is built on four types of APIs:</p> <ul> <li>/data</li> <li>/row-meta/</li> <li>/custom-action</li> <li>/count</li> </ul> <p>The API is structured as follows:</p> <ul> <li>independent entities:  <code>.../screen/bc</code> or <code>.../screen/bc/id</code> </li> <li>for dependent parent-child relationships:  <code>.../screen/parent_bc/id/child_bc</code> or <code>screen/parent_bc/id/child_bc/id</code></li> </ul> <p>Example:</p> <p></p>"},{"location":"basic/frontbackinteraction/#data","title":"/data","text":"Method Endpoint Description GET /api/v1/data/ Get list of records GET /api/v1/data/id Get specific record data PUT /api/v1/data/id Update record DELETE /api/v1/data/id Delete record"},{"location":"basic/frontbackinteraction/#row-meta","title":"/row-meta","text":"<p>Metadata describes which fields are enabled, which buttons are visible, and so on.</p> Method Endpoint Description GET /api/v1/row-meta Get general metadata GET /api/v1/row-meta/id Get metadata for a specific record GET /api/v1/row-meta-new Get metadata for creating new record"},{"location":"basic/frontbackinteraction/#custom-action","title":"/custom-action","text":"Method Endpoint Description POST /api/v1/custom-action Trigger a custom action"},{"location":"basic/frontbackinteraction/#count","title":"/count","text":"Method Endpoint Description GET /api/v1/count Get total record count"},{"location":"basic/frontbackinteraction/#cxbox-core-principle","title":"CXBOX Core Principle","text":"<p>All widgets work under the same logic.(except for FormPopup) This ensures that switching from one widget type to another does not disrupt the API functionality.</p>"},{"location":"basic/frontbackinteraction/#examples","title":"Examples","text":""},{"location":"basic/frontbackinteraction/#data-loading-independent-bcs","title":"Data Loading: independent BCs","text":"<p>Let\u2019s consider a screen with a single List widget.</p> <ol> <li>Open the Developer Tools \u2192 Network tab.</li> <li>Load the screen containing the list. </li> </ol> <p></p> <p>We can see that three API calls are executed.</p> <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: GET /api/v1/data/screen/bc\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/screen/bc/id\n    Frontend-&gt;&gt;Backend: GET /api/v1/count/screen/bc</code></pre>"},{"location":"basic/frontbackinteraction/#get-apiv1data","title":"GET /api/v1/data","text":"<p>How does it look?</p> <p></p> <p>Description</p> <p>This request retrieves the data to be displayed on the screen. It respects pagination parameters (page, limit), as well as filtering and sorting conditions.</p> <p></p> <p>The diagram above shows how the API response directly maps to the UI elements displayed in the list.</p>"},{"location":"basic/frontbackinteraction/#get-apiv1row-meta","title":"GET /api/v1/row-meta","text":"<p>How does it look?</p> <p></p> <p>Description When the list screen opens, CXBox automatically places the cursor on the first record \u2014 you can see this as the highlighted first row.</p> <p>The metadata response defines the state of the user interface controls, such as active buttons and editable fields, for the first record.</p> <p>(This call is made for only a single record to ensure proper operation in accordance with the CXBox Core Principle. We fetch metadata for a single record rather than all records for performance reasons. Parent-child relationships often involve complex logic, and calculating metadata for a large number of records could lead to slow UI response times.)</p> <p></p> <p>The diagram illustrates how fields correspond to their properties received from the backend.</p> <ul> <li>When the backend sends a field state with the parameter <code>disabled: true</code>, the frontend displays the field as read-only (not editable).</li> <li>When the parameter is <code>disabled: false</code>, the frontend displays the field as editable.</li> </ul> <p>This principle applies to all properties provided by this API \u2014 each property received from the backend directly determines how the field is displayed and behaves on the client side.</p>"},{"location":"basic/frontbackinteraction/#get-apiv1count","title":"GET /api/v1/count","text":"<p>How does it look?</p> <p></p> <p>Description</p> <p>The count method returns the total number of records. The call depends on the Pagination parameter \u2014 see  Pagination. The frontend uses this value to display information about the total number of available records.</p> <p></p> <p>For example: \u201cShowing 5 out of 10 records.\u201d</p>"},{"location":"basic/frontbackinteraction/#data-loading-dependent-parent-child-bcs","title":"Data Loading: dependent parent-child BCs","text":"<p>Let\u2019s consider a screen with a single List widget.</p> <ol> <li>Open the Developer Tools \u2192 Network tab.</li> <li>Load the screen containing parent\u2013child BCs.</li> </ol> <p></p> <p>When the screen loads, you can see that several API calls are executed:</p> <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: GET /api/v1/data/screen/parent_bc\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/screen/parent_bc/parent_bc_id\n    Frontend-&gt;&gt;Backend: GET /api/v1/count/screen/parent_bc\n    Frontend-&gt;&gt;Backend: GET /api/v1/data/screen/parent_bc/parent_bc_id/child_bc\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/screen/parent_bc/parent_bc_id/child_bc/child_bc_id\n    Frontend-&gt;&gt;Backend: GET /api/v1/count/screen/parent_bc/parent_bc_id/child_bc</code></pre> <p>Parent Widget</p> <p>For the parent widget, everything described above applies \u2014 standard data, row-meta, and count requests are executed.</p> <p>Child Widget</p> <p>For the child widget, everything works the same way, except for the following differences:</p> <ul> <li>The requests include parent/child prefixes, reflecting the BC hierarchy.</li> <li>Data for the child entity is calculated only for the first automatically selected record.</li> </ul> <p></p> <p>General Principles</p> <p>For all widget types, the system always performs API requests (/data, /row-meta, /count), including fields that use popup widgets.</p> <p><code>Exceptions</code>: FormPopup, notifications, filePreview, and customization of displayed columns calls \u2014 these behave differently.</p>"},{"location":"basic/frontbackinteraction/#get-apiv1data_1","title":"GET /api/v1/data","text":"<p>How does it look?</p> <p></p> <p>Description see  description</p>"},{"location":"basic/frontbackinteraction/#get-apiv1row-meta_1","title":"GET /api/v1/row-meta","text":"<p>How does it look?</p> <p></p> <p>Description</p> <p>see  description</p>"},{"location":"basic/frontbackinteraction/#get-apiv1count_1","title":"GET /api/v1/count","text":"<p>How does it look?</p> <p></p> <p>Description see  description</p>"},{"location":"basic/frontbackinteraction/#edit-force-active","title":"Edit (Force Active)","text":"<p>When editing data, any changes are not sent to the backend until the user clicks the \u201cSave\u201d button. However, some fields can be marked as force-active. For such fields, every time their value changes, a request is automatically sent to the backend, and the updated values of dependent fields are returned to the frontend. This is useful when the value of one field depends on another.</p> <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: POST /api/v1/row-meta/screen/bc/id</code></pre>"},{"location":"basic/frontbackinteraction/#post-apiv1row-meta","title":"POST /api/v1/row-meta","text":"<p>How does it look?</p> <p></p> <p>Description</p> <p>Let\u2019s look at an example where the country field is marked as force-active. When the user changes the value of this field, the region and street fields should be automatically updated.</p> <ol> <li>All fields are initially empty</li> </ol> <p></p> <ol> <li>Fill in the \"Country\" field    The user selects a value in the Country field.    After the value is selected, a meta request (/api/v1/row-meta) is triggered.</li> </ol> <p></p> <ol> <li>Dependent fields are updated    On the backend, the region and street fields are automatically filled based on the selected country,    and the updated values are returned to the frontend.</li> </ol> countryregionstreet <p></p> <p></p> <p></p>"},{"location":"basic/frontbackinteraction/#formpopup","title":"FormPopup","text":"<p>All widget types follow the described logic above Independent BCs,dependent parent-child BCs, except for FormPopup.</p> <p>The reason for this exception is that when a FormPopup is opened, it doesn\u2019t just display existing data \u2014 it triggers a process similar to changing the active field and then updating its dependent fields.</p> <p>This means that when the popup is opened, we must fetch the latest row meta to ensure that recalculated and up-to-date fields are displayed. Like ForceActive but with button.</p> <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: POST /api/v1/row-meta/screen/bc/id</code></pre>"},{"location":"basic/frontbackinteraction/#post-apiv1row-meta_1","title":"POST /api/v1/row-meta","text":"<p>How does it look?</p> <p></p> <p>Description</p> <p>see  description</p>"},{"location":"basic/frontbackinteraction/#standart-action","title":"Standart action","text":""},{"location":"basic/frontbackinteraction/#save","title":"Save","text":"<pre><code>sequenceDiagram \n    Frontend-&gt;&gt;Backend: PUT /api/v1/data/screen/bc/id\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/screen/bc/id </code></pre>"},{"location":"basic/frontbackinteraction/#put-apiv1data","title":"PUT /api/v1/data","text":"<p>How does it look?</p> <p></p> <p>Description</p> <p>see  description</p>"},{"location":"basic/frontbackinteraction/#post-apiv1row-meta_2","title":"POST /api/v1/row-meta","text":"<p>How does it look?</p> <p></p> <p>Description</p> <p>see  description</p>"},{"location":"basic/frontbackinteraction/#custom-action_1","title":"Custom-action","text":"<p>Clicking the custom button triggers 3 calls:</p> <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: GET /api/v1/custom-action\n    Frontend-&gt;&gt;Backend: GET /api/v1/data\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta</code></pre>"},{"location":"basic/frontbackinteraction/#get-apiv1custom-action","title":"GET /api/v1/custom-action","text":"<p>How does it look? </p> <p></p>"},{"location":"basic/frontbackinteraction/#get-apiv1data_2","title":"GET /api/v1/data","text":"<p>How does it look?</p> <p></p> <p>Description see  description</p>"},{"location":"basic/frontbackinteraction/#get-apiv1row-meta_2","title":"GET /api/v1/row-meta","text":"<p>How does it look?</p> <p></p> <p>Description</p> <p>see  description</p>"},{"location":"environment/repository/","title":"Basic","text":"<p>Standard repository elements:</p> <ul> <li>Entity</li> <li>DTO</li> <li>Service</li> <li>MetaBuilder</li> <li>Controller</li> </ul>"},{"location":"environment/businesscomponent/businesscomponent/","title":"Business component","text":"<p>Work in progress</p>"},{"location":"environment/controller/controller/","title":"Controller","text":"<p>Work in progress</p>"},{"location":"environment/dto/dto/","title":"DTO","text":"<p>Work in progress</p>"},{"location":"environment/entity/entity/","title":"Entity","text":"<p>Work in progress</p>"},{"location":"environment/meta/metabuilder/","title":"Meta builder","text":"<p>Work in progress</p>"},{"location":"environment/meta/metabuilder/#basics","title":"Basics","text":""},{"location":"environment/meta/metabuilder/#fieldmetabuilder","title":"FieldMetaBuilder","text":"<p> Live Sample \u00b7</p> Example <p>Meta extends FieldMetaBuilder</p>"},{"location":"environment/meta/metabuilder/#anysourcefieldmetabuilder","title":"AnySourceFieldMetaBuilder","text":"<p> Live Sample \u00b7</p> Example <p>Meta extends AnySourceFieldMetaBuilder</p> <pre><code>@SuppressWarnings(\"EmptyMethod\")\n@Service\npublic class MyExampleMeta extends AnySourceFieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bc,\nString id, String parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bcDescription,\nString parentId) {\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n}\n</code></pre> <p>To customize properties in interfaces, you can use the following options:</p> <ul> <li> <p>buildRowDependentMeta</p> </li> <li> <p>buildIndependentMeta</p> </li> </ul> <p>Overall, customizing properties in interfaces allows you to tailor the user experience and provide more functionality and flexibility in your application.</p>"},{"location":"environment/meta/metabuilder/#buildrowdependentmeta","title":"buildRowDependentMeta","text":"<p>RowDependentFieldsMeta</p> <pre><code>/**\n * Adds a value to an existing list of selectable values\n *\n * @param field widget field with type dictionary\n * @param dictDTO DTO with dictionary value\n */\n</code></pre>"},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/","title":"defaultGroupingHierarchy()","text":"<p><code>defaultGroupingHierarchy()</code> -  This method sets default hierarchy for \"GroupingHierarchy\" widget, that will always be shown (even, when widget has no data from backend).  </p> <p>Methods for Levels 1-4 For levels 1 through 4, the methods ensure compatibility between the reference books (enums/dictionaries) and the list of fields DTO. These methods validate that each level\u2019s field corresponds to a defined reference book.</p> <p>Method for Creating Hierarchies \u2265 5 Levels For hierarchies with 5 or more levels, the method does not perform compatibility checks. Exercise caution, as mismatched fields may lead to unexpected behavior</p> <p>The grouping is determined by the fields DTO specified in the method call fields.defaultGroupingHierarchy(...).</p> <p>The order of the fields listed is critical as it determines the sequence of grouping, starting from the topmost level (leftmost field) down to the deepest level (rightmost field).</p> <p>Suppose you have four levels of hierarchy, defined as:</p> <ul> <li><code>Level 1</code>: CustomFieldDictionaryEnum</li> <li><code>Level 2</code>: CustomFieldDictionaryLevelTwoEnum</li> <li><code>Level 3</code>: CustomFieldDictionaryLevelThreeEnum</li> <li><code>Level 4</code>: CustomFieldDictionaryLevelFourEnum</li> </ul> <p></p> <p>You can configure this hierarchy in the method call:</p> <pre><code>fields.defaultGroupingHierarchy(\n    MyExampleDTO_.customFieldDictionary,\n    MyExampleDTO_.customFieldDictionaryLevelTwo,\n    MyExampleDTO_.customFieldDictionaryLevelThree,\n    MyExampleDTO_.customFieldDictionaryLevelFour,\n</code></pre> <ul> <li>field1 \u2013 FIRST field listed in .widget. json -&gt; \"options\" -&gt; \"groupingHierarchy\" -&gt; \"fields\" </li> <li>field2 \u2013 SECOND field listed in .widget. json -&gt; \"options\" -&gt; \"groupingHierarchy\" -&gt; \"fields\"</li> <li>field3 \u2013 THIRD field listed in .widget. json -&gt; \"options\" -&gt; \"groupingHierarchy\" -&gt; \"fields\" </li> <li>field4 \u2013 FOURTH field listed in .widget. json -&gt; \"options\" -&gt; \"groupingHierarchy\" -&gt; \"fields\"</li> </ul> <p>This ensures the hierarchy progresses sequentially from Level 1 to Level 4.</p> <p>Structure:</p> <pre><code>Level 1 (CustomFieldDictionaryEnum):\n\n    Level 2 (CustomFieldDictionaryLevelTwoEnum):\n\n        Level 3 (CustomFieldDictionaryLevelThreeEnum):\n\n            Level 4 (CustomFieldDictionaryLevelFourEnum).\n</code></pre> <p>Lambdas (lvl -&gt; lvl.add(...)) allow customization for each grouping level.They specify enumeration values for the particular level. .</p>"},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#examples","title":"Examples","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#level-1","title":"Level 1","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#how-does-it-look","title":"How does it look?","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#how-to-add","title":"How to add?","text":"<p><code>Step 1</code>  Add field DTO</p> <p><code>Step 2</code>  Add levels</p> <pre><code>     fields.defaultGroupingHierarchy(\n        MyExampleDTO_.customFieldDictionary,\n            lvl -&gt; lvl\n                .add(CustomFieldDictionaryEnum.LEVEL_1_HIGH)\n                .add(CustomFieldDictionaryEnum.LEVEL_1_MIDDLE)\n    );\n</code></pre> <p>Example Hierarchy Structure:</p> <pre><code>Level 1 (High):\nLevel 1 (Middle).\n</code></pre>"},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#level-2","title":"Level 2","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#how-does-it-look_1","title":"How does it look?","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#how-to-add_1","title":"How to add?","text":"<p><code>Step 1</code>  Add list of fields DTO</p> <p><code>Step 2</code>  Add levels  <pre><code>    fields.defaultGroupingHierarchy(\n                    MyExampleDTO_.customFieldDictionary,\n                    MyExampleDTO_.customFieldDictionaryLevelTwo,\n                    lvl -&gt; lvl\n                            .add(\n                                    CustomFieldDictionaryEnum.LEVEL_1_HIGH,\n                                    lvl2 -&gt; lvl2\n                                            .add(CustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE)\n                                            .add(CustomFieldDictionaryLevelTwoEnum.LEVEL_2_HIGH)\n                            )\n                            .add(\n                                    CustomFieldDictionaryEnum.LEVEL_1_MIDDLE\n                            )\n            );\n        }\n</code></pre></p> <p>Example Hierarchy Structure:</p> <pre><code>Level 1 (High):\n    Level 2 (High):\n    Level 2 (Middle).\nLevel 1 (Middle).\n</code></pre>"},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#level-3","title":"Level 3","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#how-to-add_2","title":"How to add?","text":"<p><code>Step 1</code>  Add list of fields DTO</p> <p><code>Step 2</code>  Add levels</p> <pre><code>    fields.defaultGroupingHierarchy(\n                MyExampleDTO_.customFieldDictionary,\n                MyExampleDTO_.customFieldDictionaryLevelTwo,\n                MyExampleDTO_.customFieldDictionaryLevelThree,\n                lvl -&gt; lvl\n                        .add(\n                                CustomFieldDictionaryEnum.LEVEL_1_HIGH,\n                                lvl2 -&gt; lvl2\n                                        .add(\n                                                CustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE,\n                                                lvl3 -&gt; lvl3\n                                                        .add(CustomFieldDictionaryLevelThreeEnum.LEVEL_3_MIDDLE)\n                                        )\n                        )\n                        .add(\n                                CustomFieldDictionaryEnum.LEVEL_1_MIDDLE,\n                                lvl2 -&gt; lvl2\n                                        .add(\n                                                CustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE,\n                                                lvl3 -&gt; lvl3\n                                                        .add(CustomFieldDictionaryLevelThreeEnum.LEVEL_3_MIDDLE)\n                                        )\n                        )\n        );\n</code></pre> <p>Example Hierarchy Structure:</p> <pre><code>Level 1 (High):\n    Level 2 (Middle):\n        Level 3 (Middle).\nLevel 1 (Middle):\n    Level 2 (Middle):\n        Level 3 (Middle).\n</code></pre>"},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#level-4","title":"Level 4","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#how-does-it-look_3","title":"How does it look?","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#how-to-add_3","title":"How to add?","text":"<p><code>Step 1</code>  Add list of fields DTO</p> <p><code>Step 2</code>  Add levels</p> <pre><code>  fields.defaultGroupingHierarchy(\n                MyExampleDTO_.customFieldDictionary,\n                MyExampleDTO_.customFieldDictionaryLevelTwo,\n                MyExampleDTO_.customFieldDictionaryLevelThree,\n                MyExampleDTO_.customFieldDictionaryLevelFour,\n                lvl -&gt; lvl\n                        .add(\n                                CustomFieldDictionaryEnum.LEVEL_1_HIGH,\n                                lvl2 -&gt; lvl2\n                                        .add(\n                                                CustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE,\n                                                lvl3 -&gt; lvl3\n                                                        .add(\n                                                                CustomFieldDictionaryLevelThreeEnum.LEVEL_3_MIDDLE,\n                                                                lvl4 -&gt; lvl4.add(CustomFieldDictionaryLevelFourEnum.LEVEL_4_HIGH)\n                                                        )\n                                        )\n                        )\n                        .add(\n                                CustomFieldDictionaryEnum.LEVEL_1_MIDDLE,\n                                lvl2 -&gt; lvl2\n                                        .add(\n                                                CustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE,\n                                                lvl3 -&gt; lvl3\n                                                        .add(CustomFieldDictionaryLevelThreeEnum.LEVEL_3_MIDDLE)\n                                        )\n                        )\n        );\n</code></pre> <p>Example Hierarchy Structure:</p> <pre><code>Level 1 (High):\n    Level 2 (Middle):\n        Level 3 (Middle):\n            Level 4 (High).\nLevel 1 (Middle).\n    Level 2 (Middle):\n        Level 3 (Middle).\n</code></pre>"},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#level-5","title":"Level 5","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#how-does-it-look_4","title":"How does it look?","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#how-to-add_4","title":"How to add?","text":"<p><code>Step 1</code>  Add list of fields DTO</p> <p><code>Step 2</code>  Add levels</p> <pre><code>        fields.defaultGroupingHierarchy(\n                List.of(\n                        MyExampleDTO_.customFieldDictionary,\n                        MyExampleDTO_.customFieldDictionaryLevelTwo,\n                        MyExampleDTO_.customFieldDictionaryLevelThree,\n                        MyExampleDTO_.customFieldDictionaryLevelFour,\n                        MyExampleDTO_.customFieldDictionaryLevelFive\n                ),\n                new Hierarchy&lt;Object, Hierarchy&lt;Object, Hierarchy&lt;Object, Hierarchy&lt;Object, Hierarchy&lt;Object, ?&gt;&gt;&gt;&gt;&gt;()\n                        .add(\n                                CustomFieldDictionaryEnum.LEVEL_1_HIGH,\n                                lvl2 -&gt; lvl2.add(\n                                        CustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE,\n                                        lvl3 -&gt; lvl3.add(\n                                                CustomFieldDictionaryLevelThreeEnum.LEVEL_3_MIDDLE,\n                                                lvl4 -&gt; lvl4.add(\n                                                        CustomFieldDictionaryLevelFourEnum.LEVEL_4_MIDDLE,\n                                                        lvl5 -&gt; lvl5.add(\n                                                                CustomFieldDictionaryLevelFiveEnum.LEVEL_5_HIGH)))\n                                )\n                        )\n                        .add(\n                                CustomFieldDictionaryEnum.LEVEL_1_MIDDLE,\n                                lvl2 -&gt; lvl2.add(\n                                        CustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE,\n                                        lvl3 -&gt; lvl3.add(CustomFieldDictionaryLevelThreeEnum.LEVEL_3_MIDDLE)\n                                )\n                        )\n        );\n</code></pre> <p>Example Hierarchy Structure:</p> <pre><code>Level 1 (High):\n    Level 2 (Middle):\n        Level 3 (Middle):\n            Level 4 (Middle):\n                Level 5 (High).\nLevel 1 (Middle).\n    Level 2 (Middle):\n        Level 3 (Middle).\n</code></pre>"},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#add-with-cfg","title":"Add with cfg","text":""},{"location":"environment/meta/buildindependentmeta/defaultgh/defaultgh/#default-expanded","title":"Default Expanded","text":"<p>The defaultExpanded parameter determines whether a group in the hierarchy is expanded or collapsed by default.</p> <ul> <li>true:   The group is expanded by default, regardless of the number of elements nested in it. All levels are fully visible immediately.</li> <li>false:   Collapsed when the group contains more than one element.</li> <li>null or missing:   Default (same as false)</li> </ul> <p>see more GroupingHierarchy.defaultExpanded</p>"},{"location":"environment/meta/buildrowdependentmeta/isfieldchangednow/isfieldchangednow/","title":"<code>isFieldChangedNow()</code>","text":"<p> Live Sample \u00b7  GitHub</p> <p>Available since v2.0.14</p> <p>The <code>isFieldChangedNow()</code> method checks whether a specific field was modified by the user  during the current frontend interaction (in this iteration only).</p> <pre><code>public &lt;V&gt; boolean isFieldChangedNow(RowDependentFieldsMeta&lt;T&gt; fields, DtoField&lt;? super T, V&gt; field)\n</code></pre> <p>Parameters:</p> <ul> <li><code>fields</code> \u2013 The current metadata state of the fields</li> <li><code>field</code> \u2013 The DTO field to check</li> </ul> <p>Returns(boolean):</p> <ul> <li><code>true</code> if the field was changed in the UI during this interaction</li> <li><code>false</code> if it was not changed</li> </ul> <p>\u2705 Recommended Usage</p> <p>Use this method only for checking changes in dependent fields. We recommend placing <code>isFieldChangedNow()</code> at the beginning of <code>buildRowDependentMeta</code>, to ensure all dependent values are updated first, before setting setHidden, setRequired, or other field properties.</p>"},{"location":"environment/meta/buildrowdependentmeta/isfieldchangednow/isfieldchangednow/#how-to-add","title":"How to add?","text":"<p> Live Sample \u00b7  GitHub</p> Example <p>buildRowDependentMeta </p> <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bcDescription,\nString id, String parentId) {\nif (fields.isFieldChangedNow(fields, MyExampleDTO_.country)) {\nif (fields.getCurrentValue(MyExampleDTO_.country).isEmpty()) {\nfields.setCurrentValue(MyExampleDTO_.region, null);\nfields.setCurrentValue(MyExampleDTO_.street, null);\nfields.setCurrentValue(MyExampleDTO_.customField, null);\n} else if (Objects.equals(fields.getCurrentValue(MyExampleDTO_.country).orElse(null), CountryEnum.BELARUS)) {\nfields.setCurrentValue(MyExampleDTO_.region, RegionEnum.MINSK);\nfields.setCurrentValue(MyExampleDTO_.street, \"Avenue Nezavisimosti\");\nfields.setCurrentValue(MyExampleDTO_.customField, \"New value for BELARUS\");\n} else if (Objects.equals(fields.getCurrentValue(MyExampleDTO_.country).orElse(null), CountryEnum.RUSSIA)) {\nfields.setCurrentValue(MyExampleDTO_.region, RegionEnum.MOSCOWSKAYA);\nfields.setCurrentValue(MyExampleDTO_.street, \"Tverskaya street\");\nfields.setCurrentValue(MyExampleDTO_.customField, \"New value for RUSSIA\");\n}\n}\nif (fields.isFieldChangedNow(fields, MyExampleDTO_.region)) {\nif ((Objects.equals(fields.getCurrentValue(MyExampleDTO_.region).orElse(null), RegionEnum.MINSK))) {\nfields.setCurrentValue(MyExampleDTO_.street, \"Avenue Nezavisimosti\");\nfields.setCurrentValue(MyExampleDTO_.customField, \"New value Minsk\");\n} else if ((Objects.equals(fields.getCurrentValue(MyExampleDTO_.region).orElse(null), RegionEnum.GOMEL))) {\nfields.setCurrentValue(MyExampleDTO_.street, \"Avenue Nezavisimosti Gomel\");\nfields.setCurrentValue(MyExampleDTO_.customField, \"New value Gomel\");\n} else if ((Objects.equals(fields.getCurrentValue(MyExampleDTO_.region).orElse(null), RegionEnum.MOSCOWSKAYA))) {\nfields.setCurrentValue(MyExampleDTO_.street, \"Tverskaya street\");\nfields.setCurrentValue(MyExampleDTO_.customField, \"New value\");\n} else {\nfields.setCurrentValue(MyExampleDTO_.street, null);\nfields.setCurrentValue(MyExampleDTO_.customField, null);\n}\n}\nif (fields.isFieldChangedNow(fields, MyExampleDTO_.street)) {\nfields.setCurrentValue(MyExampleDTO_.customField, \"New value\");\n}\nif (fields.isFieldChangedNow(fields, MyExampleDTO_.customFieldDouble)) {\nfields.setCurrentValue(MyExampleDTO_.customField, \"\");\n}\nif (fields.isFieldChangedNow(fields, MyExampleDTO_.street)) {\nfields.setCurrentValue(MyExampleDTO_.customField, \"test\");\n}\nfields.setEnabled(MyExampleDTO_.street);\nfields.setEnabled(MyExampleDTO_.money);\nfields.setEnabled(MyExampleDTO_.descriptionProduct);\nfields.setEnabled(MyExampleDTO_.product);\nfields.setEnabled(MyExampleDTO_.country);\nfields.setEnabled(MyExampleDTO_.region);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setEnabled(MyExampleDTO_.customFieldNew);\nfields.setEnabled(MyExampleDTO_.customFieldDouble);\nfields.setEnabled(MyExampleDTO_.customFieldDateTime);\nfields.setPlaceholder(MyExampleDTO_.customFieldDateTime, \"Less sysdate\");\nfields.setEnumValues(MyExampleDTO_.country, CountryEnum.values());\nfields.setEnumValues(MyExampleDTO_.region, RegionEnum.values());\nif (Objects.equals(fields.getCurrentValue(MyExampleDTO_.country).orElse(null), CountryEnum.BELARUS)) {\nfields.setEnumValues(MyExampleDTO_.region, RegionEnum.BREST, RegionEnum.GOMEL, RegionEnum.MINSK);\n} else if (Objects.equals(fields.getCurrentValue(MyExampleDTO_.country).orElse(null), CountryEnum.RUSSIA)) {\nfields.setEnumValues(MyExampleDTO_.region, RegionEnum.KOSTROMSKAYA, RegionEnum.MOSCOWSKAYA, RegionEnum.VOLGOGRADSKAYA);\n}\n}\n</code></pre>"},{"location":"environment/meta/buildrowdependentmeta/isfieldchangednow/isfieldchangednow/#how-it-works","title":"How it works?","text":"<p>On the frontend side, a new tag <code>changedNow_</code> was introduced. This tag stores only the fields modified in the current user session, before being sent to the backend.</p> After row-meta/ (POST) (v2.0.14+)Before row-meta/ (POST)  <p></p> <p></p> <p>When is <code>changedNow_</code> sent?</p> <p>row-meta/ (POST)</p> <ul> <li>When the user exits a field that has <code>forceActive = true</code>.</li> <li>When call FormPopup widget</li> </ul> After Behavior (v2.0.14+)Before Behavior Scenario Meta Builder Called Field Update Triggered Editing a field with <code>forceActive</code> \u2705 Yes \u2705 Yes <code>forceActive</code> \u2192 Standard Save button (for fields listed below where <code>row-meta</code> is not triggered until the field is exited) \u274c No \u274c No <code>forceActive</code> \u2192 Custom button (for fields listed below where <code>row-meta</code> is not triggered until the field is exited) \u274c No \u274c No Opening a <code>FormPopup</code> \u2705 Yes \u2705 Yes Clicking only the Standard Save button \u274c No \u274c No Clicking only a Custom button \u274c No \u274c No Clicking Delete \u274c No \u274c No (only deletes the record) Scenario Meta Builder Called Field Update Triggered Editing a field with <code>forceActive</code> \u2705 Yes \u2705 Yes <code>forceActive</code> \u2192 Standard Save button (for fields listed below where <code>row-meta</code> is not triggered until the field is exited) \u2705 Yes (via <code>/row-meta</code> \u2192 followed by save request) Update occurs within the <code>/row-meta</code> event <code>forceActive</code> \u2192 Custom button (for fields listed below where <code>row-meta</code> is not triggered until the field is exited) \u2705 Yes (via <code>/row-meta</code> \u2192 followed by custom action) Update occurs within the <code>/row-meta</code> event Opening a <code>FormPopup</code> \u2705 Yes \u2705 Yes Clicking only the Standard Save button \u274c No \u274c No Clicking only a Custom button \u274c No \u274c No Clicking Delete \u274c No \u274c No (only deletes the record) <p>Field Type Behavior</p> <p>Legend:</p> <ul> <li>\u2705 \u2014 <code>forceActive</code> (<code>row-meta</code>) is triggered immediately on value selection.</li> <li>\u274c \u2014 <code>row-meta</code> is not triggered until a button is clicked or user leaves the field.</li> <li><code>noValid</code> \u2014 field does not support in-place value changes.</li> </ul> Field Type <code>forceActive</code> triggered immediately? Notes <code>input</code> \u274c No Triggered on click outside the field or on a button <code>date</code> \u2705 Yes <code>dateTime</code> \u2705 Yes <code>dateTimeWithSeconds</code> \u2705 Yes <code>number</code> \u274c No Triggered on click outside the field or on a button <code>percent</code> \u274c No Triggered on click outside the field or on a button <code>hidden</code> <code>noValid</code> Not editable <code>text</code> \u274c No Triggered on click outside the field or on a button <code>radio</code> \u2705 Yes <code>checkbox</code> \u2705 Yes <code>money</code> \u274c No <code>dictionary</code> \u2705 Yes <code>fileUpload</code> \u2705 Yes <code>pickList</code> \u2705 Yes <code>inlinePickList</code> \u2705 Yes Save only triggered if an item is picked <code>hint</code> <code>noValid</code> Not editable <code>multifield</code> \u2705 Yes <code>multivalueHover</code> <code>noValid</code> Not editable <code>multivalue</code> \u2705 Yes <code>multipleSelect</code> \u2705 Yes <code>suggestionPickList</code> \u2705 Yes Save only triggered if an item is picked"},{"location":"environment/meta/buildrowdependentmeta/isfieldchangednow/isfieldchangednow/#isfieldchanged-vs-isfieldchangednow","title":"<code>isFieldChanged()</code> vs  <code>isFieldChangedNow()</code>","text":"<p>Unlike <code>isFieldChanged()</code>, which checks whether a field has changed at any point in the past (e.g., using the accumulated <code>data</code> tag), <code>isFieldChangedNow()</code> looks specifically at the current interaction, based on the <code>changedNowParam</code> tag.</p> <p>This distinction is important when using <code>forceActive</code> or working with dependent fields:</p> <ul> <li><code>isFieldChanged()</code> may detect earlier changes from previous interactions.</li> <li><code>isFieldChangedNow()</code> detects only immediate user input from the ongoing client-side session.</li> </ul>"},{"location":"environment/service/service/","title":"Service","text":"<p>Work in progress</p>"},{"location":"environment/service/service/#basics","title":"Basics","text":""},{"location":"environment/service/service/#versionawareresponseservice","title":"VersionAwareResponseService","text":"<p> Live Sample \u00b7</p> <p>VersionAwareResponseService is utilized for directly outputting data from a table,  where the number of output rows matches the number of records in the table.  This service does not perform any complex data aggregation.  However, if you need to output data from a view, any necessary data transformations can be handled within the view itself.</p> Example <pre><code>@SuppressWarnings(\"java:S\")\n@RequiredArgsConstructor\n@Service\npublic class InputBasicService extends VersionAwareResponseService&lt;InputBasicDTO, InputBasic&gt; {\nprivate final InputBasicRepository repository;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;InputBasicMeta&gt; meta = InputBasicMeta.class;\n@Override\nprotected CreateResult&lt;InputBasicDTO&gt; doCreateEntity(InputBasic entity, BusinessComponent bc) {\nrepository.save(entity);\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;InputBasicDTO&gt; doUpdateEntity(InputBasic entity, InputBasicDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(InputBasicDTO_.customFieldRO)) {\nentity.setCustomFieldRO(data.getCustomFieldRO());\n}\nif (data.isFieldChanged(InputBasicDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\npublic Actions&lt;InputBasicDTO&gt; getActions() {\nreturn Actions.&lt;InputBasicDTO&gt;builder()\n.save(sv -&gt; sv.text(\"Save\"))\n.build();\n}\n}\n</code></pre>"},{"location":"environment/service/service/#doupdateentity","title":"doUpdateEntity","text":"<p>Tips</p> <p>This method should not perform any actions with side effects, as it is invoked multiple times by the kernel.   Any calls to external services that modify data or perform actions should be handled in the button invoker.</p>"},{"location":"environment/service/service/#anysourceversionawareresponseservice","title":"AnySourceVersionAwareResponseService","text":"<p> Live Sample \u00b7</p> <p>AnySourceVersionAwareResponseService enables data display from any source: external data sources and aggregated data from databases. For directly outputting data from the database, it is recommended to use VersionAwareResponseService.</p> Example <pre><code>@SuppressWarnings({\"java:S\", \"java:S\"})\n@RequiredArgsConstructor\n@Service\npublic class MyExampleService extends AnySourceVersionAwareResponseService&lt;MyExampleDTO, MyEntityOutServiceDTO&gt; {\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleMeta&gt; meta = MyExampleMeta.class;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyEntityDao&gt; dao = MyEntityDao.class;\n@Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntityOutServiceDTO entity, BusinessComponent bc) {\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntityOutServiceDTO entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.addGroup(\n\"actions\",\n\"Actions\",\n0,\nActions.&lt;MyExampleDTO&gt;builder()\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.build()).\nbuild();\n}\n}\n</code></pre>"},{"location":"environment/service/service/#doupdateentity_1","title":"doUpdateEntity","text":"<p>Tips</p> <p>This method should not perform any actions with side effects, as it is invoked multiple times by the kernel. You are limited to adding actions only to the current transaction.   Any calls to external services that modify data or perform actions should be handled in the button invoker.</p>"},{"location":"environment/userrole/userrole/","title":"UserRole","text":"<p>Work in progress</p>"},{"location":"features/element/actions/actions/","title":"Actions","text":"<p><code>Actions</code> show available actions as separate buttons</p> <p>Work in progress</p> <ul> <li>text - (can be empty string) static </li> <li>icon - (optional) static</li> <li>availability condition (optional)</li> <li>preAction - (optional) CONFIRMATION,INFORMATION,ERROR,CUSTOM</li> <li>invoker - (required). can change data. can additionally return</li> <li>postAction - (optional) REFRESH_BC, DOWNLOAD_FILE, DOWNLOAD_FILE_BY_URL, OPEN_PICK_LIST, DRILL_DOWN, DELAYED_REFRESH_BC, SHOW_MESSAGE, POST_DELETE</li> <li>fields validation results</li> <li>business and other exceptions</li> <li>scope - (required) bc, record</li> </ul>"},{"location":"features/element/actions/actions/#text","title":"Text","text":"<p>Tips</p> <p>We recommend always using text with a string.  If text is not specified, localized text will be used by default. see more Localization</p>"},{"location":"features/element/actions/postaction/postaction/","title":"Actions","text":"<p><code>Actions</code> show available actions as separate buttons</p> <p>Work in progress</p> <ul> <li>text - (can be empty string) static </li> <li>icon - (optional) static</li> <li>availability condition (optional)</li> <li>preAction - (optional) CONFIRMATION,INFORMATION,ERROR,CUSTOM</li> <li>invoker - (required). can change data. can additionally return</li> <li>postAction - (optional) REFRESH_BC, DOWNLOAD_FILE, DOWNLOAD_FILE_BY_URL, OPEN_PICK_LIST, DRILL_DOWN, DELAYED_REFRESH_BC, SHOW_MESSAGE, POST_DELETE</li> <li>fields validation results</li> <li>business and other exceptions</li> <li>scope - (required) bc, record</li> </ul>"},{"location":"features/element/actions/postaction/postaction/#text","title":"Text","text":"<p>Tips</p> <p>We recommend always using text with a string.  If text is not specified, localized text will be used by default. see more Localization</p>"},{"location":"features/element/actions/postaction/drilldownandwaituntil/ddandwaituntil/","title":"waitUntil and drillDownAndWaitUntil","text":""},{"location":"features/element/actions/postaction/drilldownandwaituntil/ddandwaituntil/#waituntil","title":"waitUntil","text":"<p> Live Sample \u00b7  GitHub</p> <p>This mechanism is useful for implementing long-running operations where the user needs to be informed about the progress and its outcome.</p>"},{"location":"features/element/actions/postaction/drilldownandwaituntil/ddandwaituntil/#how-does-it-look","title":"How does it look?","text":"Without custom messageWith <code>Success</code> and <code>In progress</code> custom messageWith <code>Timeout</code> custom message <p><pre><code>PostAction.waitUntil(\nMyExampleDTO_.statusResponse, StatusEnum.DONE)                .timeoutMaxRequests(6)          .timeout(Duration.ofSeconds(12))  .inProgressMessage(\"In Progress custom message\")  .successMessage(\"Success custom message\")       .timeoutMessage(\"Timeout custom message\")      .build()\n</code></pre> Parameters of <code>waitUntil</code>:</p> <ul> <li> <p>(Required) Field to check for the condition:     <code>MyExampleDTO_.statusResponse</code> \u2014 This is the field that will be checked for the condition. It can be of type boolean, string, Dictionary, Enum, LOV.     Field that will be compared to the expected value.This field must be (may be hidden) in the  on the screen.</p> </li> <li> <p>(Required) Expected value:     <code>StatusEnum.DONE</code> \u2014 This is the value the frontend will wait for in the <code>statusResponse</code> field.    When the field matches this value, the waiting dialog will be closed.</p> </li> </ul> <p>Additional Configuration:</p> <ul> <li> <p>(Optional) Maximum number of requests:      <code>timeoutMaxRequests(6)</code> \u2014 This is the maximum number of requests the frontend will make to the backend to check the condition. If the condition is not met after 6 requests, a timeout will be triggered.         By default, <code>timeoutMaxRequests</code> is set to 3.</p> </li> <li> <p>(Optional) Timeout:       <code>timeout(Duration.ofSeconds(12))</code> \u2014 The total time during which the frontend will wait for the condition to be met. In this case, it is 12 seconds. The time between requests is calculated as <code>total time / number of requests</code>. Here, the interval between requests will be <code>12 seconds / 6 requests = 2 seconds</code>.    By default, <code>timeout</code> is set to 5 seconds.</p> </li> <li>(Optional) In-progress message:     <code>inProgressMessage(\"In Progress custom message\")</code> \u2014 This is a custom message that will be displayed on the frontend while waiting for the condition to be met.       By default, a standard message is displayed: Operation in progress. </li> <li>(Optional) Success message:       <code>successMessage(\"Success custom message\")</code> \u2014 This is a custom message that will be displayed when the condition is met (i.e., when <code>statusResponse</code> equals <code>StatusEnum.DONE</code>).       By default, the standard message is not displayed.</li> <li>(Optional) Timeout message:     <code>timeoutMessage(\"Timeout custom message\")</code> \u2014 This is a custom message that will be displayed if the condition is not met before the timeout expires (i.e., after 6 requests within 12 seconds).       By default, the standard message is not displayed.</li> </ul> <p>How it works:</p> <ul> <li>The frontend starts making requests to the backend at intervals of 2 seconds (12 seconds / 6 requests).</li> <li>On each request, the value of the <code>statusResponse</code> field is checked.</li> <li>If the field becomes equal to <code>StatusEnum.DONE</code>, the <code>Success custom message</code> is displayed, and the process completes.</li> <li>If the condition is not met after 6 requests, the <code>Timeout custom message</code> is displayed, and the process ends due to a timeout.</li> <li>During the execution of the requests, the <code>In Progress custom message</code> is displayed.</li> </ul>"},{"location":"features/element/actions/postaction/drilldownandwaituntil/ddandwaituntil/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add PostAction.waitUntil to corresponding VersionAwareResponseService. </p> <p><pre><code>       @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.action(act -&gt; act\n.action(\"searchData\", \"Search data\")\n.scope(ActionScope.RECORD)\n.invoker((bc, dto) -&gt; {\nMyEntity myEntity  = repository.findById(bc.getIdAsLong()).orElseThrow();\nmyEntity.setStatusResponse(StatusEnum.IN_PROGRESS);\nrepository.save(myEntity);\nfindInExternalSystemAsync(bc, dto);\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.waitUntil(\nMyExampleDTO_.statusResponse,\nStatusEnum.DONE)\n.timeoutMaxRequests(6).timeout(Duration.ofSeconds(12)).build());\n})\n)\n.action(act -&gt; act\n.scope(ActionScope.RECORD)\n.action(\"gotofind\", \"Go to Find\")\n.withoutAutoSaveBefore()\n.invoker((bc, dto) -&gt; {\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleallform\"\n));\n})\n)\n.build();\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"features/element/actions/postaction/drilldownandwaituntil/ddandwaituntil/#drilldownandwaituntil","title":"drillDownAndWaitUntil","text":"<p> Live Sample \u00b7  GitHub This method is useful for scenarios where you need to navigate to a screen, wait for a specific condition (e.g., a status change), and provide feedback to the user during the process.</p> <p>Creates a post-action that performs a INNER drill-down and then waits until a specified condition is met.</p>"},{"location":"features/element/actions/postaction/drilldownandwaituntil/ddandwaituntil/#how-does-it-look_1","title":"How does it look?","text":"Without custom messageWith <code>Success</code> and <code>In progress</code> custom messageWith <code>Timeout</code> custom message <pre><code>PostAction.drillDownAndWaitUntil(\n\"/screen/myexample/view/myexampleresultform/\" +\nCxboxMyExampleController.myexample + \"/\" + myEntity.getId(),\nCxboxMyExampleController.myexample,\nMyExampleDTO_.statusResponse,\nStatusEnum.DONE\n)\n.inProgressMessage(\"In Progress custom message\")\n.successMessage(\"Success custom message\")\n.timeoutMessage(\"Timeout custom message\")\n.timeoutMaxRequests(6)\n.timeout(Duration.ofSeconds(12))\n.build();\n</code></pre> <p>Parameters of <code>drillDownAndWaitUntil</code>:</p> <ul> <li> <p>(Required) Path to the screen:     <code>\"/screen/myexample/view/myexampleresultform/\" +      CxboxMyExampleController.myexample + \"/\" + myEntity.getId()</code> \u2014 This is path to the screen where will navigate.</p> </li> <li> <p>(Required) Business component to check for the condition:     <code>CxboxMyExampleController.myexample</code> \u2014  This is a business component where the field to be compared with the expected value will be checked.   This business component must be (may be hidden)in the  on the screen to which the transition is made.</p> </li> <li> <p>(Required) Field to check for the condition:   <code>MyExampleDTO_.statusResponse</code> \u2014 This is the field that will be checked for the condition. It can be of type boolean, string, Dictionary, Enum, LOV.   Field that will be compared to the expected value.This field must be (may be hidden) in the  on the screen.</p> </li> <li> <p>(Required) Expected value:     <code>StatusEnum.DONE</code> \u2014 This is the value the frontend will wait for in the <code>statusResponse</code> field.      When the field matches this value, the waiting dialog will be closed.This field must be (may be hidden) in the  on the screen to which the transition is made.</p> </li> </ul> <p>Additional Configuration:</p> <ul> <li>(Optional) Maximum number of requests:     <code>timeoutMaxRequests(6)</code> \u2014 This is the maximum number of requests the frontend will make to the backend to check the condition. If the condition is not met after 6 requests, a timeout will be triggered.    By default, <code>timeoutMaxRequests</code> is set to 3.</li> <li>(Optional) Timeout:     <code>timeout(Duration.ofSeconds(12))</code> \u2014 The total time during which the frontend will wait for the condition to be met. In this case, it is 12 seconds. The time between requests is calculated as <code>total time / number of requests</code>. Here, the interval between requests will be <code>12 seconds / 6 requests = 2 seconds</code>.    By default, <code>timeout</code> is set to 5 seconds.</li> <li>(Optional) In-progress message:     <code>inProgressMessage(\"In Progress custom message\")</code> \u2014 This is a custom message that will be displayed on the frontend while waiting for the condition to be met.      By default, a standard message is displayed: Operation in progress.</li> <li>(Optional) Success message:     <code>successMessage(\"Success custom message\")</code> \u2014 This is a custom message that will be displayed when the condition is met (i.e., when <code>statusResponse</code> equals <code>StatusEnum.DONE</code>).      By default, the standard message is not displayed.</li> <li>(Optional) Timeout message:      <code>timeoutMessage(\"Timeout custom message\")</code> \u2014 This is a custom message that will be displayed if the condition is not met before the timeout expires (i.e., after 6 requests within 12 seconds).      By default, the standard message is not displayed. </li> </ul> <p>How it works:</p> <ul> <li>The frontend navigates to the specified screen (<code>/screen/myexample/view/myexampleresultform/...</code>). The <code>In Progress custom message</code> is displayed.</li> <li>It starts checking the <code>statusResponse</code> field in <code>MyExampleDTO_</code> for the value <code>StatusEnum.DONE</code>.</li> <li>The frontend makes up to 6 requests at intervals of 2 seconds (12 seconds total).</li> <li>If the condition is met:   The <code>Success custom message</code> is displayed, and the process ends.</li> <li>If the condition is not met after 6 requests:   The frontend navigates to the specified screen (<code>/screen/myexample/view/myexampleresultform/...</code>).   The <code>Timeout custom message</code> is displayed, and the process ends due to a timeout.</li> </ul>"},{"location":"features/element/actions/postaction/drilldownandwaituntil/ddandwaituntil/#how-to-add_1","title":"How to add?","text":"Example <p>Step1 Add PostAction.drillDownAndWaitUntil to corresponding VersionAwareResponseService. </p> <p><pre><code>       @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.action(act -&gt; act\n.action(\"createAndSearch\", \"Create and search\")\n.scope(ActionScope.BC)\n.invoker((bc, dto) -&gt; {\nMyEntity myEntity = new MyEntity();\nmyEntity.setStatusResponse(StatusEnum.IN_PROGRESS);\nrepository.save(myEntity);\nfindInExternalSystemAsync(myEntity,dto);\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDownAndWaitUntil(\n\"/screen/myexample/view/myexampleresultform/\" +\nCxboxMyExampleController.myexample + \"/\" + myEntity.getId(),\nCxboxMyExampleController.myexample,\nMyExampleDTO_.statusResponse,\nStatusEnum.DONE\n)\n.timeoutMaxRequests(6).timeout(Duration.ofSeconds(12)).build());\n})\n)\n.action(act -&gt; act\n.scope(ActionScope.RECORD)\n.action(\"gotofind\", \"Go to Find\")\n.invoker((bc, dto) -&gt; {\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform\"\n));\n})\n)\n.build();\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"features/element/applicationparams/applicationparams/","title":"Application params","text":"<p>Work in progress</p>"},{"location":"features/element/applicationparams/applicationparams/#cxbox","title":"cxbox","text":""},{"location":"features/element/applicationparams/applicationparams/#widget","title":"widget","text":""},{"location":"features/element/applicationparams/applicationparams/#fields","title":"fields","text":""},{"location":"features/element/applicationparams/applicationparams/#filter-by-range-enabled-default","title":"filter-by-range-enabled-default","text":"<p>This parameter allows you to choose the filtering display mode for the following data types:</p> <ul> <li>Number</li> <li>Money</li> <li>Percent</li> <li>Date</li> <li>DateTime</li> <li>DateTimeWithSeconds</li> </ul> <p>Available filtering options:</p> <ol> <li>Range \u2013 Filter by minimum and maximum values (e.g., from/to a date, amount, or number).</li> <li>Specific value \u2013 Filter by a single selected value (e.g., an exact date, amount, or number).</li> </ol> <p>The choice depends on whether you need to search within a range or match an exact value.</p> <p>By default, filtration is carried out by range. If you want to turn it off, indicate <code>cxbox.widget.fields.filter-by-range-enabled-default: false</code> in meta.</p>"},{"location":"features/element/authorization/basic/basicauthorization/","title":"Basic Authorization","text":""},{"location":"features/element/authorization/basic/basicauthorization/#how-does-it-look","title":"How does it look?","text":""},{"location":"features/element/authorization/basic/basicauthorization/#how-to-add","title":"How to add?","text":"<p>To deploy an application to an basic authorization you need:</p>"},{"location":"features/element/authorization/basic/basicauthorization/#frontend-configuration","title":"Frontend configuration","text":"<ul> <li> <p>Build frontend with script from <code>ui/package.json</code> (instead of <code>build</code> script, that builds with keycloak sso enabled)     <pre><code>build-noKeycloak\n</code></pre></p> </li> <li> <p>start frontend with script from <code>ui/package.json</code> (instead of <code>start</code> script, that builds with keycloak sso enabled)     <pre><code>start-noKeycloak\n</code></pre></p> </li> <li> <p>start environment</p> </li> </ul>"},{"location":"features/element/authorization/basic/basicauthorization/#backend-configuration","title":"Backend configuration","text":"<ul> <li> <p>Add user that will be available for basic auth in</p> <p><code>src/main/resources/db/data/CXBOX-USERS.csv</code></p> </li> <li> <p>Add other roles in  </p> <p><code>src/main/resources/db/data/CXBOX-USER_ROLE.csv</code></p> </li> <li> <p>Add parameter in application.yml</p> </li> </ul> <pre><code> app:\n    auth-basic:\n      enabled: true\n</code></pre>"},{"location":"features/element/authorization/basic/basicauthorization/#login-process","title":"Login process","text":"<p>Type login/password (vanilla/vanilla is available by default)</p>"},{"location":"features/element/authorization/keycloak/keycloakauthorization/","title":"Keycloak Authorization","text":"<p>It is default authorization. see more keycloak</p>"},{"location":"features/element/autosave/autosave/","title":"Autosave","text":"<p>Work in progress</p>"},{"location":"features/element/database/oracle/oraclebd/","title":"Oracle support","text":""},{"location":"features/element/database/oracle/oraclebd/#how-does-it-look","title":"How does it look?","text":""},{"location":"features/element/database/oracle/oraclebd/#how-to-add","title":"How to add?","text":"<p>To deploy an application to an oracle database you need:</p> <ul> <li> <p>replace <code>&lt;artifactId&gt;postgresql&lt;/artifactId&gt;</code> with oracle dependency in POM.xml     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt;\n&lt;artifactId&gt;ojdbc10&lt;/artifactId&gt;\n&lt;version&gt;19.21.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> </li> <li> <p>start environment     <pre><code>docker-compose -f docker-compose-oracle.yml up -d\n</code></pre></p> </li> <li> <p>run application     <pre><code>start run configuration in Application_oracle\n</code></pre></p> </li> <li> <p>(Optionally) alternatively run application in a way you like with following environment variables:     <pre><code>DATABASE_DRIVER=oracle.jdbc.driver.OracleDriver;\nDATABASE_URL=jdbc:oracle:thin:@localhost:1523/XEPDB1;\nDATABASE_USER=app\nDATABASE_PASSWORD=app;\n</code></pre></p> </li> </ul>"},{"location":"features/element/database/postgres/postgresbd/","title":"Postgres support","text":"<p>It is default database</p>"},{"location":"features/element/database/postgres/postgresbd/#how-to-add","title":"How to add?","text":"<p>To deploy an application to a postgres database you need:</p> <ul> <li>install dependencies and build back-end and front-end     <pre><code>mvn clean install -PUI\n</code></pre></li> <li>start environment     <pre><code>docker-compose up -d    \n</code></pre></li> <li>run application     <pre><code>press green button in Application.java\n</code></pre></li> </ul>"},{"location":"features/element/drilldown/drilldown/","title":"DrillDown","text":"<p><code>DrillDown link</code> is an element that lets the user navigate to another view by tapping it.</p> <p>DrillDown functionality is used when we need to navigate from one place to another.</p> <p>The following transition formats are possible:</p> <ul> <li>To screen to a screen without focusing on specific data</li> <li>To view without id to a view without focusing on specific data</li> <li>To view by bc record id.The most popular option.Transition to viewing by transmitting the ID record.</li> <li>To view with fields filtration Apply a filter using additional fields (visually visible).</li> </ul>"},{"location":"features/element/drilldown/drilldown/#transition-formats","title":"Transition formats","text":""},{"location":"features/element/drilldown/drilldown/#to-screen","title":"To screen","text":"<p> Live Sample  GitHub</p> <p>Simple transition to a view without focusing on specific data.</p> <p>The link is formulated as follows:  <code>/screen/nameScreen</code></p> <p>Example request: <code>/screen/myexample3618</code></p>"},{"location":"features/element/drilldown/drilldown/#how-does-it-look","title":"How does it look?","text":""},{"location":"features/element/drilldown/drilldown/#how-to-add","title":"How to add?","text":"Example <p>The availability of this function depends on the type. See more field types</p> <p><code>Step1</code>  Add fields.setDrilldown to corresponding FieldMetaBuilder.</p> <p><code>field</code> - field with drilldown</p> <p><code>drillDownType</code> - DrillDown Types</p> <p><code>drillDown</code> - link</p> <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\nfields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\n\"/screen/myexample\"\n);\n}\n</code></pre> <p><code>Step2</code>  Add drillDown to corresponding .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p>"},{"location":"features/element/drilldown/drilldown/#to-view","title":"To view","text":""},{"location":"features/element/drilldown/drilldown/#to-view-without-id","title":"To view without id","text":"<p> Live Sample  GitHub</p> <p>Simple transition to a view without focusing on specific data.</p> <p>The link is formulated as follows:  <code>/screen/nameScreen/view/nameView</code></p> <p>Example request: <code>/screen/myexample3611/view/myexample3611list</code></p>"},{"location":"features/element/drilldown/drilldown/#how-does-it-look_1","title":"How does it look?","text":""},{"location":"features/element/drilldown/drilldown/#how-to-add_1","title":"How to add?","text":"Example <p>The availability of this function depends on the type. See more field types</p> <p><code>Step1</code>  Add fields.setDrilldown to corresponding FieldMetaBuilder.</p> <p><code>field</code> - field with drilldown</p> <p><code>drillDownType</code> - DrillDown Types</p> <p><code>drillDown</code> - link</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldDrillDowm);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customFieldDrillDowm);\nfields.setDrilldown(\nMyExampleDTO_.customFieldDrillDowm,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexamplelist\"\n);\n}\n</code></pre> <p><code>Step2</code>  Add drillDown to corresponding .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Info\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field DrillDowm\",\n\"key\": \"customFieldDrillDowm\",\n\"type\": \"input\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldDrillDowm\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p>"},{"location":"features/element/drilldown/drilldown/#to-view-by-bc-record-id","title":"To view by bc record id","text":"<p> Live Sample  GitHub</p> <p>The most popular option.Transition to viewing by transmitting the ID record. Retrieve data on this entity and all its dependent entities without filtering.</p> <p>The link is formulated as follows: <code>/screen/nameScreen/view/nameView/bc/id</code></p> <p>Example request: <code>screen/myexample3610/view/myexample3610form/myexample3610/1100178</code></p>"},{"location":"features/element/drilldown/drilldown/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"features/element/drilldown/drilldown/#how-to-add_2","title":"How to add?","text":"Example <p><code>Step1</code>  Add fields.setDrilldown to corresponding FieldMetaBuilder.</p> <p><code>field</code> - field with drilldown</p> <p><code>drillDownType</code> - DrillDown Types</p> <p><code>drillDown</code> - link</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldDrillDown);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customFieldDrillDown);\nfields.setDrilldown(\nMyExampleDTO_.customFieldDrillDown,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\" + CxboxMyExampleController.myexample + \"/\" + id\n);\n}\n</code></pre> <p><code>Step2</code>  Add drillDown to corresponding .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Info\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p>"},{"location":"features/element/drilldown/drilldown/#to-view-with-fields-filtration","title":"To view with fields filtration","text":""},{"location":"features/element/drilldown/drilldown/#by-fields-visually-visible","title":"By fields (visually visible)","text":"<p>see more about filtration</p> <p> Live Sample  GitHub</p> <p>The link is formulated as follows: <code>/screen/nameScreen/view/nameView/bc?+SearchSpec</code></p> <p>Example request: <code>screen/myexample3610/view/myexample3610form/myexample3610/11001782?_page=1&amp;_limit=5&amp;customFieldFilterDictionary.equalsOneOf=%5B%22Low%22%2C%22Middle%22%5D</code></p>"},{"location":"features/element/drilldown/drilldown/#how-does-it-look_3","title":"How does it look?","text":""},{"location":"features/element/drilldown/drilldown/#how-to-add_3","title":"How to add?","text":"Example <p>Tips</p> <p>To write this drilldown, follow these steps:</p> <pre><code>* Add a filter function for fields that require filtering.\n* Visually fill in the necessary filters in the interface.\n* Open the developer panel.\n* Locate the required request.\n* Use this query to substitute in your code to get a reference\n</code></pre> <p>The link consists of two parts: <pre><code>        fields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\nurlBC + urlFilter\n);\n</code></pre></p> <p><code>Step 1</code>  Create a link to the required widget.  The link is formulated as follows:  <code>/screen/nameScreen/view/nameView/nameBC</code> </p> <p><pre><code>        String urlBC = \"/screen/myexample/view/myexamplelist\" + \"/\" + CxboxMyExampleController.myexample;\n</code></pre> <code>Step 2</code>  Create a link with filter.</p> <p><pre><code>        String urlFilterForField = URLEncoder.encode(\"customFieldFilterDictionary.equalsOneOf=%5B%22Low%22%2C%22Middle%22%5D\");\nString urlFilter = \"?filters={\\\"\"\n+ CxboxMyExampleController.myexample\n+ \"\\\":\\\"\"\n+ urlFilterForField\n+ \"\\\"}\";\n</code></pre> <code>Step 3</code>  Create a link for drilldown.</p> <pre><code>        fields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\nurlBC + urlFilter\n);\n</code></pre>"},{"location":"features/element/drilldown/drilldown/#by-fulltextsearch","title":"By fulltextsearch","text":"<p>see more about FullTextSearch</p> <p> Live Sample  GitHub</p> <p>When the user enters a search query in the full-text search input area, the widget filters and displays strings that match the search criteria.</p> <p>The link is formulated as follows: <code>/screen/nameScreen/view/nameView/bc+SearchSpec</code></p> <p>Example request: <code>screen/myexample3610/view/myexample3610form/myexample3610/1100178?_page=1&amp;_limit=5&amp;_fullTextSearch=Moscow%2C+Dmitrov</code></p>"},{"location":"features/element/drilldown/drilldown/#how-does-it-look_4","title":"How does it look?","text":""},{"location":"features/element/drilldown/drilldown/#how-to-add_4","title":"How to add?","text":"Example <p>Tips</p> <p>To write this drilldown, follow these steps:</p> <ul> <li>Add a filter function for fields that require filtering.</li> <li>Visually fill in the necessary filters in the interface.</li> <li>Open the developer panel.</li> <li>Locate the required request.</li> <li>Use this query to substitute in your code to get a reference  </li> </ul> <p>The link consists of two parts: <pre><code>        fields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\nurlBC + urlFilter\n);\n</code></pre></p> <p><code>Step 1</code>  Create a link to the required widget.  The link is formulated as follows:  <code>/screen/nameScreen/view/nameView/nameBC</code> </p> <p><pre><code>        String urlBC = \"/screen/myexample/view/myexamplelist\" + \"/\" + CxboxMyExampleController.myexample;\n</code></pre> <code>Step 2</code>  Create a link with filter.</p> <p><pre><code>        String urlFilterForField = URLEncoder.encode(\"fullTextSearch=Moscow%2C+Dmitrov\");\nString urlFilter = \"?filters={\\\"\"\n+ CxboxMyExampleController.myexample\n+ \"\\\":\\\"\"\n+ \"_\"\n+ urlFilterForField\n+ \"\\\"}\";\n</code></pre> <code>Step 3</code>  Create a link for drilldown.</p> <pre><code>        fields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\nurlBC + urlFilter\n);\n</code></pre>"},{"location":"features/element/drilldown/drilldown/#by-filter-group","title":"By filter group","text":"<pre><code>_not applicable_\n</code></pre>"},{"location":"features/element/drilldown/drilldown/#the-operation-mechanism-of-drilldown","title":"The operation mechanism of drilldown","text":"<p>The operation mechanism of drilldown works as follows:</p> <ul> <li>REST.Backend. A link is generated within this property and sent to the frontend as metadata  <code>../api/v1/row-meta/..</code></li> </ul> <p></p> <ul> <li>REST.Frontend. The front end then generates a GET \\data request with parameters based on specific rules. See more Transition formats</li> </ul> <p></p>"},{"location":"features/element/drilldown/drilldowntype/","title":"DrillDown Types","text":"<p> Live Sample  GitHub</p> <p>There are several types of drilldown:</p> <ul> <li> <p>INNER  Transition inside the application.</p> </li> <li> <p>EXTERNAL  Transition by an absolute link to an external source.Current tab</p> </li> <li> <p>EXTERNAL_NEW  Transition by an absolute link to an external source.New tab</p> </li> <li> <p>RELATIVE Transition by a relative link while keeping the protocol, host, port.Current tab</p> </li> <li> <p>RELATIVE_NEW Transition by a relative link while keeping the protocol, host, port.New tab</p> </li> </ul>"},{"location":"features/element/drilldown/drilldowntype/#inner","title":"INNER","text":"<p>DrillDownType.INNER - Transition inside the application.</p>"},{"location":"features/element/drilldown/drilldowntype/#how-does-it-look","title":"How does it look?","text":""},{"location":"features/element/drilldown/drilldowntype/#how-to-add","title":"How to add?","text":"Example <p>The availability of this function depends on the type. See more field types</p> <p><code>Step 1</code> Add  fields.setDrilldown with type DrillDownType.INNER to corresponding FieldMetaBuilder. <pre><code>        fields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\" + CxboxMyExampleController.myexample + \"/\" + id\n);\n</code></pre></p>"},{"location":"features/element/drilldown/drilldowntype/#external","title":"EXTERNAL","text":"<p>DrillDownType.EXTERNAL - Transition by an absolute link to an external source. When you click the link, it will open in the same tab.</p>"},{"location":"features/element/drilldown/drilldowntype/#how-does-it-look_1","title":"How does it look?","text":""},{"location":"features/element/drilldown/drilldowntype/#how-to-add_1","title":"How to add?","text":"Example <p>The availability of this function depends on the type. See more field types</p> <p><code>Step 1</code> Add  fields.setDrilldown with type DrillDownType.EXTERNAL to corresponding FieldMetaBuilder. <pre><code>        fields.setDrilldown(\nMyExampleDTO_.customFieldExternal,\nDrillDownType.EXTERNAL,\n\"https://cxbox.org/\"\n);\n</code></pre></p>"},{"location":"features/element/drilldown/drilldowntype/#external_new","title":"EXTERNAL_NEW","text":"<p>DrillDownType.EXTERNAL_NEW - Transition by an absolute link to an external source. When you click the link, it will open in a new tab.</p>"},{"location":"features/element/drilldown/drilldowntype/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"features/element/drilldown/drilldowntype/#how-to-add_2","title":"How to add?","text":"Example <p>The availability of this function depends on the type. See more field types</p> <p><code>Step 1</code> Add  fields.setDrilldown with type DrillDownType.EXTERNAL_NEW to corresponding FieldMetaBuilder. <pre><code>        fields.setDrilldown(\nMyExampleDTO_.customFieldExternalNew,\nDrillDownType.EXTERNAL_NEW,\n\"https://cxbox.org/\"\n);\n</code></pre></p>"},{"location":"features/element/drilldown/drilldowntype/#relative","title":"RELATIVE","text":"<p>DrillDownType.RELATIVE - Transition by a relative link while keeping the protocol, host, port.</p>"},{"location":"features/element/drilldown/drilldowntype/#how-does-it-look_3","title":"How does it look?","text":""},{"location":"features/element/drilldown/drilldowntype/#how-to-add_3","title":"How to add?","text":"Example <p>The availability of this function depends on the type. See more field types</p> <p><code>Step 1</code> Add  fields.setDrilldown with type DrillDownType.RELATIVE to corresponding FieldMetaBuilder. <pre><code>        fields.setDrilldown(\nMyExampleDTO_.customFieldRelative,\nDrillDownType.RELATIVE,\n\"/screen/myexample/view/myexampleform/\" + CxboxMyExampleController.myexample + \"/\" + id\n);\n</code></pre></p>"},{"location":"features/element/drilldown/drilldowntype/#relative_new","title":"RELATIVE_NEW","text":"<p>DrillDownType.RELATIVE_NEW - Transition by a relative link while keeping the protocol, host, port. New tab</p>"},{"location":"features/element/drilldown/drilldowntype/#how-does-it-look_4","title":"How does it look?","text":""},{"location":"features/element/drilldown/drilldowntype/#how-to-add_4","title":"How to add?","text":"Example <p>The availability of this function depends on the type. See more field types</p> <p><code>Step 1</code> Add  fields.setDrilldown with type DrillDownType.RELATIVE_NEW to corresponding FieldMetaBuilder. <pre><code>        fields.setDrilldown(\nMyExampleDTO_.customFieldRelativeNew,\nDrillDownType.RELATIVE_NEW,\n\"/screen/myexample/view/myexampleform/\" + CxboxMyExampleController.myexample + \"/\" + id\n);\n</code></pre></p>"},{"location":"features/element/filestorage/fileStorage/","title":"FileStorage","text":"<p>Add FileStorage: </p> <ul> <li>minio</li> </ul>"},{"location":"features/element/filestorage/minio/","title":"Minio","text":"<p>Step1 Add config file. <pre><code>@Configuration\npublic class PlatformFileMinioConfig {\n@Bean\npublic MinioClient minioClient(\n@Value(\"${minio.access.name}\") String accessKey,\n@Value(\"${minio.access.secret}\") String accessSecret,\n@Value(\"${minio.url}\") String minioUrl) {\nreturn MinioClient.builder()\n.endpoint(minioUrl)\n.credentials(accessKey, accessSecret)\n.build();\n}    }\n</code></pre></p> <p>Step2 Add Controller  for file storage. <pre><code>public class PlatformMinioFileController {\npublic static final String FILENAME_FIELD = \"filename\";\npublic static final int FIVE_MIB = 5242880;\nprivate final MinioClient minioClient;\nprivate final String defaultBucketName;\npublic PlatformDemoMinioFileController(\nMinioClient minioClient,\n@Value(\"${minio.bucket.name}\") String defaultBucketName\n) {\nthis.minioClient = minioClient;\nthis.defaultBucketName = defaultBucketName;\n}\n@SneakyThrows\n@PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\npublic PlatformResponseDTO&lt;FileUploadDto&gt; upload(MultipartFile file, String source) {\nString contentType = file.getContentType();\nString name = file.getOriginalFilename();\nObjectWriteResponse objectWriteResponse = minioClient.putObject(PutObjectArgs\n.builder()\n.bucket(defaultBucketName)\n.object(UUID.randomUUID().toString())\n.contentType(contentType)\n.userMetadata(Collections.singletonMap(FILENAME_FIELD, name))\n.stream(file.getInputStream(), -1, FIVE_MIB)\n.build()\n);\nString id = objectWriteResponse.object();\nreturn new PlatformResponseDTO&lt;FileUploadDto&gt;()\n.setData(new FileUploadDto(id, name, contentType));\n}\n@SneakyThrows\n@GetMapping\npublic ResponseEntity&lt;StreamingResponseBody&gt; download(String id, String source, boolean preview) {\nGetObjectResponse getObjectResponse = minioClient.getObject(GetObjectArgs\n.builder()\n.bucket(defaultBucketName)\n.object(id)\n.build()\n);\nStatObjectResponse statObjectResponse = minioClient.statObject(StatObjectArgs\n.builder()\n.bucket(defaultBucketName)\n.object(id)\n.build()\n);\nreturn ResponseEntity.ok()\n.header(HttpHeaders.CONTENT_DISPOSITION, \"attachment;filename=\\\"\" + statObjectResponse.userMetadata().get(FILENAME_FIELD) + \"\\\"\")\n.contentLength(statObjectResponse.size()) //\n.body(outputStream -&gt; IOUtils.copy(getObjectResponse, outputStream, FIVE_MIB));\n}\n@SneakyThrows\n@DeleteMapping\npublic PlatformResponseDTO&lt;Void&gt; remove(String id, String source) {\nminioClient.removeObject(RemoveObjectArgs\n.builder()\n.bucket(defaultBucketName)\n.object(id)\n.build()\n);\nreturn new PlatformResponseDTO&lt;&gt;();\n}\n}\n</code></pre> Step3 Disable platformFileController </p> <pre><code>public class DisableControllerBFPP implements BeanFactoryPostProcessor {\n@Override\npublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\nBeanDefinitionRegistry beanDefinitionRegistry = (BeanDefinitionRegistry) beanFactory;\nbeanDefinitionRegistry.removeBeanDefinition(\"platformFileController\");\n}\n}\n</code></pre>"},{"location":"features/element/localizaton/localization/","title":"Localization","text":"<p>Work in progress</p>"},{"location":"features/element/microservices/microservices/","title":"Microservices","text":"<p>Within our system, five main types of operations occur:</p> <ul> <li> <p>Getting data by ID: This operation involves retrieving specific data entries from the microservice based on their unique identifier (ID). This allows for the retrieval of individual records as needed.</p> </li> <li> <p>Getting all data: This operation involves retrieving all available data from the microservice.</p> </li> <li> <p>Deletion: Deleting existing records. This typically involves interacting with the microservice to remove specific records.</p> </li> <li> <p>Update of existing entries: This refers to making changes by sending data to the microservice for processing and storage.</p> </li> <li> <p>Creation: This involves creating new records by sending data to the microservice for processing and storage.</p> </li> </ul>"},{"location":"features/element/microservices/microservices/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p> <p>When creating entities for microservices, the process is largely similar to creating entities for database access, with a few notable exceptions.</p> <p>1) Instead of creating an entity, we establish a mapping entity through which data will be sent to the microservice.</p> <p>2) Instead of using FieldMetaBuilder, we utilize AnySourceFieldMetaBuilder._</p> <p>3) Instead of using VersionAwareResponseService, we utilize AnySourceVersionAwareResponseService.</p> <p>4) Create extends AbstractAnySourceBaseDAO  implements AnySourceBaseDAO service</p> Example <ul> <li>Step1.1 Create mapping entity through which data will be sent to the microservice      <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityOutServiceDTO implements Serializable {\nprivate String id;\nprivate String customField;\nprivate String customField;\n}\n</code></pre></li> <li> <p>Step1.2 Create DAO extends AbstractAnySourceBaseDAO implements AnySourceBaseDAO     Override methods:  </p> <ul> <li> <p>Getting data by ID:  method getByIdIgnoringFirstLevelCache</p> </li> <li> <p>Getting all data: method getList</p> </li> <li> <p>Deletion: method delete</p> </li> <li> <p>Update of existing entries:  method update</p> </li> <li> <p>Create : method  create</p> </li> </ul> <pre><code>@Service\n@RequiredArgsConstructor\npublic class MyEntityDao extends AbstractAnySourceBaseDAO&lt;MyEntityOutServiceDTO&gt; implements AnySourceBaseDAO&lt;MyEntityOutServiceDTO&gt; {\nprivate final IntegrationConfiguration integrationConfig;\nprivate final RestTemplate restTemplate;\n@Override\npublic String getId(final MyEntityOutServiceDTO entity) {\nreturn entity.getId();\n}\n@Override\npublic void setId(final String id, final MyEntityOutServiceDTO entity) {\nentity.setId(id);\n}\n@Override\npublic MyEntityOutServiceDTO getByIdIgnoringFirstLevelCache(final BusinessComponent bc) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl() + \"/{id}\").build()\n.expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nGET, null, MyEntityOutServiceDTO.class\n).getBody();\n}\n@Override\npublic Page&lt;MyEntityOutServiceDTO&gt; getList(final BusinessComponent bc, final QueryParameters queryParameters) {\n//Page size\nString page = bc.getParameters().getParameter(\"_page\");\n//Limit\nString limit = bc.getParameters().getParameter(\"_limit\");\n//Filter\nList&lt;String&gt; filterCustomField = getFilterFieldName(queryParameters, \"customField\", \"contains\");\nOptional&lt;String&gt; filter = filterCustomField.isEmpty() ? Optional.empty() : Optional.of(filterCustomField.get(0));\n//Sorting\nList&lt;String&gt; sortCustomField = getSortFieldName(queryParameters, \"customField\");\nOptional&lt;String&gt; sort = sortCustomField.isEmpty() ? Optional.empty() : Optional.of(sortCustomField.get(0));\nString urlTemplate = UriComponentsBuilder.fromHttpUrl(integrationConfig.getExistingMicroservicesDataServerUrl())\n.queryParam(\"number\", page)\n.queryParam(\"size\", limit)\n.queryParamIfPresent(\"filterCustomField\", filter)\n.queryParamIfPresent(\"sortCustomField\", sort)\n.encode()\n.toUriString();\nResponseEntity&lt;RestResponsePage&lt;MyEntityOutServiceDTO&gt;&gt; responseEntity = restTemplate.exchange(\nurlTemplate,\nHttpMethod.GET,\nnull,\nnew ParameterizedTypeReference&lt;&gt;() {\n},\nfilter\n);\nreturn responseEntity.getBody();\n}\nprivate List&lt;String&gt; getSortFieldName(QueryParameters queryParameters, String fieldName) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(\"_sort\"))\n.filter(f -&gt; f.getValue().contains(fieldName))\n.map(m -&gt; {\nString[] splitOperation = m.getKey().split(\"\\\\.\");\nreturn splitOperation[splitOperation.length - 1];\n}\n).toList();\n}\nprivate List&lt;String&gt; getFilterFieldName(QueryParameters queryParameters, String fieldName, String searchSpec) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(fieldName + \".\" + searchSpec))\n.map(Map.Entry::getValue)\n.toList();\n}\n@Override\npublic void delete(BusinessComponent bc) {\nrestTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl() + \"/{id}\").build().expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nDELETE, null, Void.class\n);\n}\n@Override\npublic MyEntityOutServiceDTO create(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nentity.setId(null);\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPOST, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n@Override\npublic MyEntityOutServiceDTO update(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPUT, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n}\n</code></pre> </li> <li> <p>Step1.3 Create DTO extends DataResponseDTO       Creating fields in DTO with the necessary properties, such as, for example,filtering is described in the article       field types </p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\npublic MyExampleDTO(MyEntityOutServiceDTO entity) {\nthis.id = entity.getId();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> </li> <li> <p>Step1.4 Create MetaBuilder extends AnySourceFieldMetaBuilder</p> <p>see more Meta builder</p> <pre><code>@SuppressWarnings(\"EmptyMethod\")\n@Service\npublic class MyExampleMeta extends AnySourceFieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bc,\nString id, String parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bcDescription,\nString parentId) {\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n}\n</code></pre> </li> <li> <p>Step1.5 Create Service extends AnySourceVersionAwareResponseService</p> <pre><code>@SuppressWarnings({\"java:S\", \"java:S\"})\n@RequiredArgsConstructor\n@Service\npublic class MyExampleService extends AnySourceVersionAwareResponseService&lt;MyExampleDTO, MyEntityOutServiceDTO&gt; {\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleMeta&gt; meta = MyExampleMeta.class;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyEntityDao&gt; dao = MyEntityDao.class;\n@Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntityOutServiceDTO entity, BusinessComponent bc) {\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntityOutServiceDTO entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.addGroup(\n\"actions\",\n\"Actions\",\n0,\nActions.&lt;MyExampleDTO&gt;builder()\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.build()).\nbuild();\n}\n}\n</code></pre> </li> <li> <p>Step1.6 Create PlatformController implements EnumBcIdentifier</p> <pre><code>@Getter\npublic enum PlatformMyExampleController implements EnumBcIdentifier {\nmyExampleBc(MyExampleService.class);\npublic static final EnumBcIdentifier.Holder&lt;PlatformMyExampleController&gt; Holder = new Holder&lt;&gt;(\nPlatformMyExampleController.class);\nprivate final BcDescription bcDescription;\nPlatformMyExampleController(String parentName, Class&lt;?&gt; serviceClass, boolean refresh) {\nthis.bcDescription = buildDescription(parentName, serviceClass, refresh);\n}\nPlatformMyExampleController(Class&lt;?&gt; serviceClass) {\nthis((String) null, serviceClass, false);\n}\n@Component\npublic static class BcSupplier extends AbstractEnumBcSupplier&lt;PlatformMyExampleController&gt; {\npublic BcSupplier() {\nsuper(PlatformMyExampleController.Holder);\n}\n}\n}\n</code></pre> </li> </ul>"},{"location":"features/element/microservices/microservices/#methods","title":"Methods","text":""},{"location":"features/element/microservices/microservices/#getting-data-by-id-getbyidignoringfirstlevelcache","title":"Getting data by ID (getByIdIgnoringFirstLevelCache)","text":"<p>Tips</p> <p>In this example, we're addressing the scenario where the service obtaining data only by ID. If your service relies solely on natural keys for data retrieval, you may find the following article helpful.</p> Example <p>Step1 Method <code>getByIdIgnoringFirstLevelCache</code> takes a BusinessComponent as input.</p> <p>When calling the service, it's essential to provide the Id  record as a parameter for which data will be returned.</p> <pre><code>Long Id  = bc.getIdAsLong().\n</code></pre> <p>Example of fetching data using REST:</p> <pre><code>    @Override\npublic MyEntityOutServiceDTO getByIdIgnoringFirstLevelCache(final BusinessComponent bc) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl() + \"/{id}\").build()\n.expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nGET, null, MyEntityOutServiceDTO.class\n).getBody();\n}\n</code></pre>"},{"location":"features/element/microservices/microservices/#getting-data-all-getlist","title":"Getting data all (getList)","text":"<p>This method incorporates additional peculiaritys such as filtering, sorting, record limits, and page numbers.</p> <ul> <li> <p>Page size: This parameter  refers to the number of items or records displayed on a single page of a user interface or returned in a single response from an API. It's  used in pagination systems to control how much data is fetched or displayed at once.</p> </li> <li> <p>Limit: This parameter sets a maximum limit on the number of items or records that can be returned or processed by the service. It's a way to prevent overloading the system with too much data at once.</p> </li> <li> <p>Filter: This parameter allows users to specify criteria for filtering the data they want to retrieve or process. Filters could be based on various attributes or properties of the data, allowing users to narrow down their results to only the items that meet specific conditions.</p> </li> <li> <p>Sorting: This parameter would involve specifying the order in which the results are presented. Might want to sort data based on certain attributes, such as alphabetical order, numerical order, date, etc. Sorting can typically be done in ascending or descending order.</p> </li> </ul> <p>Combining these parameters allows users to control and customize the behavior of the service according to their needs, enabling efficient data retrieval and processing.</p> Example <p>Method <code>getList</code> takes a BusinessComponent as input.</p> <p>Step1 Page size.</p> <pre><code>String page = bc.getParameters().getParameter(\"_page\");\n</code></pre> <p>Step2 Limit.</p> <pre><code>String limit = bc.getParameters().getParameter(\"_limit\");\n</code></pre> <p>Step3 Sorting. </p> <p>If the application lacks a sorting feature, it implies that the parameter associated with sorting would be absent.</p> <pre><code>queryParameters.getParameters().entrySet().stream().filter(f-&gt;f.getKey().contains(\"sort\")).toList();\n</code></pre> <p>In the map key, receive the sorting direction: 'desc' for descending or 'asc' for ascending</p> <p>For example, map key = <code>_sort.0.desc</code></p> <p>In the map value, obtain the name of the filtered field specified in to corresponding field \"key\" to corresponding file widget.json</p> <p>For example, map value = <code>customField</code> </p> <p>Step4 Filter.</p> <p>If the application lacks a filtration feature, it implies that the parameter associated with filtration would be absent.</p> <p>This example demonstrates how to select filtering conditions for a field with the String type. For comprehensive information on all fields available for filtering, please refer to the article</p> <pre><code>queryParameters.getParameters().entrySet().stream().filter(f-&gt;f.getKey().contains(\"contains\")).toList();\n</code></pre> <p>In the map key, receive the filtration type. Can observe the relationship between standard filtering and standard field types here .</p> <p>For example, map key = <code>customField.contains</code></p> <p>In the map value, obtain the filtering criteria for selecting specific data.</p> <p>For example, map value = <code>Test data</code></p> <pre><code>    @Override\npublic Page&lt;MyEntityOutServiceDTO&gt; getList(final BusinessComponent bc, final QueryParameters queryParameters) {\n//Page size\nString page = bc.getParameters().getParameter(\"_page\");\n//Limit\nString limit = bc.getParameters().getParameter(\"_limit\");\n//Filter\nList&lt;String&gt; filterCustomField = getFilterFieldName(queryParameters, \"customField\", \"contains\");\nOptional&lt;String&gt; filter = filterCustomField.isEmpty() ? Optional.empty() : Optional.of(filterCustomField.get(0));\n//Sorting\nList&lt;String&gt; sortCustomField = getSortFieldName(queryParameters, \"customField\");\nOptional&lt;String&gt; sort = sortCustomField.isEmpty() ? Optional.empty() : Optional.of(sortCustomField.get(0));\nString urlTemplate = UriComponentsBuilder.fromHttpUrl(integrationConfig.getExistingMicroservicesDataServerUrl())\n.queryParam(\"number\", page)\n.queryParam(\"size\", limit)\n.queryParamIfPresent(\"filterCustomField\", filter)\n.queryParamIfPresent(\"sortCustomField\", sort)\n.encode()\n.toUriString();\nResponseEntity&lt;RestResponsePage&lt;MyEntityOutServiceDTO&gt;&gt; responseEntity = restTemplate.exchange(\nurlTemplate,\nHttpMethod.GET,\nnull,\nnew ParameterizedTypeReference&lt;&gt;() {\n},\nfilter\n);\nreturn responseEntity.getBody();\n}\nprivate List&lt;String&gt; getSortFieldName(QueryParameters queryParameters, String fieldName) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(\"_sort\"))\n.filter(f -&gt; f.getValue().contains(fieldName))\n.map(m -&gt; {\nString[] splitOperation = m.getKey().split(\"\\\\.\");\nreturn splitOperation[splitOperation.length - 1];\n}\n).toList();\n}\nprivate List&lt;String&gt; getFilterFieldName(QueryParameters queryParameters, String fieldName, String searchSpec) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(fieldName + \".\" + searchSpec))\n.map(Map.Entry::getValue)\n.toList();\n}\n</code></pre>"},{"location":"features/element/microservices/microservices/#delete","title":"Delete","text":"<p>Tips</p> <p>In this example, we're addressing the scenario where the service obtaining data only by ID. If your service relies solely on natural keys for data retrieval, you may find the following article helpful.</p> Example <p>Step1 Method <code>delete</code> takes a BusinessComponent as input.</p> <p>When calling the service, it's essential to provide the Id record as a parameter for which data will be returned.</p> <pre><code>Long Id  = bc.getIdAsLong().\n</code></pre> <p>Example of fetching data using REST:</p> <pre><code>    public void delete(BusinessComponent bc) {\nrestTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl() + \"/{id}\").build().expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nDELETE, null, Void.class\n);\n}\n</code></pre>"},{"location":"features/element/microservices/microservices/#update","title":"Update","text":"<p>Tips</p> <p>In this example, we're addressing the scenario where the service obtaining data only by ID. If your service relies solely on natural keys for data retrieval, you may find the following article helpful.</p> Example <p>Step1 Method <code>update</code> takes a BusinessComponent as input.</p> <p>When calling the service, it's essential to provide theId  record as a parameter for which data will be returned.</p> <pre><code>Long Id  = bc.getIdAsLong().\n</code></pre> <p>Example of fetching data using REST:</p> <pre><code>    public MyEntityOutServiceDTO update(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPUT, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n</code></pre>"},{"location":"features/element/microservices/microservices/#create","title":"Create","text":"<p>Tips</p> <p>In this example, we're addressing the scenario where the service obtaining data only by ID. If your service relies solely on natural keys for data retrieval, you may find the following article helpful.</p> Example <p>Step1 Method <code>create</code> takes a BusinessComponent as input.</p> <p>When calling the service, it's essential to provide the Id record as a parameter for which data will be returned.</p> <pre><code>Long Id  = bc.getIdAsLong().\n</code></pre> <p>Example of fetching data using REST:</p> <pre><code>    public MyEntityOutServiceDTO create(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nentity.setId(null);\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPOST, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n</code></pre>"},{"location":"features/element/microservices/microservices_cache/","title":"Microservices cache","text":"<p>\u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c FirstLevelCache \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f update, create</p> <p>\u0416\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b   EntityFirstLevelCache \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f  \u041d\u0430\u0447\u0430\u043b\u043e HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u2502 \u25bc \u0421\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0439 EntityFirstLevelCache (\u043f\u0443\u0441\u0442\u043e\u0439) \u2502 \u25bc \u0412 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043c\u0435\u0442\u043e\u0434\u044b \u043c\u043e\u0433\u0443\u0442: - put(key, value)  \u2500\u2500\u25b6 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u043a\u0435\u0448 - get(key)         \u2500\u2500\u25b6 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043a\u0435\u0448\u0430   \u2502   \u25bc   \u041a\u043e\u043d\u0435\u0446 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430   \u2502   \u25bc   EntityFirstLevelCache \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0430\u0435\u0442\u0441\u044f \ud83d\uddd1\ufe0f   (\u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u0440\u044f\u044e\u0442\u0441\u044f) </p> <pre><code># \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u0438\u0434\u0436\u0435\u0442\u0430\u043c\u0438 List \u0438 Form \u0432 CXBOX\n## \u041e\u0431\u0449\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n### \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b:\n- **Frontend** - \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c\n- **Backend** - \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c  \n- **CXBOX Core** - \u044f\u0434\u0440\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n- **CustomDao** - DAO, \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0438\u0439 `AbstractAnySourceBaseDAO`\n### \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b:\n- **FirstLevelCache** - \u043a\u044d\u0448 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n- **RowMeta** - \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438\n- **Pagination** - \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n\n## \u0412\u0438\u0434\u0436\u0435\u0442 List (\u0421\u043f\u0438\u0441\u043e\u043a)\n### \u041e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 \u044d\u043a\u0440\u0430\u043d\u0430 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n**\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:** \u041e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 \u044d\u043a\u0440\u0430\u043d\u0430 \u0441\u043f\u0438\u0441\u043a\u0430\n\n**\u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438:**\n```mermaid\nsequenceDiagram\n    Frontend-&gt;&gt;Backend: GET /api/v1/count\n    Note over Backend: \u0422\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f pagination: nextAndPreviousWithCount\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta\n    Frontend-&gt;&gt;Backend: GET /api/v1/data/\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/id\n</code></pre> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u0414\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0431\u0435\u0440\u0435\u0442\u0441\u044f <code>id</code> \u043f\u0435\u0440\u0432\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438, \u0442\u0430\u043a \u043a\u0430\u043a \u043a\u0443\u0440\u0441\u043e\u0440 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u0435\u0440\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c - \u0414\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u0437\u0430\u043f\u0438\u0441\u044c\u044e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>rowMeta</code> - \u0415\u0441\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043d\u0435\u0442, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 \u0431\u0435\u0437 <code>id</code></p>"},{"location":"features/element/microservices/microservices_cache/#_1","title":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438","text":""},{"location":"features/element/microservices/microservices_cache/#create","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 (Create)","text":"<p>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: Create, Save</p> <p>\u041f\u0440\u043e\u0446\u0435\u0441\u0441: <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta-new\n    Frontend-&gt;&gt;Backend: PUT /api/v1/data/id</code></pre></p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: - <code>getId()</code> (\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c FirstLevelCache) - <code>getByIdIgnoringFirstLevelCache()</code> - <code>setId()</code> (\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c FirstLevelCache)</p> <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c CXBOX \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u0432\u044b\u0437\u043e\u0432\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u0441\u0438\u0441\u0442\u0435\u043c.</p>"},{"location":"features/element/microservices/microservices_cache/#delete","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 (Delete)","text":"<p>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: Delete</p> <p>\u041f\u0440\u043e\u0446\u0435\u0441\u0441: <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: DELETE /api/v1/data/id\n    Frontend-&gt;&gt;Backend: GET /api/v1/data/\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/id</code></pre></p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: - <code>delete()</code> - <code>getList()</code> - <code>getByIdIgnoringFirstLevelCache()</code></p>"},{"location":"features/element/microservices/microservices_cache/#_2","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438","text":""},{"location":"features/element/microservices/microservices_cache/#_3","title":"\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u0435 \u043c\u0435\u043d\u044e (\u2026)","text":"<p>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u041d\u0430\u0436\u0430\u0442\u0438\u0435 \"\u2026\"</p> <p>\u041f\u0440\u043e\u0446\u0435\u0441\u0441: - \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f <code>getByIdIgnoringFirstLevelCache()</code> - \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441: <code>GET /api/v1/row-meta/id</code></p>"},{"location":"features/element/microservices/microservices_cache/#_4","title":"\u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u044f \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: - \u041d\u0430\u0436\u0430\u0442\u0438\u0435 \"assoc\" - \"Force Active\" - \"Edit\" - \u041f\u043e\u0434\u043d\u044f\u0442\u0438\u0435 \"Form Popup\"</p> <p>\u041f\u0440\u043e\u0446\u0435\u0441\u0441: - \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f <code>getByIdIgnoringFirstLevelCache()</code> - \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441: <code>GET /api/v1/row-meta/id</code></p>"},{"location":"features/element/microservices/microservices_cache/#form","title":"\u0412\u0438\u0434\u0436\u0435\u0442 Form (\u0424\u043e\u0440\u043c\u0430)","text":""},{"location":"features/element/microservices/microservices_cache/#_5","title":"\u041e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 \u044d\u043a\u0440\u0430\u043d\u0430 \u0444\u043e\u0440\u043c\u044b","text":"<p>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u041e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 \u044d\u043a\u0440\u0430\u043d\u0430 \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 Form widget</p> <p>\u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438: <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta\n    Frontend-&gt;&gt;Backend: GET /api/v1/data/\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/id</code></pre></p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: - <code>getList()</code> (\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439) - <code>getByIdIgnoringFirstLevelCache()</code></p> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u0415\u0441\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043d\u0435\u0442, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 \u0431\u0435\u0437 <code>id</code></p>"},{"location":"features/element/microservices/microservices_cache/#api-endpoints","title":"API Endpoints","text":""},{"location":"features/element/microservices/microservices_cache/#endpoints","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 endpoints:","text":"\u041c\u0435\u0442\u043e\u0434 Endpoint \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 GET <code>/api/v1/count</code> \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 GET <code>/api/v1/row-meta</code> \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 GET <code>/api/v1/row-meta-new</code> \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 GET <code>/api/v1/row-meta/id</code> \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 GET <code>/api/v1/data/</code> \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 PUT <code>/api/v1/data/id</code> \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 DELETE <code>/api/v1/data/id</code> \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438"},{"location":"features/element/microservices/microservices_cache/#_6","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e","text":"<ol> <li>\u041a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 FirstLevelCache \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432: \u0412\u0441\u0435\u0433\u0434\u0430 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0435\u0439</li> <li>\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435: RowMeta \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438</li> <li>\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0440\u0435\u0436\u0438\u043c\u044b \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 ```</li> </ol> <p>\u042d\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0441: - \u0427\u0435\u0442\u043a\u043e\u0439 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0435\u0439 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 - \u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u0434\u043b\u044f \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438 - \u0422\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 \u0434\u043b\u044f API endpoints - \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0431\u043b\u043e\u043a\u0430\u043c\u0438 \u043a\u043e\u0434\u0430 \u0438 \u043f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0439 - \u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0433\u043e\u0442\u043e\u0432\u0430 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 MkDocs \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u0435\u0433\u043a\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c\u0438.</p>"},{"location":"features/element/microservices/microservices_users_action/","title":"Work with DAO","text":"<p>GET</p> <p>count (Only for pagination: default, nextAndPreviousWithCount)</p> Operation <code>/row-meta</code> <code>/row-meta-new</code> <code>/row-meta/id</code> <code>/data/</code> <code>/count</code> Open Screen \u2705no records \u274c \u2705 \u2705 \u2705 Create \u274c \u2705 \u274c \u274c \u274c Save \u274c \u274c \u2705 \u274c \u274c Delete \u2705no records \u274c \u2705 \u2705 \u274c Click .. \u2705 \u274c \u274c \u274c \u274c Open Assoc,Popup \u2705 \u274c \u274c \u2705 \u2705 Open Form Popup \u274c \u274c \u274c \u274c \u274c Force Active \u274c \u274c \u274c \u274c \u274c <p>Other</p> Operation POST <code>/row-meta/id</code> PUT <code>/data/id</code> DELETE <code>/data/id</code> Open Screen \u274c \u274c \u274c Create \u274c \u274c \u274c Save \u274c \u2705 \u274c Delete \u274c \u274c \u2705 Click .. \u274c \u274c \u274c Open Assoc,Popup \u274c \u274c \u274c Open Form Popup \u2705 \u274c \u274c Force Active \u2705 \u274c \u274c"},{"location":"features/element/microservices/microservices_users_action/#opening-screen","title":"Opening Screen","text":"<p> Live Sample \u00b7</p> <p><code>/row-meta/id</code></p> <p>For the list, the <code>id</code> of the first record is taken because the cursor is set on the first record in the backend, and operations are available for it, which require rowMeta.</p> <p><code>/row-meta/</code></p> <p>If there are no records, the method is called without an ID.</p> <p><code>/count/</code></p> <p>Only invoked when Pagination modes are: nextAndPreviousWithCount or Default</p> <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: GET /api/v1/data/ \n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta (only if no records)\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/id\n    Frontend-&gt;&gt;Backend: GET /api/v1/count (Only for pagination: default, nextAndPreviousWithCount)</code></pre>"},{"location":"features/element/microservices/microservices_users_action/#api-dao","title":"API -&gt; DAO","text":""},{"location":"features/element/microservices/microservices_users_action/#crud-operations","title":"CRUD Operations","text":""},{"location":"features/element/microservices/microservices_users_action/#create","title":"Create","text":"<p>User actions: Create</p> <p>Process: <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta-new </code></pre></p> <p>Used methods:</p> <ul> <li><code>getId()</code> (using FirstLevelCache)</li> <li><code>setId()</code> (using FirstLevelCache)</li> </ul> <p>Recommendation: Use standard CXBOX mechanism for record storage and calling external systems.</p>"},{"location":"features/element/microservices/microservices_users_action/#api-dao_1","title":"API -&gt; DAO","text":""},{"location":"features/element/microservices/microservices_users_action/#save","title":"Save","text":"<p>User actions: Save </p> <p>Process: <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: PUT /api/v1/data/id\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/id</code></pre></p> <p>Used methods:</p> <p>Frontend-&gt;&gt;Backend: PUT /api/v1/data/id</p> <ul> <li><code>getId()</code> (using FirstLevelCache)</li> <li><code>setId()</code> (using FirstLevelCache)</li> <li><code>getId()</code> (using FirstLevelCache)</li> <li><code>create()</code> </li> <li><code>update()</code> </li> </ul> <p>Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/id</p> <ul> <li><code>getByIdIgnoringFirstLevelCache()</code></li> </ul>"},{"location":"features/element/microservices/microservices_users_action/#api-dao_2","title":"API -&gt; DAO","text":"save after createsave"},{"location":"features/element/microservices/microservices_users_action/#delete","title":"Delete","text":"<p>User actions: Delete</p> <p>Process: <pre><code>sequenceDiagram\n    Frontend-&gt;&gt;Backend: DELETE /api/v1/data/id\n    Frontend-&gt;&gt;Backend: GET /api/v1/data/\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta (only if no records)\n    Frontend-&gt;&gt;Backend: GET /api/v1/row-meta/id</code></pre></p> <p>Used methods:</p> <p>Frontend-&gt;&gt;Backend: DELETE /api/v1/data/id</p> <ul> <li><code>delete()</code></li> <li><code>getList()</code></li> <li><code>getByIdIgnoringFirstLevelCache()</code></li> </ul>"},{"location":"features/element/microservices/microservices_users_action/#api-dao_3","title":"API -&gt; DAO","text":""},{"location":"features/element/microservices/createmicroservices/createmicroservices/","title":"Create microservices with data","text":"<p>Work in progress</p>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/","title":"Connecting an existing microservices","text":"<p>In this example, we're considering the scenario where we need to integrate with an existing microservice responsible for data operations.</p>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#architecture-existing-microservice","title":"Architecture existing microservice","text":"<p>Let's outline the inputs our microservice accepts:</p> <p> GitHub</p> <p></p> <p>Parameters get <code>/myentity3900</code>: </p> <p>swagger</p> <p>The interface that will emerge will resemble the following:</p> <p> Live Sample </p> <p></p>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#steps-for-developing-on-cxbox","title":"Steps for developing on cxbox","text":"<p>Developing a straightforward interaction with the existing microservice architecture.</p>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#step1-create-dto-for-integrating-with-microservice","title":"Step1 Create DTO for integrating with microservice","text":"<p>Create DTO for integrating with microservices through which data will be sent to the microservice</p> Example <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityOutServiceDTO implements Serializable {\nprivate String id;\nprivate String customField;\nprivate String customField;\n}\n</code></pre>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#step-2-create-dao","title":"Step 2 Create DAO","text":"<p>Create DAO extends AbstractAnySourceBaseDAO implements AnySourceBaseDAO</p> <p>Override methods:</p> <ul> <li>Create : method create</li> </ul> Example <pre><code>        public MyEntityOutServiceDTO create(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nentity.setId(null);\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPOST, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n</code></pre> <ul> <li>Deletion: method delete</li> </ul> Example <pre><code>    public void delete(BusinessComponent bc) {\nrestTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl() + \"/{id}\").build().expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nDELETE, null, Void.class\n);\n}\n</code></pre> <ul> <li>Update of existing entries:  method update</li> </ul> Example <pre><code>    public MyEntityOutServiceDTO update(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPUT, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n</code></pre> <ul> <li> <p>Getting all data: method getList</p> <p>Page size:  </p> <pre><code>String page = bc.getParameters().getParameter(\"_page\");\n</code></pre> <p>Limit:  <pre><code>String limit = bc.getParameters().getParameter(\"_limit\");\n</code></pre></p> <p>Sorting for field CustomField: <pre><code>    List&lt;String&gt; sortCustomField = getSortFieldName(queryParameters, \"customField\");\nOptional&lt;String&gt; sort = sortCustomField.isEmpty() ? Optional.empty() : Optional.of(sortCustomField.get(0));\n</code></pre></p> <p>Filter for field CustomField: <pre><code> List&lt;String&gt; filterCustomField = getFilterFieldName(queryParameters, \"customField\", \"contains\");\nOptional&lt;String&gt; filter = filterCustomField.isEmpty() ? Optional.empty() : Optional.of(filterCustomField.get(0));\n</code></pre></p> </li> </ul> Example <pre><code>    @Override\npublic Page&lt;MyEntityOutServiceDTO&gt; getList(final BusinessComponent bc, final QueryParameters queryParameters) {\n//Page size\nString page = bc.getParameters().getParameter(\"_page\");\n//Limit\nString limit = bc.getParameters().getParameter(\"_limit\");\n//Filter\nList&lt;String&gt; filterCustomField = getFilterFieldName(queryParameters, \"customField\", \"contains\");\nOptional&lt;String&gt; filter = filterCustomField.isEmpty() ? Optional.empty() : Optional.of(filterCustomField.get(0));\n//Sorting\nList&lt;String&gt; sortCustomField = getSortFieldName(queryParameters, \"customField\");\nOptional&lt;String&gt; sort = sortCustomField.isEmpty() ? Optional.empty() : Optional.of(sortCustomField.get(0));\nString urlTemplate = UriComponentsBuilder.fromHttpUrl(integrationConfig.getExistingMicroservicesDataServerUrl())\n.queryParam(\"number\", page)\n.queryParam(\"size\", limit)\n.queryParamIfPresent(\"filterCustomField\", filter)\n.queryParamIfPresent(\"sortCustomField\", sort)\n.encode()\n.toUriString();\nResponseEntity&lt;RestResponsePage&lt;MyEntityOutServiceDTO&gt;&gt; responseEntity = restTemplate.exchange(\nurlTemplate,\nHttpMethod.GET,\nnull,\nnew ParameterizedTypeReference&lt;&gt;() {\n},\nfilter\n);\nreturn responseEntity.getBody();\n}\nprivate List&lt;String&gt; getSortFieldName(QueryParameters queryParameters, String fieldName) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(\"_sort\"))\n.filter(f -&gt; f.getValue().contains(fieldName))\n.map(m -&gt; {\nString[] splitOperation = m.getKey().split(\"\\\\.\");\nreturn splitOperation[splitOperation.length - 1];\n}\n).toList();\n}\nprivate List&lt;String&gt; getFilterFieldName(QueryParameters queryParameters, String fieldName, String searchSpec) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(fieldName + \".\" + searchSpec))\n.map(Map.Entry::getValue)\n.toList();\n}\n</code></pre> <ul> <li>Getting data by ID:  method getByIdIgnoringFirstLevelCache</li> </ul> Example <pre><code>    @Override\npublic MyEntityOutServiceDTO getByIdIgnoringFirstLevelCache(final BusinessComponent bc) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getExistingMicroservicesDataServerUrl() + \"/{id}\").build()\n.expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nGET, null, MyEntityOutServiceDTO.class\n).getBody();\n}\n</code></pre>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#step-3-create-dto","title":"Step 3 Create DTO","text":"<p>Create DTO extends DataResponseDTO</p> Example <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\npublic MyExampleDTO(MyEntityOutServiceDTO entity) {\nthis.id = entity.getId();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#step4-create-metabuilder","title":"Step4 Create MetaBuilder","text":"<p>Create MetaBuilder extends AnySourceFieldMetaBuilder</p> Example <pre><code>@SuppressWarnings(\"EmptyMethod\")\n@Service\npublic class MyExampleMeta extends AnySourceFieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bc,\nString id, String parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bcDescription,\nString parentId) {\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n}\n</code></pre>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#step5-create-service","title":"Step5 Create Service","text":"<p>Create Service extends AnySourceVersionAwareResponseService</p> Example <pre><code>@SuppressWarnings({\"java:S\", \"java:S\"})\n@RequiredArgsConstructor\n@Service\npublic class MyExampleService extends AnySourceVersionAwareResponseService&lt;MyExampleDTO, MyEntityOutServiceDTO&gt; {\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleMeta&gt; meta = MyExampleMeta.class;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyEntityDao&gt; dao = MyEntityDao.class;\n@Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntityOutServiceDTO entity, BusinessComponent bc) {\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntityOutServiceDTO entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.addGroup(\n\"actions\",\n\"Actions\",\n0,\nActions.&lt;MyExampleDTO&gt;builder()\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.build()).\nbuild();\n}\n}\n</code></pre>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#step6-create-controller","title":"Step6 Create Controller","text":"<p>Create Controller implements EnumBcIdentifier</p> Example <pre><code> @Getter\npublic enum PlatformMyExampleController implements EnumBcIdentifier {\nmyExampleBc(MyExampleService.class);\npublic static final EnumBcIdentifier.Holder&lt;PlatformMyExampleController&gt; Holder = new Holder&lt;&gt;(\nPlatformMyExampleController.class);\nprivate final BcDescription bcDescription;\nPlatformMyExampleController(String parentName, Class&lt;?&gt; serviceClass, boolean refresh) {\nthis.bcDescription = buildDescription(parentName, serviceClass, refresh);\n}\nPlatformMyExampleController(Class&lt;?&gt; serviceClass) {\nthis((String) null, serviceClass, false);\n}\n@Component\npublic static class BcSupplier extends AbstractEnumBcSupplier&lt;PlatformMyExampleController&gt; {\npublic BcSupplier() {\nsuper(PlatformMyExampleController.Holder);\n}\n}\n}\n</code></pre>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#step7-create-widgetjson","title":"Step7 Create widget.json","text":"Example <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n]\n}\n</code></pre>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#step8-create-viewjson","title":"Step8 Create view.json","text":"Example <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"My example List\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"template\": \"DashboardView\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre>"},{"location":"features/element/microservices/existingmicroservices/existingmicroservices/#step9-create-screenjson","title":"Step9 Create screen.json","text":"Example <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 3800,\n\"title\": \"Existing microservice\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"title\": \"List\",\n\"child\": [\n{\n\"viewName\": \"myexamplelist\"\n}\n]\n},\n{\n\"title\": \"Info\",\n\"child\": [\n{\n\"viewName\": \"myexampleinfo\"\n}\n]\n},\n{\n\"title\": \"Form\",\n\"child\": [\n{\n\"viewName\": \"myexampleform\"\n}\n]\n}\n]\n}\n}\n</code></pre>"},{"location":"features/element/monitoringtools/metrics/performancemetrics/","title":"Perfomance metrics","text":"<p>cxbox/core 3.0.5</p> <p>cxbox-ui/core 1.37.1</p> <p> Live Sample </p>"},{"location":"features/element/monitoringtools/metrics/performancemetrics/#how-does-it-look","title":"How does it look?","text":""},{"location":"features/element/monitoringtools/metrics/performancemetrics/#metrics","title":"Metrics","text":"<p>Metrics can be two types:</p> <ul> <li>Standard</li> <li>Custom</li> </ul>"},{"location":"features/element/monitoringtools/metrics/performancemetrics/#standard-metrics","title":"Standard metrics","text":"<p>Description Standard metrics see spring-boot metrics</p>"},{"location":"features/element/monitoringtools/metrics/performancemetrics/#how-to-add","title":"How to add?","text":"Example <p>Step 1. Add pom.xml  new dependency. <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> Step 2. Add permission to  SecurityConfig.java  <pre><code>.antMatchers(\"/actuator/metrics/**\").permitAll()\n</code></pre> Step 3. Add new environment to  application.yml <pre><code>    management:\n        endpoint:\n            metrics:\n                enabled: true\n    endpoints:\n        enabled-by-default: true\n        web:\n            exposure:\n                include: 'metrics'\n</code></pre></p>"},{"location":"features/element/monitoringtools/metrics/performancemetrics/#custom-metrics","title":"Custom metrics","text":"<p>You can see the number of requests in different sections.</p> <p> Live Sample Statistics of all requests to UI</p> <p> Live Sample Statistics of all requests to screen clients and user</p> <p>Example request:</p> <p><code>../actuator/metrics/platform-requests?tag=&lt;section name&gt;:&lt;section value&gt;</code></p> <p><code>http://demo.cxbox.org/actuator/metrics/platform-requests?tag=screen:client</code>All requests to screen clients</p> <p>You can filter by several sections at once.</p> <p><code>http://demo.cxbox.org/actuator/metrics/platform-requests?tag=screen:client&amp;tag=user:JOHN%20SNOW</code> All requests to user and  screen clients</p>"},{"location":"features/element/monitoringtools/metrics/performancemetrics/#how-does-it-look_1","title":"How does it look?","text":"Statistics of all requests to UIStatistics of all requests to user and  screen clients <p>Custom application metrics: counting calls to UI tesler. </p> <p>Custom application metrics: counting calls to screen clients.  </p>"},{"location":"features/element/monitoringtools/metrics/performancemetrics/#how-to-add_1","title":"How to add?","text":"Example <p>Step 1. Add pom.xml  new dependency. <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> Step 2. Add permission to  SecurityConfig.java  <pre><code>.antMatchers(\"/actuator/metrics/**\").permitAll()\n</code></pre> Step 3. Add new environment to  application.yml <pre><code>    management:\n        endpoint:\n            metrics:\n                enabled: true\n    endpoints:\n        enabled-by-default: true\n        web:\n            exposure:\n                include: 'metrics'\n</code></pre> Step 4. Add description custom metrics:screen,bc,crudmaAction,error,user.</p> <p>Custom metrics start name: \"platform-requests\"</p> <pre><code>package org.demo.conf.cxbox.metrics;\nimport io.micrometer.core.instrument.Counter;\nimport io.micrometer.core.instrument.MeterRegistry;\nimport java.util.Optional;\nimport java.util.stream.Stream;\nimport org.cxbox.core.crudma.CrudmaActionHolder.CrudmaAction;\nimport org.cxbox.core.crudma.CrudmaEvent;\nimport org.cxbox.core.crudma.bc.BusinessComponent;\nimport org.demo.conf.security.cxboxkeycloak.CxboxKeycloakAccount;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Component;\n@Component\npublic class CrudmaEventListener implements ApplicationListener&lt;CrudmaEvent&gt; {\npublic static final String UNDEFINED = \"undefined\";\nprivate final MeterRegistry registry;\npublic CrudmaEventListener(MeterRegistry registry) {\nthis.registry = registry;\nregistry.counter(\"platform-requests\");\n}\n@Override\npublic final void onApplicationEvent(final CrudmaEvent event) {\nfinal CrudmaAction crudmaAction = event.getCrudmaAction();\nfinal BusinessComponent bc = crudmaAction.getBc();\nCounter counter = registry.counter(\n\"platform-requests\",\n\"screen\", Optional.ofNullable(bc.getHierarchy().getScreenName()).orElse(UNDEFINED),\n\"bc\", Optional.ofNullable(bc.getName()).orElse(UNDEFINED),\n\"crudmaAction\", Optional.ofNullable(crudmaAction.getName()).orElse(UNDEFINED),\n\"user\", Optional.ofNullable(getUserLogin()).orElse(UNDEFINED),\n\"error\", event.getException() == null ? \"false\" : \"true\"\n);\ncounter.increment();\n}\npublic static String getUserLogin() {\nreturn Stream.of(SecurityContextHolder.getContext())\n.map(SecurityContext::getAuthentication)\n.map(Authentication::getDetails)\n.filter(CxboxKeycloakAccount.class::isInstance)\n.map(CxboxKeycloakAccount.class::cast)\n.findFirst()\n.map(CxboxKeycloakAccount::getUsername)\n.orElse(null);\n}\n}\n</code></pre>"},{"location":"features/element/notifications/email/email/","title":"Sent to email","text":"<p>cxbox/core 3.0.5</p> <p>cxbox-ui/core 1.37.1</p> <p>Added integration with email systems to send email messages to users on various events</p> <p> Live Sample </p>"},{"location":"features/element/notifications/email/email/#how-does-it-look","title":"How does it look?","text":""},{"location":"features/element/notifications/email/email/#how-to-add","title":"How to add?","text":"Example <p>Step 1. Add pom.xml  new dependency. <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> Step 2. Add new environment to  application.yml <pre><code>spring:\n    mail:\n        host: ${MAIL_HOST:false}  \n        port: 587\n        username: ${MAIL_USER:}  \n        password: ${MAIL_PASSWORD:} \n        properties:\n            mail:\n                smtp:\n                    auth: true\n                starttls:\n                    enable: true\n</code></pre> Step 3. Add service MailSendingService</p> <pre><code>package org.demo.service;\nimport static org.cxbox.api.service.session.InternalAuthorizationService.VANILLA;\nimport java.time.LocalDateTime;\nimport java.util.Optional;\nimport lombok.RequiredArgsConstructor;\nimport org.cxbox.api.service.session.InternalAuthorizationService;\nimport org.cxbox.core.dto.DrillDownType;\nimport org.cxbox.model.core.entity.User;\nimport org.demo.dto.SocketNotificationDTO;\nimport org.demo.dto.SocketNotificationErrorDTO;\nimport org.demo.dto.enums.SocketNotificationErrorType;\nimport org.springframework.boot.autoconfigure.mail.MailProperties;\nimport org.springframework.mail.MailException;\nimport org.springframework.mail.MailParseException;\nimport org.springframework.mail.MailPreparationException;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\n@Service\n@RequiredArgsConstructor\npublic class MailSendingService {\nprivate final Optional&lt;JavaMailSender&gt; javaMailSender;\nprivate final Optional&lt;MailProperties&gt; mailProperties;\nprivate final NotificationService notificationService;\nprivate final InternalAuthorizationService authzService;\nprivate static final String HTTP = \"http://\";\n@Async\npublic void send(Optional&lt;String&gt; mailTo, String subject, String message, User currentUser) {\nif (mailTo.isPresent() &amp;&amp; mailSenderEnabled()) {\ntry {\nSimpleMailMessage simpleMailMessage = new SimpleMailMessage();\nsimpleMailMessage.setFrom(mailProperties.get().getUsername());\nsimpleMailMessage.setText(message);\nsimpleMailMessage.setTo(mailTo.get());\nsimpleMailMessage.setSubject(subject);\njavaMailSender.get().send(simpleMailMessage);\nauthzService.loginAs(authzService.createAuthentication(VANILLA));\nString link = mailTo.map(mail -&gt; mail.substring(mail.indexOf(\"@\") + 1)).orElse(\"\");\nnotificationService.sendAndSave(SocketNotificationDTO.builder()\n.title(\"Successful\")\n.text(\"Email sent to \" + mailTo.orElse(\"\"))\n.drillDownType(DrillDownType.EXTERNAL_NEW.getValue())\n.drillDownLabel(link)\n.drillDownLink(HTTP + link)\n.time(LocalDateTime.now())\n.build(), currentUser);\n} catch (MailParseException | MailPreparationException e) {\nnotificationService.sendAndSave(\ngetSocketNotificationDTOWithError(SocketNotificationErrorType.BusinessError, e.getMessage(),\nmailTo.orElse(\"\")\n),\ncurrentUser\n);\n} catch (MailException e) {\nnotificationService.sendAndSave(\ngetSocketNotificationDTOWithError(SocketNotificationErrorType.SystemError, e.getMessage(),\nmailTo.orElse(\"\")\n),\ncurrentUser\n);\n}\n}\n}\nprivate boolean mailSenderEnabled() {\nreturn javaMailSender.isPresent()\n&amp;&amp; mailProperties.isPresent()\n&amp;&amp; mailProperties.get().getHost() != null\n&amp;&amp; !mailProperties.get().getHost().isBlank();\n}\nprivate SocketNotificationDTO getSocketNotificationDTOWithError(SocketNotificationErrorType type,\nString message, String mailTo) {\nreturn SocketNotificationDTO.builder()\n.title(\"Not Successful\")\n.text(\"Email not sent to \" + mailTo)\n.time(LocalDateTime.now())\n.error(new SocketNotificationErrorDTO(type, message))\n.build();\n}\n}\n</code></pre>"},{"location":"features/element/notifications/push/websocket/","title":"Push notificaions","text":"<p>cxbox/core 3.0.5</p> <p>cxbox-ui/core 1.37.1</p> <p> Live Sample </p>"},{"location":"features/element/notifications/push/websocket/#how-does-it-look","title":"How does it look?","text":""},{"location":"features/element/notifications/push/websocket/#how-to-add","title":"How to add?","text":"Example <ul> <li> <p>Step 1. Add pom.xml  new dependency. <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></p> </li> <li> <p>Step 2. Add new environment to  application.yml <pre><code>websocket:\n    endpointToConnect: /websocketnotification\n    topic: /user/queue/websocket.reply\n</code></pre></p> </li> </ul> Step 3. SimpleBrokerStep 3. ActiveMQ <p>The default broker is SimpleBroker Spring implementation.</p> <p>see more STOMP Protocols</p> <ul> <li> <p>see more ActiveMQ</p> <ul> <li> <p>Step 3.1. Add pom.xml  new dependency.</p> <pre><code>```\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-reactor-netty&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n```\n</code></pre> </li> <li> <p>Step 3.2. Convert the ACTIVEMQ_BROKER_TYPE environment variable to the 'activemq' value</p> <pre><code>```\nACTIVEMQ_BROKER_TYPE:activemq\n```\n</code></pre> </li> <li> <p>Step 3.3 Other configurations:</p> <pre><code>```\nACTIVEMQ_ADMIN_LOGIN: The default admin login is 'admin'\nACTIVEMQ_ADMIN_PASSWORD: The default administrator password is 'admin'\nACTIVEMQ_HOST: The default connection host is 'activemq'\nACTIVEMQ_PORT: The default connection port is '61616'\nSTOMP_PORT: The default STOMP connection port is '61613'\n```\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p>Step 4. Add WebSocketConfig.java</p> <pre><code>import org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.simp.config.MessageBrokerRegistry;\nimport org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\nimport org.springframework.web.socket.config.annotation.StompEndpointRegistry;\nimport org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;\n@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n@Value(\"${spring.websocket.topic}\")\nprivate String topic;\n@Value(\"${spring.websocket.endpointToConnect}\")\nprivate String endpointToConnect;\n@Value(\"${cxbox.api.path}\")\nprivate String api;\n@Override\npublic void configureMessageBroker(MessageBrokerRegistry config) {\nconfig.enableSimpleBroker(topic);\n}\n@Override\npublic void registerStompEndpoints(StompEndpointRegistry registry) {\nregistry.addEndpoint(api + endpointToConnect);\n}\n}\n</code></pre> </li> </ul>"},{"location":"gettingstarted/getstartedfordevelopers/","title":"Getting started","text":"<p>This tutorial serves as an introduction to the fundamentals, guiding you through the creation of standard elements essential for initiating your project promptly.</p>"},{"location":"gettingstarted/getstartedfordevelopers/#what-you-need","title":"What You Need","text":"<ul> <li>About 15 minutes</li> </ul>"},{"location":"gettingstarted/getstartedfordevelopers/#step-1-clone-repository","title":"Step 1  Clone repository","text":"<pre><code>git clone git@github.com:CX-Box/cxbox-demo.git\n</code></pre>"},{"location":"gettingstarted/getstartedfordevelopers/#step-2-download-plugin","title":"Step 2  Download plugin","text":"<p>download Intellij Plugin</p>"},{"location":"gettingstarted/getstartedfordevelopers/#step-3-add-new-field-to-an-existing-screen","title":"Step 3 Add new field to an existing screen","text":"<p>Choose datasource:</p> <ul> <li>Postgres</li> <li>Microservices</li> </ul>"},{"location":"gettingstarted/getstartedfordevelopers/#step-4-to-deploy-an-application","title":"Step 4 To deploy an application","text":"<p>CXBOX requires a database, in this example, it utilizes PostgreSQL.</p> <ul> <li>install dependencies and build back-end and front-end     <pre><code>mvn clean install -PUI\n</code></pre></li> <li>start environment     <pre><code>docker-compose up -d    \n</code></pre></li> <li>run application     <pre><code>press green button in Application.java\n</code></pre></li> </ul>"},{"location":"gettingstarted/microservice/addenvironment/","title":"Create  DAO, DTO , Service, Controller","text":""},{"location":"gettingstarted/microservice/addenvironment/#step1-create-dto-for-integrating-with-microservice","title":"Step1 Create DTO for integrating with microservice","text":"<p>Create DTO for integrating with microservices through which data will be sent to the microservice</p> Example <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityOutServiceDTO implements Serializable {\nprivate String id;\nprivate String customField;\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addenvironment/#step-2-create-dao","title":"Step 2 Create DAO","text":"<p>Create DAO extends AbstractAnySourceBaseDAO implements AnySourceBaseDAO</p> Example <pre><code>@Service\n@RequiredArgsConstructor\npublic class MyEntityDao extends AbstractAnySourceBaseDAO&lt;MyEntityOutServiceDTO&gt; implements AnySourceBaseDAO&lt;MyEntityOutServiceDTO&gt; {\nprivate final IntegrationConfiguration integrationConfig;\nprivate final RestTemplate restTemplate;\n@Override\npublic String getId(final MyEntityOutServiceDTO entity) {\nreturn entity.getId();\n}\n@Override\npublic void setId(final String id, final MyEntityOutServiceDTO entity) {\nentity.setId(id);\n}\n@Override\npublic MyEntityOutServiceDTO getByIdIgnoringFirstLevelCache(final BusinessComponent bc) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getGetStartedMicroservicesDataServerUrl() + \"/{id}\").build()\n.expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nGET, null, MyEntityOutServiceDTO.class\n).getBody();\n}\n@Override\npublic Page&lt;MyEntityOutServiceDTO&gt; getList(final BusinessComponent bc, final QueryParameters queryParameters) {\n//Page size\nString page = bc.getParameters().getParameter(\"_page\");\n//Limit\nString limit = bc.getParameters().getParameter(\"_limit\");\n//Filter\nList&lt;String&gt; filterCustomField = getFilterFieldName(queryParameters, \"customField\", \"contains\");\nOptional&lt;String&gt; filter = filterCustomField.isEmpty() ? Optional.empty() : Optional.of(filterCustomField.get(0));\n//Sorting\nList&lt;String&gt; sortCustomField = getSortFieldName(queryParameters, \"customField\");\nOptional&lt;String&gt; sort = sortCustomField.isEmpty() ? Optional.empty() : Optional.of(sortCustomField.get(0));\nString urlTemplate = UriComponentsBuilder.fromHttpUrl(integrationConfig.getGetStartedMicroservicesDataServerUrl())\n.queryParam(\"number\", page)\n.queryParam(\"size\", limit)\n.queryParamIfPresent(\"filterCustomField\", filter)\n.queryParamIfPresent(\"sortCustomField\", sort)\n.encode()\n.toUriString();\nResponseEntity&lt;RestResponsePage&lt;MyEntityOutServiceDTO&gt;&gt; responseEntity = restTemplate.exchange(\nurlTemplate,\nHttpMethod.GET,\nnull,\nnew ParameterizedTypeReference&lt;&gt;() {\n},\nfilter\n);\nreturn responseEntity.getBody();\n}\nprivate List&lt;String&gt; getSortFieldName(QueryParameters queryParameters, String fieldName) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(\"_sort\"))\n.filter(f -&gt; f.getValue().contains(fieldName))\n.map(m -&gt; {\nString[] splitOperation = m.getKey().split(\"\\\\.\");\nreturn splitOperation[splitOperation.length - 1];\n}\n).toList();\n}\nprivate List&lt;String&gt; getFilterFieldName(QueryParameters queryParameters, String fieldName, String searchSpec) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(fieldName + \".\" + searchSpec))\n.map(Map.Entry::getValue)\n.toList();\n}\n@Override\npublic void delete(BusinessComponent bc) {\nrestTemplate.exchange(\nfromUriString(integrationConfig.getGetStartedMicroservicesDataServerUrl() + \"/{id}\").build().expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nDELETE, null, Void.class\n);\n}\n@Override\npublic MyEntityOutServiceDTO create(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nentity.setId(null);\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getGetStartedMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPOST, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n@Override\npublic MyEntityOutServiceDTO update(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getGetStartedMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPUT, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n}\n</code></pre> <p>Override methods:</p> <ul> <li>Create : method create</li> </ul> Example <pre><code>    public MyEntityOutServiceDTO create(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nentity.setId(null);\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getGetStartedMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPOST, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n</code></pre> <ul> <li>Deletion: method delete</li> </ul> Example <pre><code>    public void delete(BusinessComponent bc) {\nrestTemplate.exchange(\nfromUriString(integrationConfig.getGetStartedMicroservicesDataServerUrl() + \"/{id}\").build().expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nDELETE, null, Void.class\n);\n}\n</code></pre> <ul> <li>Update of existing entries:  method update</li> </ul> Example <pre><code>    public MyEntityOutServiceDTO update(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getGetStartedMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPUT, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n</code></pre> <ul> <li>Getting all data: method getList</li> </ul> Example <pre><code>    @Override\npublic Page&lt;MyEntityOutServiceDTO&gt; getList(final BusinessComponent bc, final QueryParameters queryParameters) {\n//Page size\nString page = bc.getParameters().getParameter(\"_page\");\n//Limit\nString limit = bc.getParameters().getParameter(\"_limit\");\n//Filter\nList&lt;String&gt; filterCustomField = getFilterFieldName(queryParameters, \"customField\", \"contains\");\nOptional&lt;String&gt; filter = filterCustomField.isEmpty() ? Optional.empty() : Optional.of(filterCustomField.get(0));\n//Sorting\nList&lt;String&gt; sortCustomField = getSortFieldName(queryParameters, \"customField\");\nOptional&lt;String&gt; sort = sortCustomField.isEmpty() ? Optional.empty() : Optional.of(sortCustomField.get(0));\nString urlTemplate = UriComponentsBuilder.fromHttpUrl(integrationConfig.getGetStartedMicroservicesDataServerUrl())\n.queryParam(\"number\", page)\n.queryParam(\"size\", limit)\n.queryParamIfPresent(\"filterCustomField\", filter)\n.queryParamIfPresent(\"sortCustomField\", sort)\n.encode()\n.toUriString();\nResponseEntity&lt;RestResponsePage&lt;MyEntityOutServiceDTO&gt;&gt; responseEntity = restTemplate.exchange(\nurlTemplate,\nHttpMethod.GET,\nnull,\nnew ParameterizedTypeReference&lt;&gt;() {\n},\nfilter\n);\nreturn responseEntity.getBody();\n}\nprivate List&lt;String&gt; getSortFieldName(QueryParameters queryParameters, String fieldName) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(\"_sort\"))\n.filter(f -&gt; f.getValue().contains(fieldName))\n.map(m -&gt; {\nString[] splitOperation = m.getKey().split(\"\\\\.\");\nreturn splitOperation[splitOperation.length - 1];\n}\n).toList();\n}\nprivate List&lt;String&gt; getFilterFieldName(QueryParameters queryParameters, String fieldName, String searchSpec) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(fieldName + \".\" + searchSpec))\n.map(Map.Entry::getValue)\n.toList();\n}\n</code></pre> <ul> <li>Getting data by ID:  method getByIdIgnoringFirstLevelCache</li> </ul> Example <pre><code>    @Override\npublic MyEntityOutServiceDTO getByIdIgnoringFirstLevelCache(final BusinessComponent bc) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getGetStartedMicroservicesDataServerUrl() + \"/{id}\").build()\n.expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nGET, null, MyEntityOutServiceDTO.class\n).getBody();\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addenvironment/#step-3-create-dto","title":"Step 3 Create DTO","text":"<p>Create DTO extends DataResponseDTO</p> Example <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\npublic MyExampleDTO(MyEntityOutServiceDTO entity) {\nthis.id = entity.getId();\n}\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addenvironment/#step4-create-metabuilder","title":"Step4 Create MetaBuilder","text":"<p>Create MetaBuilder extends AnySourceFieldMetaBuilder</p> Example <pre><code>@SuppressWarnings(\"EmptyMethod\")\n@Service\npublic class MyExampleMeta extends AnySourceFieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bc,\nString id, String parentId) {\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bcDescription,\nString parentId) {\n}\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addenvironment/#step5-create-service","title":"Step5 Create Service","text":"<p>Create Service extends AnySourceVersionAwareResponseService</p> Example <pre><code>@SuppressWarnings({\"java:S\", \"java:S\"})\n@RequiredArgsConstructor\n@Service\npublic class MyExampleService extends AnySourceVersionAwareResponseService&lt;MyExampleDTO, MyEntityOutServiceDTO&gt; {\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyEntityDao&gt; dao = MyEntityDao.class;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleMeta&gt; meta = MyExampleMeta.class;\n@Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntityOutServiceDTO entity, BusinessComponent bc) {\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntityOutServiceDTO entity, MyExampleDTO data, BusinessComponent bc) {\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.save(sv -&gt; sv.text(\"Save\"))\n.build();\n}\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addenvironment/#step6-create-controller","title":"Step6 Create Controller","text":"<p>Create Controller implements EnumBcIdentifier</p> Example <pre><code>@Getter\npublic enum PlatformMyExampleController implements EnumBcIdentifier {\nmyExampleBc(MyExampleService.class);\npublic static final EnumBcIdentifier.Holder&lt;PlatformMyExampleController&gt; Holder = new Holder&lt;&gt;(\nPlatformMyExampleController.class);\nprivate final BcDescription bcDescription;\nPlatformMyExampleController(String parentName, Class&lt;?&gt; serviceClass, boolean refresh) {\nthis.bcDescription = buildDescription(parentName, serviceClass, refresh);\n}\nPlatformMyExampleController(Class&lt;?&gt; serviceClass) {\nthis((String) null, serviceClass, false);\n}\n@Component\npublic static class BcSupplier extends AbstractEnumBcSupplier&lt;PlatformMyExampleController&gt; {\npublic BcSupplier() {\nsuper(PlatformMyExampleController.Holder);\n}\n}\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addfield/","title":"Add new field to corresponding widget.json","text":""},{"location":"gettingstarted/microservice/addfield/#step1-add-string-field-to-corresponding-dataresponsedto","title":"Step1 Add String  field to corresponding DataResponseDTO","text":"Example <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\npublic MyExampleDTO(MyEntityOutServiceDTO entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addfield/#step2-add-field-to-corresponding-anysourcefieldmetabuilder","title":"Step2  Add field to corresponding AnySourceFieldMetaBuilder","text":"Example <pre><code>@SuppressWarnings(\"EmptyMethod\")\n@Service\npublic class MyExampleMeta extends AnySourceFieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bc,\nString id, String parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bcDescription,\nString parentId) {\n}\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addfield/#step3-add-field-to-corresponding-anysourceversionawareresponseservice","title":"Step3  Add  field to corresponding AnySourceVersionAwareResponseService","text":"Example <pre><code>@SuppressWarnings({\"java:S\", \"java:S\"})\n@RequiredArgsConstructor\n@Service\npublic class MyExampleService extends AnySourceVersionAwareResponseService&lt;MyExampleDTO, MyEntityOutServiceDTO&gt; {\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyEntityDao&gt; dao = MyEntityDao.class;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleMeta&gt; meta = MyExampleMeta.class;\n@Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntityOutServiceDTO entity, BusinessComponent bc) {\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntityOutServiceDTO entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.save(sv -&gt; sv.text(\"Save\"))\n.build();\n}\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addfield/#step4-add-input-field-to-form-widget","title":"Step4 Add Input  field to form widget","text":""},{"location":"gettingstarted/microservice/addfield/#step5-add-field-to-layout","title":"Step5  Add field to layout","text":""},{"location":"gettingstarted/microservice/addscreen/","title":"Create new  screen.json","text":"<p>Create file  screen.json</p> <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 4002,\n\"title\": \"Get Started example microservice\",\n\"navigation\": {\n\"menu\": [\n]\n}\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addview/","title":"Create and add new view to corresponding screen.json","text":"<p>see more about view</p> <p>Step1 Create view.json </p> <pre><code>{\n\"name\": \"myexampleform\",\n\"title\": \"My Example Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 2,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <p>Step2 Add new view to corresponding screen.json</p> <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 4001,\n\"title\": \"Get Started example microservice\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"title\": \"Form\",\n\"child\": [\n{\n\"viewName\": \"myexampleform\"\n}\n]\n}\n]\n}\n}\n</code></pre>"},{"location":"gettingstarted/microservice/addwidget/","title":"Create and add new widget to corresponding view.json","text":"<p>see more about widget</p> <p>Step1 Create widget.json</p> <pre><code> {\n\"name\": \"MyExample4001Form\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc4001\",\n\"fields\": [\n]\n}\n</code></pre> <p>Step2 Add widget to corresponding view.json</p> <pre><code>    {\n\"name\": \"myexampleform\",\n\"title\": \"My Example Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 2,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre>"},{"location":"gettingstarted/microservice/getstartedfordevelopersmicroservice/","title":"Add new field to new screen","text":"<p>(see more Microservices)</p> <p>Task for the developer: </p> <ul> <li>You need to create the field to a new screen.</li> <li>The screen will be designed to look like this:</li> </ul> <p></p> <p> Live Sample \u00b7  GitHub</p> With plugin(recommended)Example of writing code <p>Step 1 Download Intellij Plugin</p> <p>Step2 Add screen</p> <p>Create file  screen.json</p> <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 4002,\n\"title\": \"Get Started example microservice\",\n\"navigation\": {\n\"menu\": [\n]\n}\n}\n</code></pre> <p>Step3 Create and add view to corresponding screen.json</p> <p> </p> <p>Step4 Create and add widget to corresponding view.json</p> <p></p> <p>Step5 Create  DAO, DTO , Service. Add to corresponding Controller </p> <p>Step6 Add field to corresponding widget.json see Add field</p>"},{"location":"gettingstarted/microservice/getstartedfordevelopersmicroservice/#step1-create-dao-dto-service-controller","title":"Step1 Create  DAO, DTO , Service, Controller","text":"<p>see Create environment</p>"},{"location":"gettingstarted/microservice/getstartedfordevelopersmicroservice/#step2-add-screen","title":"Step2 Add screen","text":"<p>see Add screen</p>"},{"location":"gettingstarted/microservice/getstartedfordevelopersmicroservice/#step3-add-view-to-corresponding-screenjson","title":"Step3 Add view to corresponding screen.json","text":"<p>see Add view</p>"},{"location":"gettingstarted/microservice/getstartedfordevelopersmicroservice/#step4-add-widget-to-corresponding-viewjson","title":"Step4 Add widget to corresponding view.json","text":"<p>see Add widget</p>"},{"location":"gettingstarted/microservice/getstartedfordevelopersmicroservice/#step5-add-field-to-corresponding-widgetjson","title":"Step5 Add field to corresponding widget.json","text":"<p>see Add field</p>"},{"location":"gettingstarted/postgres/addenvironment/","title":"Create environment","text":""},{"location":"gettingstarted/postgres/addenvironment/#step1-create-entity","title":"Step1 Create entity","text":"<p>Create entity extends BaseEntity</p> Example <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addenvironment/#step-2-create-dto","title":"Step 2 Create DTO","text":"<p>Create DTO extends DataResponseDTO</p> Example <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\n}\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addenvironment/#step3-create-metabuilder","title":"Step3 Create MetaBuilder","text":"<p>Create MetaBuilder extends FieldMetaBuilder</p> Example <pre><code>@SuppressWarnings(\"EmptyMethod\")\n@Service\npublic class MyExampleMeta extends FieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\n}\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addenvironment/#step4-create-service","title":"Step4 Create Service","text":"<p>Create Service extends VersionAwareResponseService</p> Example <pre><code>@SuppressWarnings(\"java:S\")\n@RequiredArgsConstructor\n@Service\npublic class MyExampleService extends VersionAwareResponseService&lt;MyExampleDTO, MyEntity&gt; {\nprivate final MyEntityRepository repository;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleMeta&gt; meta = MyExampleMeta.class;\n@Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntity entity, BusinessComponent bc) {\nrepository.save(entity);\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.save(sv -&gt; sv.text(\"Save\"))\n.build();\n}\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addenvironment/#step5-create-controller","title":"Step5 Create Controller","text":"<p>Create Controller implements EnumBcIdentifier</p> Example <pre><code>@Getter\npublic enum PlatformMyExampleController implements EnumBcIdentifier {\nmyExampleBc(MyExampleService.class);\npublic static final EnumBcIdentifier.Holder&lt;PlatformMyExampleController&gt; Holder = new Holder&lt;&gt;(\nPlatformMyExampleController.class);\nprivate final BcDescription bcDescription;\nPlatformMyExampleController(String parentName, Class&lt;?&gt; serviceClass, boolean refresh) {\nthis.bcDescription = buildDescription(parentName, serviceClass, refresh);\n}\nPlatformMyExampleController(String parentName, Class&lt;?&gt; serviceClass) {\nthis(parentName, serviceClass, false);\n}\nPlatformMyExampleController(BcIdentifier parent, Class&lt;?&gt; serviceClass, boolean refresh) {\nthis(parent == null ? null : parent.getName(), serviceClass, refresh);\n}\nPlatformMyExampleController(BcIdentifier parent, Class&lt;?&gt; serviceClass) {\nthis(parent, serviceClass, false);\n}\nPlatformMyExampleController(Class&lt;?&gt; serviceClass, boolean refresh) {\nthis((String) null, serviceClass, refresh);\n}\nPlatformMyExampleController(Class&lt;?&gt; serviceClass) {\nthis((String) null, serviceClass, false);\n}\n@Component\npublic static class BcSupplier extends AbstractEnumBcSupplier&lt;PlatformMyExampleController&gt; {\npublic BcSupplier() {\nsuper(PlatformMyExampleController.Holder);\n}\n}\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addfield/","title":"Add new field to an existing screen","text":""},{"location":"gettingstarted/postgres/addfield/#step1-create-entity","title":"Step1 Create entity","text":"<p>Create entity extends BaseEntity</p> Example <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addfield/#step-2-create-dto","title":"Step 2 Create DTO","text":"<p>Create DTO extends DataResponseDTO</p> Example <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\n}\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addfield/#step3-create-metabuilder","title":"Step3 Create MetaBuilder","text":"<p>Create MetaBuilder extends FieldMetaBuilder</p> Example <pre><code>@SuppressWarnings(\"EmptyMethod\")\n@Service\npublic class MyExampleMeta extends FieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\n}\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addfield/#step4-create-service","title":"Step4 Create Service","text":"<p>Create Service extends VersionAwareResponseService</p> Example <pre><code>@SuppressWarnings(\"java:S\")\n@RequiredArgsConstructor\n@Service\npublic class MyExampleService extends VersionAwareResponseService&lt;MyExampleDTO, MyEntity&gt; {\nprivate final MyEntityRepository repository;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleMeta&gt; meta = MyExampleMeta.class;\n@Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntity entity, BusinessComponent bc) {\nrepository.save(entity);\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.save(sv -&gt; sv.text(\"Save\"))\n.build();\n}\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addfield/#step5-create-controller","title":"Step5 Create Controller","text":"<p>Create Controller implements EnumBcIdentifier</p> Example <pre><code>@Getter\npublic enum PlatformMyExampleController implements EnumBcIdentifier {\nmyExampleBc(MyExampleService.class);\npublic static final EnumBcIdentifier.Holder&lt;PlatformMyExampleController&gt; Holder = new Holder&lt;&gt;(\nPlatformMyExampleController.class);\nprivate final BcDescription bcDescription;\nPlatformMyExampleController(String parentName, Class&lt;?&gt; serviceClass, boolean refresh) {\nthis.bcDescription = buildDescription(parentName, serviceClass, refresh);\n}\nPlatformMyExampleController(String parentName, Class&lt;?&gt; serviceClass) {\nthis(parentName, serviceClass, false);\n}\nPlatformMyExampleController(BcIdentifier parent, Class&lt;?&gt; serviceClass, boolean refresh) {\nthis(parent == null ? null : parent.getName(), serviceClass, refresh);\n}\nPlatformMyExampleController(BcIdentifier parent, Class&lt;?&gt; serviceClass) {\nthis(parent, serviceClass, false);\n}\nPlatformMyExampleController(Class&lt;?&gt; serviceClass, boolean refresh) {\nthis((String) null, serviceClass, refresh);\n}\nPlatformMyExampleController(Class&lt;?&gt; serviceClass) {\nthis((String) null, serviceClass, false);\n}\n@Component\npublic static class BcSupplier extends AbstractEnumBcSupplier&lt;PlatformMyExampleController&gt; {\npublic BcSupplier() {\nsuper(PlatformMyExampleController.Holder);\n}\n}\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addfield/#step6-create-widgetjson","title":"Step6 Create widget.json","text":"Example"},{"location":"gettingstarted/postgres/addfield/#step7-create-viewjson","title":"Step7 Create view.json","text":"Example"},{"location":"gettingstarted/postgres/addfield/#step8-add-view-on-screenjson","title":"Step8 Add view on screen.json","text":"Example <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 4001,\n\"title\": \"Get Started example postgres\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"title\": \"Form\",\n\"child\": [\n{\n\"viewName\": \"myexampleform\"\n}\n]\n}\n]\n}\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addfield/#step9-add-field-to-corresponding-widgetjson","title":"Step9 Add field to corresponding widget.json","text":""},{"location":"gettingstarted/postgres/addfield/#step91-add-field-to-widget","title":"Step9.1 Add field to widget","text":""},{"location":"gettingstarted/postgres/addfield/#step92-add-field-to-entity-dto","title":"Step9.2 Add field to entity, DTO","text":""},{"location":"gettingstarted/postgres/addfield/#step93-add-field-to-layout","title":"Step9.3 Add field to layout","text":""},{"location":"gettingstarted/postgres/addfield/#example","title":"Example","text":""},{"location":"gettingstarted/postgres/addscreen/","title":"Create new  screen.json","text":"<p>Create file  screen.json</p> Example <p><pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 4002,\n\"title\": \"Get Started example postgres\",\n\"navigation\": {\n\"menu\": [\n]\n}\n}\n</code></pre> ```</p>"},{"location":"gettingstarted/postgres/addview/","title":"Add view","text":""},{"location":"gettingstarted/postgres/addview/#add-new-view-to-corresponding-screenjson","title":"Add new view to corresponding screen.json","text":""},{"location":"gettingstarted/postgres/addview/#step1-create-viewjson","title":"Step1 Create view.json","text":"Example"},{"location":"gettingstarted/postgres/addview/#step2-add-new-view-to-corresponding-screenjson","title":"Step2 Add new view to corresponding screen.json","text":"Example <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 4001,\n\"title\": \"Get Started example postgres\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"title\": \"Form\",\n\"child\": [\n{\n\"viewName\": \"myexampleform\"\n}\n]\n}\n]\n}\n}\n</code></pre>"},{"location":"gettingstarted/postgres/addwidget/","title":"Add new field to an existing screen","text":"<p>Add field to corresponding widget.json</p>"},{"location":"gettingstarted/postgres/addwidget/#step1-add-field-to-widget","title":"Step1 Add field to widget","text":""},{"location":"gettingstarted/postgres/addwidget/#step2-add-field-to-entity-dto","title":"Step2 Add field to entity, DTO","text":""},{"location":"gettingstarted/postgres/addwidget/#step3-add-field-to-layout","title":"Step3 Add field to layout","text":""},{"location":"gettingstarted/postgres/addwidget/#example","title":"Example","text":""},{"location":"gettingstarted/postgres/getstartedfordeveloperspostgres/","title":"Add new field to screen","text":"<p>The task involves adding a new field to the display. </p> <p>The screen should be designed to look like this:</p> <p></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"gettingstarted/postgres/getstartedfordeveloperspostgres/#step1-create-dao-dto-service-controller","title":"Step1 Create  DAO, DTO , Service, Controller","text":"<p>see Create environment</p>"},{"location":"gettingstarted/postgres/getstartedfordeveloperspostgres/#step2-add-screen","title":"Step2 Add screen","text":"<p>see Add screen</p>"},{"location":"gettingstarted/postgres/getstartedfordeveloperspostgres/#step3-add-view-to-corresponding-screenjson","title":"Step3 Add view to corresponding screen.json","text":"<p>see Add view</p>"},{"location":"gettingstarted/postgres/getstartedfordeveloperspostgres/#step4-add-widget-and-field-to-corresponding-viewjson","title":"Step4 Add widget and  field to corresponding view.json","text":"<p>see Add widget and field</p>"},{"location":"gettingstarted/postgres/getstartedfordeveloperspostgres/#example","title":"Example","text":""},{"location":"guide/analystguide/analystguide/","title":"Guide for analysts","text":""},{"location":"guide/analystguide/analystguide/#how-to-use","title":"How to use","text":""},{"location":"guide/analystguide/analystguide/#add-field-type","title":"Add field type","text":"<p>I want to incorporate a field into the interface and explore its properties and functionalities.</p> <p>How to do it?</p>"},{"location":"guide/analystguide/analystguide/#1-choose-field-type","title":"1) Choose field type","text":"<p>On the left side, there's a menu that allows you to choose the desired field type, and you can easily share a link to that specific field type with the developer</p>"},{"location":"guide/analystguide/analystguide/#2-choose-function","title":"2) Choose function","text":"<p>Upon clicking a field type, a menu will be displayed, providing access to all potential scenarios for interacting with that specific field.</p> <p>For instance, if you wish to learn how filtering functions for a specific field type, you can simply select the \"Filtering - How does it look?\" link to explore its functionality.</p>"},{"location":"guide/analystguide/analystguide/#3-look-at-the-description-about-explanation-of-operational-intricacies","title":"3) Look at the description about explanation of operational intricacies","text":"<p>In this section, you'll find a description detailing the capabilities of this function and its visual representation on the screen. </p>"},{"location":"guide/analystguide/analystguide/#4-look-at-the-live-example","title":"4) Look at the live example","text":"<p>If the provided description isn't sufficient, you can navigate to the live examples section through the link. There, you can interact with it directly to gain a better understanding of how this field operates.</p>"},{"location":"guide/developerguide/developerguide/","title":"Guide for developers","text":""},{"location":"guide/developerguide/developerguide/#how-to-use","title":"How to use","text":""},{"location":"guide/developerguide/developerguide/#add-a-field-add-the-desired-function","title":"Add a field add the desired function","text":"<p>The task is to add a field with a specific type and add the desired function</p> <p>How to do it?</p>"},{"location":"guide/developerguide/developerguide/#1-choose-field-type","title":"1) Choose field type","text":"<p>On the left side, there's a menu that allows you to choose the desired field type,</p>"},{"location":"guide/developerguide/developerguide/#2-choose-basics-function","title":"2) Choose Basics function","text":"<p>Upon clicking a field type, a menu will be displayed, providing access to all potential scenarios for interacting with that specific field.</p> <p>Select the \"Basics - How to add?\" link. This section shows what basic actions to take to add the required field type</p>"},{"location":"guide/developerguide/developerguide/#3-add-the-desired-function","title":"3) Add the desired function","text":"<p>For instance, if you wish to learn how filtering functions for a specific field type, you can simply select the \"Filtering - How does it look?\" link to explore its functionality.</p> <p>In this section, you'll find a description detailing the capabilities of this function. </p>"},{"location":"guide/developerguide/developerguide/#4-look-at-the-code-sample","title":"4) Look at the code sample","text":"<p>If the provided description isn't sufficient, you can navigate to the code examples section through the link. There, you can interact with it directly to gain a better understanding of how to add  this field .</p>"},{"location":"navigation/screen/screen/","title":"Screen","text":"<p>Work in progress</p>"},{"location":"navigation/tabs/standard/basic/tab/","title":"Type standard","text":"<p><code>Tab</code>  is a  component that enables users to switch between different components using tabs. The tabs are organized as a tab bar. If the number of tabs exceeds the space available in the tab bar, navigation buttons will appear to help users scroll through the tabs.</p> <ul> <li>Tab names can only use constant values.</li> <li>Currently, a three-level tab hierarchy is supported.</li> </ul> <p> </p>"},{"location":"navigation/tabs/standard/basic/tab/#view-without-tabs","title":"View without tabs","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"navigation/tabs/standard/basic/tab/#how-does-it-look","title":"How does it look?","text":""},{"location":"navigation/tabs/standard/basic/tab/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add business widget to .view.json using widget position property. <pre><code>{\n\"name\": \"myexamplesingle\",\n\"title\": \"Tab Title 2[0]\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplesingle\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleOneLevel\",\n\"position\": 9,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 10,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> Step2 Add view to the .screen.json with type Single <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 32219,\n\"title\": \"Standard Navigation Tabs - One Level\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"viewName\": \"myexamplesingle\",\n\"hidden\": false\n}\n]\n}\n}\n</code></pre></p> <p></p>"},{"location":"navigation/tabs/standard/basic/tab/#secondlevel","title":"SecondLevel","text":""},{"location":"navigation/tabs/standard/basic/tab/#how-does-it-look_1","title":"How does it look?","text":"TopDown"},{"location":"navigation/tabs/standard/basic/tab/#how-to-add_1","title":"How to add?","text":"Example TopDown <p> Live Sample \u00b7  GitHub</p> <p>Step1 Add widget SecondLevelMenu <code>first</code> to .view.json using widget position property. </p> <pre><code>{\n\"name\": \"myexamplesecond\",\n\"title\": \"Title widget tab 2[0]\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplesecond\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 10,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleSecondLevelTop\",\n\"position\": 19,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <p>Step2 Add view to the .screen.json with type Single <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 32221,\n\"title\": \"Standard Navigation Tabs - Second Level down\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"viewName\": \"myexamplesecond\",\n\"hidden\": false\n},\n{\n\"viewName\": \"myexamplesecond\",\n\"hidden\": false\n}\n]\n}\n}\n</code></pre></p> <p></p> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Add widget SecondLevelMenu <code>after a widget</code> to .view.json using widget position <pre><code>{\n\"name\": \"myexampleseconddown\",\n\"title\": \"Title widget tab 2[0]\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexampledown/view/myexampleseconddown\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleSecondLevelDown\",\n\"position\": 9,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 10,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 20,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleInfo\",\n\"gridWidth\": 30\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Step2 Add view to the .screen.json with type Single <pre><code>{\n\"name\": \"myexampledown\",\n\"icon\": \"calendar\",\n\"order\": 32220,\n\"title\": \"Standard Navigation Tabs - Second Level down\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"viewName\": \"myexampleseconddown\",\n\"hidden\": false\n},\n{\n\"viewName\": \"myexampleseconddown\",\n\"hidden\": false\n}\n]\n}\n}\n</code></pre> </p>"},{"location":"navigation/tabs/standard/basic/tab/#thirdlevelmenu","title":"ThirdLevelMenu","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"navigation/tabs/standard/basic/tab/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"navigation/tabs/standard/basic/tab/#how-to-add_2","title":"How to add?","text":"Example <p>Step1 Add widget ThirdLevelMenu after a widget SecondLevelMenu to .view.json using widget position     see more Tab levels <pre><code>{\n\"name\": \"myexampleseconddown\",\n\"title\": \"Title widget tab 2[0]\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexampledown/view/myexampleseconddown\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleSecondLevelDown\",\n\"position\": 9,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 10,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 20,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleInfo\",\n\"gridWidth\": 30\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Step2 Add view to the .screen.json with type Aggregate  see more How add name for tab <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 32222,\n\"title\": \"Standard Navigation Tabs - Third Level\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"title\": \"Tab Title 2[0]\",\n\"child\": [\n{\n\"viewName\": \"myexamplethirdleveltab\"\n},\n{\n\"viewName\": \"myexamplethirdleveltab\"\n},\n{\n\"viewName\": \"myexamplethirdleveltab\",\n\"hidden\": true\n}\n]\n},\n{\n\"title\": \"Tab Title 2[1]\",\n\"child\": [\n{\n\"viewName\": \"myexamplesecondlevel\"\n}\n]\n}\n]\n}\n}\n</code></pre> </p>"},{"location":"navigation/tabs/standard/basic/tab/#fourthlevelmenu","title":"FourthLevelMenu","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"navigation/tabs/standard/basic/tab/#how-does-it-look_3","title":"How does it look?","text":""},{"location":"navigation/tabs/standard/basic/tab/#how-to-add_3","title":"How to add?","text":"Example <p>Step1 Add widget FourthLevelMenu after a widget ThirdLevelMenu to .view.json using widget position see more Tab levels <pre><code>{\n\"name\": \"myexamplefourthleveltab\",\n\"title\": \"Tab Title 4 [0] (parent Tab Title 3 [0] (parent Tab Title 2 [0]))\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplefourthleveltab\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 10,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleFourLevel\",\n\"position\": 11,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"ThirdLevelMenu\",\n\"position\": 30,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleInfo\",\n\"position\": 50,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"FourthLevelMenu\",\n\"position\": 60,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleFormFourthLevel\",\n\"position\": 70,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Step2 Add view to the .screen.json with type Aggregate <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 32224,\n\"title\": \"Standard Navigation Tabs - Fourth Level\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"title\": \"Tab Title 2 [0]\",\n\"child\": [\n{\n\"title\": \"Tab Title 3 [0] (parent Tab Title 2 [0])\",\n\"child\": [\n{\n\"viewName\": \"myexamplefourthleveltab\",\n\"hidden\": true\n},\n{\n\"viewName\": \"myexamplefourthleveltab\"\n},\n{\n\"viewName\": \"myexamplefourthleveltab\"\n}\n]\n},\n{\n\"viewName\": \"myexamplethirdleveltab\"\n}\n]\n},\n{\n\"title\": \"Tab Title 2 [1]\",\n\"child\": [\n{\n\"title\": \"Tab Title 3 [0] (parent Tab Title 2 [1])\",\n\"child\": [\n{\n\"viewName\": \"myexamplesecondlevel\"\n}\n]\n}\n]\n}\n]\n}\n}\n</code></pre></p> <p></p>"},{"location":"navigation/tabs/standard/basic/tab/#additional-properties","title":"Additional properties","text":""},{"location":"navigation/tabs/standard/basic/tab/#hidden","title":"Hidden","text":"<p> Live Sample \u00b7  GitHub</p> <p>If a view is marked as hidden, it will not appear in the general hierarchy and can only be accessed through a specific link (e.g., drilldown or button click). When you exit a hidden view, it will disappear.</p>"},{"location":"navigation/tabs/standard/basic/tab/#how-does-it-look_4","title":"How does it look?","text":""},{"location":"navigation/tabs/standard/basic/tab/#how-to-add_4","title":"How to add?","text":"Example <p>Step1 Add hidden = true for  view </p> <pre><code>{\n\"name\": \"myexample\",\n\"icon\": \"calendar\",\n\"order\": 32226,\n\"title\": \"Standard Navigation Tabs - hidden\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"title\": \"Tab title 2[0]\",\n\"child\": [\n{\n\"title\": \"Tab title [0]\",\n\"child\": [\n{\n\"viewName\": \"myexamplefourthlevelbutton\",\n\"hidden\": false\n},\n{\n\"viewName\": \"myexamplefourthleveltabhidden\",\n\"hidden\": true\n}\n]\n},\n{\n\"viewName\": \"myexamplethirdleveltabhidden\",\n\"hidden\": true\n}\n]\n},\n{\n\"viewName\": \"myexamplesecondleveltabhidden\",\n\"hidden\": true\n}\n]\n}\n}\n</code></pre>"},{"location":"navigation/tabs/standard/basic/tab/#defaultview","title":"defaultView","text":"<p>(since release 2.0.5)</p> <p> Live Sample \u00b7  GitHub</p> <p>The \"defaultView\" for Aggregate view </p> <p>The \"defaultView\" feature lets you set a default view to open when navigating through drilldowns on a screen or selecting an option from the left-hand menu. You can also configure it to open a hidden view if needed.</p>"},{"location":"navigation/tabs/standard/basic/tab/#how-does-it-look_5","title":"How does it look?","text":"basicwith hidden"},{"location":"navigation/tabs/standard/basic/tab/#how-to-add_5","title":"How to add?","text":"Example <p>Step1 Add defaultView for Aggregate view</p> <pre><code>{\n\"name\": \"myexampledefaultview\",\n\"icon\": \"calendar\",\n\"order\": 32225,\n\"title\": \"Standard Navigation Tabs - defaultView\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"title\": \"Tab Title 2 [0]\",\n\"defaultView\": \"myexampledvthirdleveltab\",\n\"child\": [\n{\n\"title\": \"Tab Title 3 [0] (parent Tab Title 2 [0])\",\n\"child\": [\n{\n\"viewName\": \"myexampledvfourthleveltab\",\n\"hidden\": true\n},\n{\n\"viewName\": \"myexampledvfourthleveltab\"\n},\n{\n\"viewName\": \"myexampledvfourthleveltab\"\n}\n]\n},\n{\n\"viewName\": \"myexampledvthirdleveltab\"\n}\n]\n},\n{\n\"title\": \"Tab Title 2 [1]\",\n\"defaultView\": \"myexampledvhfourthleveltab\",\n\"child\": [\n{\n\"title\": \"Tab Title 3 [0] (parent Tab Title 2 [0])\",\n\"child\": [\n{\n\"viewName\": \"myexampledvhfourthleveltab\",\n\"hidden\": true\n},\n{\n\"viewName\": \"myexampledvhfourthleveltab\"\n},\n{\n\"viewName\": \"myexampledvhfourthleveltab\",\n\"hidden\": true\n}\n]\n}\n]\n}\n]\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"navigation/tabs/standard/basic/tab/#typical-use-case","title":"Typical Use Case","text":"<p> Live Sample \u00b7  GitHub</p> <p></p> <p>1) Navigate to the Client List tab within the main Task entity.</p> <p>2) Select the Create button to open a new tab for entering contact details.</p> <p>3) After completing the details, click the Save button to return to the Client Form.</p>"},{"location":"navigation/tabs/standard/basic/tab/#primaryviewname","title":"primaryViewName","text":"<p> Live Sample \u00b7  GitHub</p> <p>The \"primaryViewName\" for screen.</p> <p>The \"primaryViewName\" feature lets you set a default view to open when navigating through drilldowns on a screen or selecting an option from the left-hand menu. You can also configure it to open a hidden view if needed.</p>"},{"location":"navigation/tabs/standard/basic/tab/#how-does-it-look_6","title":"How does it look?","text":""},{"location":"navigation/tabs/standard/basic/tab/#how-to-add_6","title":"How to add?","text":"Example <p>Step1 Add primaryViewName  for  screen</p> <pre><code>{\n\"name\": \"myexampleprimaryview\",\n\"icon\": \"calendar\",\n\"order\": 32227,\n\"primaryViewName\" : \"myexamplepv\",\n\"title\": \"Standard Navigation Tabs - primaryViewName\",\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"viewName\": \"myexamplepv\",\n\"hidden\": false\n},\n{\n\"viewName\": \"myexamplepv\",\n\"hidden\": false\n}\n]\n}\n}\n</code></pre>"},{"location":"navigation/tabs/standard/basic/tab/#primaryviews","title":"primaryViews","text":"<p> Live Sample \u00b7  GitHub</p> <p>The \"primaryViews\" for screen.</p> <p>The \"primaryViews\" feature lets you set a default views to open when navigating through drilldowns on a screen or selecting an option from the left-hand menu. You can also configure it to open a hidden view if needed.</p> <p>The \"primaryViews\" feature lets you define a sequence of views. If a user's role restricts access to the first view, the system automatically displays the next available view from the list. If none of the views are accessible, the default will be the first view specified on the screen.</p>"},{"location":"navigation/tabs/standard/basic/tab/#how-does-it-look_7","title":"How does it look?","text":""},{"location":"navigation/tabs/standard/basic/tab/#how-to-add_7","title":"How to add?","text":"Example <p>Step1 Add primaryViews  for screen</p> <pre><code>{\n\"name\": \"myexampleprimaryviews\",\n\"icon\": \"calendar\",\n\"order\": 32228,\n\"title\": \"Standard Navigation Tabs  - primaryViews\",\n\"primaryViews\" : [\"myexamplepvs\",\"myexamplepvs\"],\n\"navigation\": {\n\"type\": \"standard\",\n\"menu\": [\n{\n\"viewName\": \"myexamplepvs\",\n\"hidden\": false\n},\n{\n\"viewName\": \"myexamplepvs\",\n\"hidden\": false\n},\n{\n\"viewName\": \"myexamplepvs\",\n\"hidden\": false\n}\n]\n}\n}\n</code></pre>"},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/","title":"Type standard","text":""},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/#rules-for-rendering-tabs","title":"Rules for rendering tabs","text":"<p>These rules are necessary to ensure that when a tab is selected, there is always something to display or render.</p> <p>These rules are designed to maintain a coherent and functional tab navigation system, ensuring that users always have a meaningful view and can navigate effectively.</p> <ul> <li> <p>Unique view name: Each tab must have a unique name. This helps in tracking and restoring the highlighting of tabs when drilling down through different levels.   </p> </li> <li> <p>No empty arrays: You cannot have a level where the array is empty. This ensures that there is always a view to render when drilling down or navigating through tabs.   </p> </li> <li> <p>At least one view per level: Each level in the tab hierarchy must contain at least one view.   </p> </li> </ul>"},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/#how-add-a-view-to-the-screen","title":"How add a view to the screen?","text":"<p>There are two options for adding a view:</p> <ul> <li>Single View</li> <li>Aggregate View</li> </ul> <p>Advice</p> <p>Add views only with a plugin</p> <ul> <li>Single View.     This type allows to add single view on current level</li> </ul> <p></p> <ul> <li>Aggregate View.    This is used when multiple level tabs are needed(&gt;2).    Each level in an aggregate view corresponds to a tab in the hierarchy. As you drill down through the tabs, you move through these aggregate view levels.    You cannot have a level where the array is empty.(see Rules tabs)</li> </ul> <p></p>"},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/#how-add-name-for-tab","title":"How add name for tab?","text":"<p>Tab names can only use constant values.</p> <p>Single View: The tab name is derived directly from the view name. </p> <p>Aggregate View: The tab name is taken from title field. </p>"},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/#what-does-tab-level-mean","title":"What does tab level mean?","text":"<p>Currently, a three-level tab hierarchy is supported. </p> <p>Widgets are organized according to their level by using the corresponding system widget for each tab level.</p> <ul> <li>SecondLevelMenu</li> <li>ThirdLevelMenu</li> <li>FourthLevelMenu</li> </ul> <p>Implementation Example</p> <p>To manage a hierarchy of tabs with three levels in a system, follow these steps:</p> <p>1) Identify System Widgets: Each level of tabs has a corresponding system widget. Ensure you have the system widgets for each level defined in your system.</p> <p>2) Add Widgets in the View File. Place Widgets in the Hierarchy:</p> <ul> <li>Level 2: Widgets placed directly under SecondLevelMenu system widget.        </li> <li>Level 3: Widgets placed under ThirdLevelMenu system widget.       </li> <li>Level 4: Widgets placed under FourthLevelMenu system widget.      </li> </ul>"},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/#how-create-tab","title":"How create tab?","text":"<p>Level 1</p> <ul> <li>Add view to the .screen.json with type Single </li> </ul> <p>Level 2</p> <p>First view level 2:</p> <ul> <li>Add widget SecondLevelMenu in selected view</li> <li>Add selected view to the .screen.json with type Single</li> <li>The name of the level 2 tab = Title view. see more How add name for tab</li> </ul> <p>Next view level 2:</p> <ul> <li>Add widget SecondLevelMenu in selected view</li> <li>Add selected view to the .screen.json with type Single</li> <li>The name of the level 2 tab = Title view. see more How add name for tab</li> </ul> <p></p> <p>Level 3</p> <p>First view level 3:</p> <ul> <li>Add widget ThirdLevelMenu in selected view</li> <li>Add selected view to the .screen.json with type Aggregate view</li> <li>The name of the level 2 tab on which the level 3 tabs will be located = title field see more How add name for tab</li> <li>The name of the level 3 tab = Title view. see more How add name for tab</li> </ul> <p></p> <p>Next view level 3:</p> <ul> <li>Add widget ThirdLevelMenu in selected view</li> <li>At level 3 select tag <code>child</code> and add selected view to the .screen.json with type Single</li> <li>The name of the level 3 tab =  Title view. see more How add name for tab</li> </ul> <p></p> <p>Level 4</p> <p>First view level 4:</p> <ul> <li>Add widget FourthLevelMenu in selected view.</li> <li>Add level tab 3.</li> <li>At level 3 select tag <code>child</code> and add selected view to the .screen.json with type Aggregate view</li> <li>The name of the level 3 tab on which the level 4 tabs will be located = title field see more How add name for tab</li> <li>The name of the level 4 tab = Title view. see more How add name for tab</li> </ul> <p></p> <p>Next view level 4:</p> <ul> <li>Add widget FourthLevelMenu in selected view.</li> <li>At level 4 select tag <code>child</code> and add selected view to the .screen.json with type Single</li> <li>The name of the level 4 tab =  Title view. see more How add name for tab</li> </ul> <p></p>"},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/#how-to-understand-tab-levels-on-the-finished-screen","title":"How to understand tab levels on the finished screen?","text":"<p>To ensure correct screen assembly at each level, use the collapse function in Idea: </p> <p>1) Collapse the JSON to the first level (menu).Each element represents a tab, and the number of elements equals the number of horizontal tabs on the second level.Use widget position property. </p> <p>Example :</p> <p></p> <p>2) Expand the first element of the second level. Each element represents a tab, and the number of elements equals the number of horizontal tabs on the third level.Use widget position property.</p> <p>Example :</p> <p></p> <p>3) Expand the first element of the fourth level. Each element represents a tab, and the number of elements equals the number of horizontal tabs on the fourth level.Use widget position property.</p> <p>Example :</p> <p></p>"},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/#typical-use-case","title":"Typical Use Case","text":"<p> Live Sample \u00b7  GitHub</p> <p>Business Screen Hierarchy:</p> <ul> <li>General List of Tasks: Display all tasks in a comprehensive list.</li> <li>Specific Task Details:  Show details view for a selected task. (add data,show additional details)</li> <li>List of Clients: Display all clients in a comprehensive list  associated with the selected task.</li> <li>Client Information:   Show details view for selected task.</li> <li>List of Agreement: Display information on the agreements linked to selected task.</li> </ul> <p></p>"},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/#1-define-the-hierarchy","title":"1. Define the hierarchy","text":"<p>We define the hierarchy for our screen:</p> <p>Level 1:</p> <ul> <li>General list of tasks</li> </ul> <p>Level 2 Info about task:</p> <ul> <li>Task Info tab</li> <li>Additional Info tab</li> </ul> <p>Level 3 Related objects:</p> <ul> <li>Client tab</li> <li>Agreement tab</li> </ul> <p>Level 4 Info about client:</p> <ul> <li>Client Info tab</li> <li>Additional Info tab</li> </ul>"},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/#2-view-formation","title":"2. View Formation","text":"<p>For instance, we selected the view with the highest number of tabs (4) and will create the remaining views in a similar fashion.</p> <p>View :</p> <p><code>Level 1</code>: List Tasks</p> <p><code>Level 2</code>: Task Info   </p> <p><code>Level 3</code>: Client  </p> <p><code>Level 4</code>: Client Info  </p> <p>Level 1. List Tasks:</p> <p>TaskList widget first level - adds widget first</p> Example <pre><code>\"widgets\": [\n{\n\"widgetName\": \"TaskList\",\n\"position\": 10,\n\"gridWidth\": 12\n} ]\n</code></pre> <p>Level 2. Task Info:</p> <p>For the TaskInfoForm widget at the second level, first include the system widget SecondLevelMenu, and then add the TaskInfoForm.</p> Example <pre><code>\"widgets\": [\n{\n\"widgetName\": \"TaskList\",\n\"position\": 10,\n\"gridWidth\": 12\n} {\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n{\n\"widgetName\": \"TaskInfoForm\",\n\"position\": 30,\n\"gridWidth\": 24\n}\n]\n</code></pre> <p>Level 3. Client:</p> <p>For the ClientsList widget at the third level, first include the system widget ThirdLevelMenu, and then add the ClientsList.</p> Example <pre><code>\"widgets\": [\n{\n\"widgetName\": \"TaskList\",\n\"position\": 10,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 20,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"TaskInfoForm\",\n\"position\": 30,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"ThirdLevelMenu\",\n\"position\": 40,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"ClientsList\",\n\"position\": 50,\n\"gridWidth\": 12\n} ]\n</code></pre> <p>Level 4. Client Info:</p> <p>For the ClientInformationForm widget at the third level, first include the system widget FourthLevelMenu, and then add the ClientInformationForm.</p> Example <pre><code>\"widgets\": [\n{\n\"widgetName\": \"TaskList\",\n\"position\": 10,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 20,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"TaskInfoForm\",\n\"position\": 30,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"ThirdLevelMenu\",\n\"position\": 40,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"ClientsList\",\n\"position\": 50,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"FourthLevelMenu\",\n\"position\": 60,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"ClientInformationForm\",\n\"position\": 70,\n\"gridWidth\": 12\n}\n]\n</code></pre> <p>Advice</p> <p>It\u2019s advisable to assign position numbers to widgets in increments of 10. This way, if you need to add new widgets between existing ones, you can do so easily without having to renumber everything.</p>"},{"location":"navigation/tabs/standard/basicdevelop/tabfordevelop/#3-screen-formation","title":"3. Screen Formation","text":"<p>Level 1. List Tasks: General list of tasks</p> <p>Level 2. Info about task: Task Info tab, Additional Info tab</p> <p>Level 3. Related objects: Client tab, Agreement tab</p> <p>Level 4. Info about client: Client Info tab, Client Additional Info tab</p> <p>3.1 Add level 4</p> <p>Level 4. Info about client: Client Info tab, Client Additional Info tab First, we add a level 4 view</p> <p></p> <p>3.2 Add level 3</p> <p>Level 3. Related objects: Client tab, Agreement tab</p> <p>Collapse the JSON to the third level (menu). We add a level 3 view.</p> <p></p> <p>3.3 Add level 2</p> <p>Level 2. Info about task: Task Info tab, Additional Info tab</p> <p>Collapse the JSON to the second level (menu). We add a level 2 view.</p> <p></p>"},{"location":"navigation/view/view/","title":"Basic","text":""},{"location":"navigation/view/view/#view","title":"View","text":"<p><code>View</code> is the core building block of the user interface, used to form screens in the system. Each screen is created based on one or more Views, inside which various widgets are placed.</p> <p>A View defines:</p> <ul> <li>The structure and layout of the screen's content.</li> <li>The order in which widgets are displayed.</li> <li>The width of each widget (using an adaptive grid).</li> </ul>"},{"location":"navigation/view/view/#adaptive-grid","title":"Adaptive Grid","text":"<p>The system uses a 24-column adaptive grid for placing widgets. This allows for flexible management of their positioning and interface adaptability.</p> Value Behavior 24 The widget occupies the full width of the page. (Default) 12 The widget occupies half the width of the page (12/24 = 50%). <p>Note: Some special widgets (e.g., <code>AdditionalList</code>) may ignore the standard width rules and behave differently.</p> <p>If two consecutive widgets have a total grid width of 24 or less, they will be placed on the same line: the first on the left, the second on the right. If the total width of the widgets exceeds 24, the following widgets are automatically moved to a new line.</p>"},{"location":"navigation/view/view/#widget-display-order-position","title":"Widget Display Order (<code>position</code>)","text":"<p>Widgets inside a View are displayed in ascending order of their <code>position</code> parameter.</p> <p>Recommendation: Use increments of 10 (e.g., <code>10</code>, <code>20</code>, <code>30</code>) so that in the future you can easily insert a new widget between existing ones (e.g., at position <code>15</code>) without changing the other values.</p>"},{"location":"navigation/view/view/#example-view-configuration","title":"Example View Configuration","text":"Parameter Example Value Description <code>id</code> <code>myexampleid</code> The unique identifier for the View in the system. <code>title</code> <code>My Title</code> The View title displayed to the user (depends on the tab level). <code>template</code> <code>DashboardView</code> The View template. <code>DashboardView</code> is the standard (vanilla) template. <code>url</code> <code>myexample357listexample</code> The unique URL for the View. <code>rolesAllowed</code> <code>[\"CXBOX_USER\"]</code> The list of roles allowed to access this View."},{"location":"navigation/view/view/#how-to-add","title":"How to add?","text":"Example <p>To create a new View, you must:</p> <ol> <li>Set a unique <code>id</code></li> <li>Specify <code>title</code>.</li> <li>Define the list of allowed <code>roles</code>.</li> <li><code>template</code>= <code>DashboardView</code></li> <li>Add URL for the view.</li> <li>Add widgets, specifying for each:<ul> <li>The <code>position</code> parameter (controls the display order).</li> <li>The <code>gridWidth</code> parameter (controls the width in the 24-column grid). </li> </ul> </li> </ol> With plugin(recommended)Example of writing code <p></p> <pre><code>{\n\"name\": \"myexampleform\",\n\"title\": \"My Example Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 2,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre>"},{"location":"navigation/view/view/#security","title":"Security","text":"<p>Allowed Roles see more rolesAllowed</p>"},{"location":"navigation/widget/widget/","title":"Widget","text":"<p>Work in progress</p>"},{"location":"new/version100/","title":"v1.0.0","text":""},{"location":"new/version100/#key-updates-september-21-2023","title":"Key updates September 21, 2023","text":""},{"location":"new/version100/#cxbox-plugin","title":"CXBOX plugin","text":"<p>We've updated the plugin from version 1.5 to version 1.7.1.You have the latest features and improvements available.</p>"},{"location":"new/version100/#added-autocomplete-attributes-for-creating-fields","title":"Added autocomplete attributes for creating fields","text":"<p>Added plugin for autocomplete for fields specific to the Intellij Plugin platform. input, date, dateTime, dateTimeWithSeconds, number, percent, hidden, text, radio, checkbox, money, dictionary, fileUpload, pickList, inlinePickList, hint, multifield, multivalueHover, multivalue, multipleSelect</p>"},{"location":"new/version100/#added-code-generation-for-creating-fields","title":"Added code generation for creating fields","text":"<p>Added plugin for autocomplete, validation, navigation and code generation for fields specific to the Intellij Plugin platform. Code generation for types of fields: input, date, dateTime, dateTimeWithSeconds, number, percent, hidden, text, radio, checkbox, money, dictionary, fileUpload, pickList, inlinePickList, hint, multifield, multivalueHover, multivalue, multipleSelect</p>"},{"location":"new/version100/#added-code-generation-for-adding-fields","title":"Added code generation for adding fields","text":"<p>Added plugin for autocomplete, validation, navigation and code generation for fields specific to the Intellij Plugin platform. Code generation for types of fields: input, date, dateTime, dateTimeWithSeconds, number, percent, hidden, text, radio, checkbox, money, dictionary, fileUpload, pickList, inlinePickList, hint, multifield, multivalueHover, multivalue, multipleSelect Platform Tools</p>"},{"location":"new/version100/#added-multi-module-projects","title":"Added multi-module projects","text":"<p>Multi-module projects (e.g. also multiple projects in same IDE window) support added</p>"},{"location":"new/version100/#added-support-intellij-community","title":"Added support Intellij Community","text":"<p>Both Intellij Ultimate and Intellij Community are now supported</p>"},{"location":"new/version100/#other-changes","title":"Other Changes","text":"<p>see cxbox-plugin changelog</p>"},{"location":"new/version100/#cxbox-documetation","title":"CXBOX documetation","text":"<p>We've created this website with user-friendly documentation to help you effectively utilize CXBox.</p> <p>Added guide for analysts</p> <p>Added guide for developers</p>"},{"location":"new/version100/#added-creation-examples-for-fields","title":"Added creation examples for fields","text":"<p>We've introduced a new documentation section that details the core functionality for all field types. Each section of the documentation contains a detailed description of the main operations, placeholders, sorting methods, coloring options, filtering, detailing, checking, compulsory filling, filtering by a specific field type. Additionally, we've included links to live examples for hands-on demonstrations and access to code samples for reference. input, date, dateTime, dateTimeWithSeconds, number, percent, hidden, text, radio, checkbox, money, dictionary, fileUpload, pickList, inlinePickList, hint, multifield, multivalueHover, multivalue, multipleSelect</p>"},{"location":"new/version100/#other-changes_1","title":"Other Changes","text":"<p>see cxbox-doc changelog</p>"},{"location":"new/version100/#cxbox-demo-code-samples","title":"CXBOX (Demo, Code Samples)","text":""},{"location":"new/version100/#red-black-theme","title":"Red-black theme","text":"<p>The release has updated the theme of a certain project or software. The chosen theme is a classic combination of red and black, which symbolizes aristocratic taste and dignity)</p> <p>If you want to see the new theme, you can click on the provided link</p>"},{"location":"new/version100/#added-search-for-screens-by-name-in-menu","title":"Added search for screens by name in menu","text":"<p>The update includes a new and convenient search feature specifically designed for screens  by name in the menu. This will make it easier for users to search and locate specific screens quickly and efficiently. Filtering is case-insensitive and retrieves records containing the specified value at any position (similar to SQL Like %value% ) link.</p>"},{"location":"new/version100/#added-scroll-for-screens-in-menu","title":"Added scroll for screens in menu","text":"<p>Added scrolling function in a menu.  It feature that allows users to view the full list of screens or options within a limited space.  When the list of items exceeds the available space, the user can scroll up or down to see more options. link</p>"},{"location":"new/version100/#added-sort-for-fields-fileuploadinlinepicklist","title":"Added sort for fields FileUpload,InlinePicklist","text":"<p>Added sort for field FileUpload,InlinePicklist. Fields has lexicographic sorting. This sorting method is based on the order of characters in the field, where letters and numbers are organized according to their respective positions in the alphabet or numeric sequence. If you want to see  InlinePicklist, FileUpload.</p>"},{"location":"new/version100/#fix-filtration","title":"Fix filtration","text":"<p>We've resolved filtering issues across types of fields:     InlinePickList,     PickList,     MultipleSelect,     Radio,     Money,     Number,     DateTime,     DateTimeWithSeconds,     FileUpload,     Checkbox</p>"},{"location":"new/version100/#added-worked-with-file-store-minio","title":"Added worked with file store Minio","text":"<p>We've expanded the documentation by including a comprehensive example demonstrating how to work with Minio file storage.  This addition offers users practical insights into utilizing Minio for their file storage needs with cxbox. FileStorage.Minio</p>"},{"location":"new/version100/#other-changes_2","title":"Other Changes","text":"<p>see cxbox-demo changelog</p> <p>see cxbox-code-samples changelog</p>"},{"location":"new/version101/","title":"v1.0.1","text":"<p>cxbox/core 3.0.5 cxbox-ui/core 1.37.1</p>"},{"location":"new/version101/#key-updates-december-7-2023","title":"Key updates December 7, 2023","text":""},{"location":"new/version101/#cxbox-documetation","title":"CXBOX documetation","text":""},{"location":"new/version101/#added-creation-form-widget","title":"Added creation form widget","text":"<p>We've introduced a new documentation section that details the core functionality for form widget. Section of the documentation contains a detailed description of the basics ,main visual parts,show condition. Additionally, we've included links to live examples for hands-on demonstrations and access to code samples for reference.</p>"},{"location":"new/version101/#other-changes","title":"Other Changes","text":"<p>see cxbox-doc changelog</p>"},{"location":"new/version101/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version101/#development-mode-redesign","title":"Development mode redesign","text":"<p>We have made improvements to the debug panel by making more convenient. This redesign allows users to view all the essential information of a widget in a single line. If users require more detailed information, they can simply click on an arrow to expand and access the additional details. This enhancement provides a more streamlined and user-friendly experience when interacting with the debug panel. We've introduced a new documentation section that details the core functionality for all field types. Each section of the documentation contains a detailed description of the main operations, placeholders, sorting methods, coloring options, filtering, detailing, checking, compulsory filling, filtering by a specific field type. Additionally, we've included links to live examples for hands-on demonstrations and access to code samples for reference.</p>"},{"location":"new/version101/#oracle-support","title":"Oracle support","text":"<p>Added the ability to deploy an application to an oracle database using settings.</p> <p>see more Oracle support</p>"},{"location":"new/version101/#added-performance-metrics","title":"Added Performance Metrics","text":"<p>We added monitoring tools in application - performance metrics. Performance metrics are utilized to evaluate and monitor the conduct, operations, and effectiveness.</p> <p>see more Performance Metrics</p>"},{"location":"new/version101/#integration-with-email","title":"Integration with email","text":"<p>We added  sent to email  in application.</p> <p>see more Sent to email</p>"},{"location":"new/version101/#basic-auth-optional-support-added","title":"Basic auth optional support added","text":"<p>Added the ability storing login and password in a database.</p> <p>see more Basic Authorization</p>"},{"location":"new/version101/#push-notifications","title":"Push notifications","text":"<p>We added push notifications</p> <p>see more WebSocket and Long Pooling</p>"},{"location":"new/version101/#other-changes_1","title":"Other Changes","text":"<p>see cxbox-demo changelog</p> <p>see cxbox-code-samples changelog</p>"},{"location":"new/version200/","title":"v2.0.0","text":"<p>cxbox/core 4.0.0-M2</p> <p>cxbox-ui/core 2.0.0-alpha.6</p>"},{"location":"new/version200/#key-updates-march-11-2024","title":"Key updates March 11, 2024","text":""},{"location":"new/version200/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version200/#new-version-front-cxbox","title":"New version front cxbox","text":"<p>The release uses new version cxbox front UI.</p> <p>see more New ui</p>"},{"location":"new/version200/#new-version-core-cxbox","title":"New version core cxbox","text":"<p>The release uses new version core cxbox.</p> <p>see more New core</p>"},{"location":"new/version200/#support-for-microservice-architecture","title":"Support for microservice architecture","text":"<p>Added the ability to work not only with data from the database, but also with data from any source. E.g. support for microservice architecture significantly improved.</p> <p>see more Improved work with microservices</p>"},{"location":"new/version200/#added-multi-upload-for-files","title":"Added multi-upload for files","text":"<p>Multi-upload of files. To upload several files, you need to select them in popup, wait for loading and click the \"Save\" button. The files will be downloaded to the storage and will appear on the page once the upload process is complete. This feature makes it easy to upload multiple documents at once, streamlining the process and saving time for the user. It also ensures that all necessary files are uploaded to the widget in one go, eliminating the need for multiple uploads of individual files.</p> <p>Live sample Add files</p>"},{"location":"new/version200/#added-full-text-search","title":"Added full text search","text":"<p>Added the ability for List widgets to use fullText Search. When the user types in the full text search input area, then widget filters the rows that match the search query (search criteria is configurable and will usually check if at least one column has corresponding value). This feature makes it easier for users to quickly find the information they are looking for within a List widget.</p> <p>Live sample Full text search</p>"},{"location":"new/version200/#additional-columns","title":"Additional columns","text":"<p>If you'd like to change the composition or sequence of the columns displayed, you can do so by customizing your preferences in the settings menu, where you can select which columns should be \"displayed\" and wich are not. These changes will be saved for your account only, so you can view the columns in a way that suits your preferences.</p> <p>Live sample Customization of displayed columns</p>"},{"location":"new/version200/#new-picklist-filtration","title":"New pickList filtration","text":"<p>New filteration allows users to search for picklist entries by either their ID or text, providing a more flexible and efficient way to find the desired information. The filtering modes are mutually exclusive, meaning that users can only use one mode at a time to search for entries within the picklist. This enhancement improves the user experience and accelerates the process of selecting entries from picklists.</p> <p>Live sample New pickList filter</p>"},{"location":"new/version200/#filter-group-setting","title":"Filter group setting","text":"<p>The user filters can be saved for this user and can be selected from the drop-down list. This allows to easily access their presonal saved filters without having to re-enter them each time. These changes will be saved for user account only.</p> <p>Live sample Filter group setting.</p>"},{"location":"new/version200/#added-new-widget-type-statsblock","title":"Added new widget type - StatsBlock","text":"<p>Widget allows to display statistics in the form of a bar. Only for data viewing.</p> <p>Live sample StatsBlock.</p>"},{"location":"new/version200/#added-new-widget-type-suggestionpicklist","title":"Added new widget type - suggestionPickList","text":"<p>The new widget type allows you to search for data in other systems by specific fields. The current release provides an example with taking data from external rest api (dadata).</p> <p>Live sample suggestionPickList</p>"},{"location":"new/version200/#added-new-widget-type-formpopup","title":"Added new widget type - FormPopup","text":"<p>Added new widget type - popup with additional fields.</p> <p>Live sample FormPopup</p>"},{"location":"new/version200/#added-new-widget-type-additionalinfo","title":"Added new widget type - AdditionalInfo","text":"<p>Added new widget type only for data viewing. Widget is always located on the right side and has gray background.</p> <p>Live sample AdditionalInfo</p>"},{"location":"new/version200/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version200/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":""},{"location":"new/version200/#node-js-version-18","title":"Node JS &lt; version 18","text":"<p>Removed support for Node JS &lt; version 18</p>"},{"location":"new/version200/#all-direct-dependencies-have-been-removed","title":"All direct dependencies have been removed","text":"<p>The changes made it possible to use dependencies within the project that meet the requirements of the version range.</p>"},{"location":"new/version200/#uikit-has-been-separated-from-ui-core","title":"UIKit has been separated from ui core","text":"<p>UIKit has been separated from the ui core, so now insead of using cxbox standart ant-design based UIkit you can implement your own UIKit within the project using your perffered library (material and so on).</p>"},{"location":"new/version200/#replaced-custom-typescript-utilities","title":"Replaced custom typescript utilities","text":"<p>We have replaced custom typescript utilities with well-documented, standardized functions of the Redux-toolkit and the Redux-observable libraries.</p>"},{"location":"new/version200/#change-standard-actions-behavior","title":"Change standard actions behavior","text":"<p>Added the ability to change the behavior of standard actions on project level.</p>"},{"location":"new/version200/#change-routing-logic-on-the-frontend","title":"Change routing logic on the frontend","text":"<p>Added the ability to select a library for routing on the frontend.</p>"},{"location":"new/version200/#autotests-for-asynchronous-marble-testing-processes","title":"Autotests for asynchronous Marble testing processes","text":"<p>It is now possible to implement autotests for asynchronous Marble testing processes</p>"},{"location":"new/version200/#cxbox-core","title":"CXBOX  (Core)","text":""},{"location":"new/version200/#updated-to-springbot-3java-17","title":"Updated to Springbot 3(java 17+)","text":"<p>Updated to Springbot 3 (java 17+)</p>"},{"location":"new/version200/#any-source-api-and-improved-work-with-microservices","title":"Any Source API and improved work with microservices","text":"<p>The new \"Any Source\" API allows you to show/edit/update data now from microservices or any other sources. The API's feature is complete uniformity with old \"inner\" API for working in standard mode (e.g. VersionAwareResponseService based api). Multi-stage entity creation with force active fields is supported out of the box in new \"Any Source\" API.</p>"},{"location":"new/version200/#fixed-dependency-security-alert","title":"Fixed dependency security alert","text":"<p>Fixed all github (dependency security alerts) currently found by github.</p>"},{"location":"new/version200/#removed-from-the-core-of-the-table","title":"Removed from the core of the table","text":"<p>Removed from the core of the table:</p> <pre><code>* User\n* User_Role\n* USER_DIVISIONS\n* REVINFO\n* DIVISION\n* DEPT\n</code></pre>"},{"location":"new/version200/#removed-the-starters","title":"Removed the starters","text":"<p>Removed the starters:</p> <pre><code>* cxbox notifications starter(the example has been moved to demo and implemented on web sockets for the possibility of deep customization on projects)\n* cxbox quartz starter (removed)\n* cxbox workflow starter (removed)\n* Changelistener (recommended to use the standard hibernate Listner)\n</code></pre>"},{"location":"new/version200/#made-fieldextractors-spring-service","title":"Made FieldExtractors spring service","text":"<p>Developer do not need to register them in META-INF.services any more - @Service annotation is enough now</p>"},{"location":"new/version200/#other-changes_1","title":"Other Changes","text":"<p>see cxbox changelog</p>"},{"location":"new/version201/","title":"v2.0.1","text":"<ul> <li> <p>cxbox/demo 2.0.1 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M3 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.0.0 git, release notes, npm</p> </li> <li> <p>cxbox/code-samples 2.0.1 git, release notes</p> </li> </ul>"},{"location":"new/version201/#key-updates-july-2024","title":"Key updates July 2024","text":""},{"location":"new/version201/#cxbox-plugin","title":"CXBOX plugin","text":"<p>We've updated the plugin from version 1.7.1 to version 1.7.4. You have the latest features and improvements available.</p>"},{"location":"new/version201/#dynamically-selects-whether-to-use-the-javax-library-or-jakarta","title":"Dynamically selects whether to use the Javax library or Jakarta","text":"<p> Dynamically selects whether to use the Javax library or Jakarta depending on the version Hibernate </p>"},{"location":"new/version201/#added-quick-fix-and-check-for-correct-filling-for-the-hidden-property","title":"Added quick-fix and check for correct filling for the \"hidden\" property","text":"<p> For the \"hidden\" property in .widget.json, a quick-fix has been implemented, and inspection for correct filling has been added.</p>"},{"location":"new/version201/#added-a-check-for-correct-filling-for-the-title-property","title":"Added a check for correct filling  for the \"title\" property","text":"<p> Property \"title\" inspection for correct filling in .widget.json for type widget \"List\" has been added.</p>"},{"location":"new/version201/#other-changes","title":"Other Changes","text":"<p>see cxbox-plugin changelog</p>"},{"location":"new/version201/#cxbox-documetation","title":"CXBOX documetation","text":""},{"location":"new/version201/#added-getting-started-for-developer","title":"Added getting started for developer","text":"<p>This tutorial serves as an introduction to the fundamentals, guiding you through the creation of standard elements essential for initiating your project promptly.</p> <p>see more Getting started</p>"},{"location":"new/version201/#added-creation-examples-for-microservice","title":"Added creation examples for microservice","text":"<p>We have included an overview of standard methodologies for working with microservices.  Additionally, we have outlined a scenario where it is necessary to integrate with an existing microservice responsible for data operations.</p> <p>see more Microservices</p>"},{"location":"new/version201/#added-creation-examples-for-widgets","title":"Added creation examples for widgets","text":"<p>We have included a description of how to work with the following types of widgets:</p> <p>Info: Info widget is a component only for data viewing.</p> <p>Form: Form widget is a component for data viewing and editing. Usually it shows multiple fields. Also, it can show available action</p> <p>List: List widget is list the general information for many records and present it in a way that is easily interpretable for users.</p> <p>AdditionalInfo: AdditionalInfo widget is a component only for data viewing. Widget is always located on the left.</p> <p>Statistics blocks: Statistics blocks widget is a tool designed to display aggregated data in a visually accessible format. This data can be sourced either from a database or from external sources.</p>"},{"location":"new/version201/#added-creation-examples-for-fulltextsearchfilter-group","title":"Added creation examples for fulltextsearch,Filter group","text":"<p>We have included descriptions of the following filtering methods:</p> <p>Fulltextsearch : When the user types in the full text search input area, then widget filters the rows that match the search query (search criteria is configurable and will usually check if at least one column has corresponding value). This feature makes it easier for users to quickly find the information they are looking for within a List widget.</p> <p>Filter group: A user-filled filter can be saved for each individual user.</p>"},{"location":"new/version201/#added-creation-examples-for-drilldown","title":"Added creation examples for drilldown","text":"<p> We have included a description of working with drilldown, detailing their features and the various possibilities for utilizing them.</p> <p>Drilldown : DrillDown link is an element that lets the user navigate to another view by tapping it.</p>"},{"location":"new/version201/#added-creation-examples-for-multivalue_primary","title":"Added creation examples for multivalue_primary","text":"<p> We have included an example demonstrating the possibility of adding a primary attribute to a field type \"multivalue\".</p> <p>Multivalue_primary: Added the option to specify the Primary value to the AssocListPopup widget. If this value is specified, display an additional column labeled \"Primary\" that allows setting a checkbox in only one of the rows.</p>"},{"location":"new/version201/#other-changes_1","title":"Other Changes","text":"<p>see cxbox-doc changelog</p>"},{"location":"new/version201/#cxbox-demo-code-samples","title":"CXBOX (Demo, Code Samples)","text":""},{"location":"new/version201/#file-preview","title":"File preview","text":"<p>An eye button has been added. When clicked, the system generates a pop-up displaying a full-screen preview of the file. Three types of buttons have been added to the preview:</p> <p>Fullscreen: When clicked, the system generates a pop-up displaying a full-screen preview of the file. Navigate: The system displays file previews in the pop-up from the widget list in the order present when the pop-up was activated. This respects any applied filters or sorting. Download: The system initiates a file download and saves it to the user's standard Download folder.</p> <p>see more File preview</p>"},{"location":"new/version201/#multi-upload-of-files-without-popup","title":"Multi-upload of files without popup.","text":"<p>With the new update, you can use a widget to download the files.  After uploading, the files will be stored and displayed on the page once the process is complete. Added progress bar for download files. This improvement simplifies the process of uploading multiple documents simultaneously.</p> <p>Live sample Add files</p>"},{"location":"new/version201/#added-display-of-the-number-of-applied-filters","title":"Added display of the number of applied filters","text":"<p>If you have filtered by table, the \"Clear all filters\" button will appear. It is suggested to indicate the number of applied filters by displaying \"Clear n filters\" (where n represents the number of columns being filtered).</p> <p>Live sample Add files</p>"},{"location":"new/version201/#added-new-widget-type-groupinghierarchy","title":"Added new widget type - GroupingHierarchy","text":"<p>\"Grouping Hierarchy\" is purely display modes. Fundamentally, this widget is a list widget enhanced with a grouping feature. Live sample GroupingHierarchy</p>"},{"location":"new/version201/#added-view-with-responsibility","title":"Added view with responsibility","text":"<p>Added screen with responsivenes. Allows you to add or remove view accessibility.</p> <p>Live sample</p>"},{"location":"new/version201/#added-filtration-by-range-for-datedatetimedatetimewithseconds","title":"Added filtration by range for Date/DateTime/DateTimeWithSeconds","text":"<p>You can now filter fields Date/DateTime/DateTimeWithSeconds by range. This feature is available for all global construction projects.</p>"},{"location":"new/version201/#added-support-bgcolorbgcolorkey-of-field-in-title-template","title":"Added support BgColor/BgColorKey of field in Title template","text":"<p>Introduced the functionality to highlight portions of the widget title with color.</p>"},{"location":"new/version201/#other-changes_2","title":"Other Changes","text":"<p>see cxbox-demo changelog</p> <p>see cxbox-code-samples changelog</p>"},{"location":"new/version201/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":""},{"location":"new/version201/#added-filtration-by-range","title":"Added filtration by range","text":"<p>Added filtration by range for Date/DateTime/DateTimeWithSeconds</p>"},{"location":"new/version201/#added-support-color-in-title-template","title":"Added support Color in Title template","text":"<p>Added support BgColor/BgColorKey of field in Title template</p>"},{"location":"new/version201/#select-multiple-files","title":"Select Multiple Files","text":"<p>Added supports additional for multiple files</p>"},{"location":"new/version201/#file-preview_1","title":"File preview","text":"<p>Added supports additional in meta for file preview</p>"},{"location":"new/version201/#cxbox-400-m3-core","title":"CXBOX 4.0.0-M3  (Core)","text":""},{"location":"new/version201/#updated-to-springbot-324","title":"Updated to Springbot 3.2.4","text":"<p>Updated to Springbot 3.2.4</p>"},{"location":"new/version201/#file-preview_2","title":"File preview","text":"<p>Added supports additional in meta for file preview </p>"},{"location":"new/version201/#added-filtration-by-range_1","title":"Added filtration by range","text":"<p>Added supports filtration by range for Date/DateTime/DateTimeWithSeconds</p>"},{"location":"new/version201/#added-sorting-in-the-lov-dictionary","title":"Added sorting in the LOV dictionary","text":"<p>Added sorting in the LOV dictionary</p>"},{"location":"new/version201/#default-bc-limit-value-is-configurable","title":"Default Bc limit value is configurable","text":"<p>You can now configure in application.yml (cxbox.meta.bcDefaultPageLimit) default number of rows that will be shown on any widget (it was 5 before).  Of course, you can still override this value for exact bc in BC_Properties.csv with PAGE_LIMIT</p>"},{"location":"new/version201/#other-changes_3","title":"Other Changes","text":"<p>see cxbox changelog</p>"},{"location":"new/version2010/","title":"2.0.10","text":"<ul> <li> <p>cxbox/demo 2.0.10 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M13 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.4.3 git, release notes, npm</p> </li> <li> <p>cxbox/code-samples 2.0.10 git, release notes</p> </li> <li> <p>cxbox/intellij-plugin 1.7.8 Jetbrains Marketplace, cxbox-intellij-plugin.zip</p> </li> </ul>"},{"location":"new/version2010/#key-updates-december-2024-january-2025","title":"Key updates December 2024, January 2025","text":""},{"location":"new/version2010/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version2010/#added-list-widget-alignment-of-numeric-field-types","title":"Added: List widget - alignment of numeric field types","text":"<p>We have adjusted the alignment for numeric field types (number, money, percent) in List widget to be right-aligned. Both headers and content are now consistently aligned to the right.  </p> numbermoneypercent <p> </p> <p> </p> <p> </p>"},{"location":"new/version2010/#added-form-info-widgets-improved-field-alignment","title":"Added: Form, Info widgets - improved field alignment","text":"<p>We have improved the layout logic for fields in Form and multi-column Info (with titleMode: top) widgets. The row layout remains consistently aligned, regardless of whether the fields include labels or not.  </p> All with labelsSome with labelsNone with labels <p> </p> <p> </p> <p> </p>"},{"location":"new/version2010/#added-fileupload-field-case-insensitive-file-extension-handling-for-file-preview","title":"Added: fileUpload field - case-insensitive file extension handling for file preview","text":"<p>We have implemented case-insensitive validation for file extensions to ensure accurate file type representations in previews. Whether the extension is .png or .PNG, the preview icon will now correctly display the file type.  </p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2010/#added-list-widget-constant-funnel-size-for-all-fields","title":"Added: List widget - constant funnel size for all fields","text":"<p>Now, the funnel size remains the same regardless of the type of the filtered field.  </p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2010/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version2010/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":"<p>We have released a new CORE UI version (2.4.3).</p>"},{"location":"new/version2010/#other-changes_1","title":"Other Changes","text":"<p>see cxbox-ui changelog </p>"},{"location":"new/version2010/#cxbox-documentation","title":"CXBOX documentation","text":""},{"location":"new/version2010/#added-additionallist","title":"Added: AdditionalList","text":"<p>We have provided a detailed description of AdditionalList widget.  </p>"},{"location":"new/version2010/#cxbox-plugin","title":"CXBOX plugin","text":""},{"location":"new/version2010/#added-searchparameter-improved-handling-for-unresolved-entities","title":"Added: @SearchParameter - improved handling for unresolved entities","text":"<p>We have improved the plugin's behavior when the Entity specified in the annotation cannot be resolved.</p> <p>Now, if the Entity cannot be resolved, the plugin will:</p>"},{"location":"new/version2010/#inspection","title":"Inspection","text":"<p>Highlight the class name in yellow (Warning) with the message \"Entity not found.\"</p> <p></p>"},{"location":"new/version2010/#quick-fix-suggestion","title":"Quick-fix suggestion","text":"<p>Quick-fix suggestion to specify the Entity path explicitly in a comment. Example comment: //@entity:. <p></p>"},{"location":"new/version2010/#inspection-for-field-references-with-fieldkey-postfix-options-section","title":"Inspection for field references with -FieldKey postfix (options section).","text":"<p>The plugin now supports autocomplete, reference and inspections for field references in the options section of a widget.json file. To enable this functionality, ensure that fields in the options are named using the -FieldKey postfix (or simply named fieldKey). The plugin will link these fields to the fields array at the beginning of a widget.json file and, thus, ensure accurate references.</p> AutocompleteReferenceInspection <p></p> <p></p> <p></p>"},{"location":"new/version2010/#added-adding-multipleselect-field-for-enum-stored-in-entity-as-set","title":"Added: Adding MultipleSelect field for Enum stored in Entity as Set&lt;&gt;","text":"<p>Adding MultipleSelect field now utilizes a new method for <code>buildRowDependentMeta</code>.  </p>"},{"location":"new/version2011/","title":"2.0.11","text":"<ul> <li> <p>cxbox/demo 2.0.11 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M15 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.5.1 git, release notes, npm</p> </li> <li> <p>cxbox/code-samples 2.0.11 git, release notes</p> </li> </ul>"},{"location":"new/version2011/#key-updates-january-february-2025","title":"Key updates January, February 2025","text":""},{"location":"new/version2011/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version2011/#added-groupinghierarchy-widget-support-for-aggregate-rows","title":"Added: GroupingHierarchy widget - support for aggregate rows","text":"<p>We have added aggregate rows to display the aggregates on hierarchy levels. You can configure in <code>widget.json -&gt; options -&gt; groupMode: compact/ aggregate</code>.      </p> aggregatecompact (default) <p> With <code>groupMode: aggregate</code> the widget displays aggregate rows at the grouping field level. With this mode you can: 1) Define the columns to display aggregate values in 2) Specify at which hierarchy levels aggregates should appear 3) Select an aggregation function for calculations. Currently, we support standard functions: sum, min, max, avg. 4) Configure which columns will be used for aggregation calculations, including values from other columns.  </p> <p>Info</p> <p>We will soon provide a detailed description of Aggregate mode in the updated <code>GroupingHierarchy</code> article (Aggregate section) </p> <p> With <code>groupMode: compact</code> the widget appears in a compact view, where grouping fields and their content are displayed on the same row.  </p>"},{"location":"new/version2011/#added-waituntil-and-drilldownandwaituntil-postaction","title":"Added: waitUntil and drillDownAndWaitUntil PostAction","text":"<p>waitUntil</p> <p>This mechanism allows the program to wait until a certain condition is met. For example, \"Wait until the task status becomes 'Done'.\"</p> <p>This is useful when you have long-running operations (e.g., waiting for a response from a third-party system), and you want the user to see what\u2019s happening and know when everything is finished.</p> <p></p> <p>drillDownAndWaitUntil</p> <p>This is a mechanism that allows the program to navigate to another screen  and then wait until a specific condition is met. For example, \"Go to this screen, wait until the status becomes 'Done', and show the user what\u2019s happening.\"</p> <p>This is helpful in scenarios where you need to navigate to another screen (e.g., to view details or results).</p> <p></p>"},{"location":"new/version2011/#added-pie1d-widget-new-widget-type","title":"Added: Pie1D widget - New widget type!","text":"<p>We have added a new widget type <code>Pie1D</code> to display data in a circular format.  </p> <p></p> <p>Key features include:</p> <ul> <li>Inner radius control</li> <li>Tooltips' display  </li> <li>Legend display  </li> <li>Center text/aggregate display  </li> </ul> <p>Functionality includes:    </p> DrilldownSwitch modeSegment interaction <p>Click on a segment to drilldown to the filtered data displayed in a table. </p> <p>Switch from chart mode to table mode to view data in a tabular format. </p> <p>Click on legend values to add or remove segments from the chart. The aggregate value in the center of the chart will be recalculated as you interact with the legend values.  </p>"},{"location":"new/version2011/#added-column2d-widget-new-widget-type","title":"Added: Column2D widget - New widget type!","text":"<p>We have introduced a new widget type <code>Column2D</code> to display data using X and Y axes.  </p> <p></p> <p>Key features include:    </p> <ul> <li>Axes' scale/ step control</li> <li>Grouped bars' display</li> <li>Tooltips' display</li> </ul> <p>Functionality includes:  </p> DrilldownSwitch modeSegment interaction <p>Click on xAxis values to drilldown to the filtered data displayed in a table.  </p> <p>Switch from column mode to table mode to view data in a tabular format. </p> <p>Click on legend values to add or remove bars from the plot. </p>"},{"location":"new/version2011/#added-assoclistpopup-widget-support-for-creating-a-row","title":"Added: AssocListPopup widget - support for creating a row","text":"<p>Now, you can create a new row directly in the <code>AssocListPopup</code>. When you click the Add button, a new row appears inside the popup, allowing you to enter data and immediately select it as a value for a field.  </p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2011/#added-info-widget-consistent-field-highlighting","title":"Added: Info widget - consistent field highlighting","text":"<p>We have improved the logic of field highlighting in the Info widget. Hidden fields are not highlighted at all. For visible fields, a line is added above and below, except:  </p> <ul> <li>The first row (no line on top)  </li> <li>The last row (no line at the bottom)</li> </ul> AfterBefore <p></p> <p> </p>"},{"location":"new/version2011/#added-inlinepicklist-field-restrictions-in-formpopup-widget","title":"Added: inlinePickList field - restrictions in FormPopup widget","text":"<p>We have added a restriction for the inlinePickList field in FormPopup to prevent opening a popup within a popup, as this functionality is not supported. The folder icon has been removed, so the popup can no longer be triggered. All the available values will be displayed in the dropdown list.    </p> <p>Info</p> <p>We recommend to use InlinePickList (and to avoid pickList) in FormPopup, as inlinePickList displays values in the dropdown list, while the popup functionality for pickList will not work due to the restriction.  </p> AfterBefore <p> </p> <p> </p>"},{"location":"new/version2011/#added-formpopup-widget-improved-required-fields-handling","title":"Added: FormPopup widget - improved required fields' handling","text":"<p>We have updated the logic for checking required fields when they are present in the FormPopup: the required fields in the FormPopup and on the main form are now validated separately.  </p>"},{"location":"new/version2011/#added-siem","title":"Added: SIEM","text":"<ul> <li> <p>Added login system logging. <pre><code>INFO o.d.c.c.extension.siem.SecurityLogger: SIEM event. Operation: login, endpoint (resource): /login, user: DEMO (CXBOX_USER,BUSINESS_ADMIN), session: F2DBA42C1BAED2599339101D5FA3280F, ipAddress: 0:0:0:0:0:0:0:1, data: 1100057 \n</code></pre></p> </li> <li> <p>For  <code>invoke</code>  events, log the action name. <pre><code>INFO o.d.c.c.extension.siem.SecurityLogger : SIEM event. Operation: INVOKE.sendEmailNextDay, endpoint (resource): meeting (1100062), user: DEMO (CXBOX_USER,BUSINESS_ADMIN), session: F2DBA42C1BAED2599339101D5FA3280F, ipAddress: 0:0:0:0:0:0:0:1, data: null\n</code></pre></p> </li> <li> <p>Log access <code>Responsibility View</code> \u0438 <code>Responsibility Action</code> changes in SIEM (with WARN level). <pre><code>WARN o.d.c.c.extension.siem.SecurityLogger    : SIEM event. Operation: UPDATE, endpoint (resource): responsibilities (1100342), user: DEMO (CXBOX_USER,BUSINESS_ADMIN), session: F2DBA42C1BAED2599339101D5FA3280F, ipAddress: 0:0:0:0:0:0:0:1, data: {\"id\":\"1100342\",\"vstamp\":1,\"internalRoleCD\":\"BUSINESS_ADMIN\",\"view\":\"meetingview\",\"viewWidgets\":[{\"id\":\"meetingViewButtons\",\"value\":\"'/api/v1/../meeting' by widget 'meetingViewButtons'\",\"options\":{}},{\"id\":\"meetingEditViewHeader\",\"value\":\"'/api/v1/../meetingEdit' by widget 'meetingEditViewHeader'\",\"options\":{}},{\"id\":\"meetingDocumentsFormForList\",\"value\":\"'/api/v1/../meetingDocumentEdit' by widget 'meetingDocumentsFormForList'\",\"options\":{}},{\"id\":\"meetingView\",\"value\":\"'/api/v1/../meeting' by widget 'meetingView'\",\"options\":{}},{\"id\":\"meetingDocumentsList\",\"value\":\"'/api/v1/../meetingDocumentEdit' by widget 'meetingDocumentsList'\",\"options\":{}},{\"id\":\"meetingViewClientInfo\",\"value\":\"'/api/v1/../meeting' by widget 'meetingViewClientInfo'\",\"options\":{}},{\"id\":\"SecondLevelMenu\",\"value\":\"'/api/v1/../null' by widget 'SecondLevelMenu'\",\"options\":{}},{\"id\":\"meetingViewResult\",\"value\":\"'/api/v1/../meeting' by widget 'meetingViewResult'\",\"options\":{}}]}\n</code></pre></p> </li> </ul> <p>In the project code, in SiemCrudmaEventListener, you can customize the settings:</p> <ul> <li> <p>Configure log only the IDs:  <code>public static final boolean SIEM_CONFIG_LOG_DATA_ID_ONLY = false;</code></p> </li> <li> <p>Configure which CRUD-MA actions to log: <pre><code>public static final Map&lt;CrudmaActionType, Boolean&gt; SIEM_CONFIG_LOG_CRUDMA_ACTION_TYPES = Map.of(\n  CrudmaActionType.INVOKE, true,\n  CrudmaActionType.FIND, true,\n  CrudmaActionType.GET, true,\n  CrudmaActionType.UPDATE, true,\n  CrudmaActionType.PREVIEW, false,\n  CrudmaActionType.DELETE, true,\n  CrudmaActionType.COUNT, false,\n  CrudmaActionType.ASSOCIATE, true,\n  CrudmaActionType.META, false,\n  CrudmaActionType.CREATE, true\n  );\n</code></pre></p> </li> <li> <p>Configure which BC + CRUD-MA pairs to log with a WARN level (by default, it is set for administration screens: responsibility and action responsibility): <pre><code>public static final Map&lt;EnumBcIdentifier, List&lt;CrudmaActionType&gt;&gt; SIEM_CONFIG_LOG_LEVEL_WARN = Map.of(\n    CxboxRestController.responsibilities,\n    Arrays.stream(CrudmaActionType.values()).filter(e -&gt; !e.isReadOnly()).toList(),\n    CxboxRestController.responsibilitiesAction,\n    Arrays.stream(CrudmaActionType.values()).filter(e -&gt; !e.isReadOnly()).toList()\n);\n</code></pre></p> </li> </ul>"},{"location":"new/version2011/#fixed-dictionary-field-filtering-logic","title":"Fixed: dictionary field - filtering logic","text":"<p>We have improved the filtering logic for Dictionary fields. Now, when all selected values are unchecked and Apply is clicked, the filter is properly cleared, and all data is displayed without requiring an additional Clear Filter action.  </p>"},{"location":"new/version2011/#fixed-consistent-handling-of-field-keys","title":"Fixed: consistent handling of field keys","text":"<p>We have updated the logic for processing field keys. Previously, <code>widget.json -&gt; fields -&gt; key: number</code> would lead to errors in data handling on the frontend, because the \"key\" value was misinterpreted as a custom type. Now, the new logic prevents errors and guarantees proper interpretation of fields.  </p>"},{"location":"new/version2011/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version2011/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":"<p>We have released two CORE UI versions - 2.5.0 and 2.5.1! </p>"},{"location":"new/version2011/#other-changes_1","title":"Other Changes","text":"<p>see cxbox-ui 2.5.0 changelog and cxbox-ui 2.5.1 changelog</p>"},{"location":"new/version2011/#cxbox-400-m15-core","title":"CXBOX 4.0.0-M15 (Core)","text":""},{"location":"new/version2011/#added-requiredargsconstructor","title":"Added: @RequiredArgsConstructor","text":"<p>Use Lombok\u2019s @RequiredArgsConstructor and @Getter (meta,dao) for AnySourceVersionAwareResponseService and  @Getter (meta) VersionAwareResponseService instead of explicitly writing a constructor. This makes the code cleaner and reduces boilerplate.</p> AfterBefore <pre><code>@SuppressWarnings({\"java:S1170\"})\n@Service\n@RequiredArgsConstructor\npublic class ResponsibilitiesActionAdminService extends\nVersionAwareResponseService&lt;ResponsibilitiesActionAdminDTO, ResponsibilitiesAction&gt; {\nprivate final MetaAdminServiceExt metaAdminServiceExt;\nprivate final JpaDao jpaDao;\nprivate final CxboxFileService cxboxFileService;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;ResponsibilitiesActionAdminMeta&gt; meta = ResponsibilitiesActionAdminMeta.class;\n</code></pre> <pre><code>@Service\npublic class ResponsibilitiesActionAdminService extends\nVersionAwareResponseService&lt;ResponsibilitiesActionAdminDTO, ResponsibilitiesAction&gt; {\nprivate final MetaAdminServiceExt metaAdminServiceExt;\nprivate final JpaDao jpaDao;\nprivate final CxboxFileService cxboxFileService;\npublic ResponsibilitiesActionAdminService(MetaAdminServiceExt metaAdminServiceExt, JpaDao jpaDao,\nCxboxFileService cxboxFileService) {\nsuper(\nResponsibilitiesActionAdminDTO.class,\nResponsibilitiesAction.class,\nnull,\nResponsibilitiesActionAdminMeta.class\n);\nthis.metaAdminServiceExt = metaAdminServiceExt;\nthis.jpaDao = jpaDao;\nthis.cxboxFileService = cxboxFileService;\n}\n</code></pre>"},{"location":"new/version2011/#other-changes_2","title":"Other Changes","text":"<p>We have released two CORE versions! See cxbox 4.0.0-M14 changelog and cxbox 4.0.0-M15 changelog.  </p>"},{"location":"new/version2011/#cxbox-documentation","title":"CXBOX documentation","text":""},{"location":"new/version2011/#added-waituntil-and-drilldownandwaituntil","title":"Added: waitUntil and drillDownAndWaitUntil","text":"<p>We have added a full description of waitUntil and drillDownAndWaitUntil postActions  </p>"},{"location":"new/version2011/#added-picklistpopup-widget-standard-actions-and-additional-properties-description","title":"Added: pickListPopup widget - standard actions and additional properties description","text":"<p>We have provided a full description of pickListPopup widget's standard actions and additional properties. </p>"},{"location":"new/version2011/#added-assoclistpopup-widget-standard-actions-and-additional-properties-description","title":"Added: assocListPopup widget - standard actions and additional properties description","text":"<p>We have provided a full description of assocListPopup widget's standard actions and additional properties. </p>"},{"location":"new/version2011/#added-filtration-by-personal-filter-group","title":"Added: filtration - by personal filter group","text":"<p>We have added a description of filtration by personal filter group. </p>"},{"location":"new/version2011/#added-sorting-field-level","title":"Added: sorting - field level","text":"<p>We have updated the sorting article with the information on fields' sorting.  </p>"},{"location":"new/version2011/#added-multipleselect-field-method-update","title":"Added: multipleSelect field - method update","text":"<p>We have updated the article on multipleSelect field and provided the information on <code>setConcreteValues</code> method.  </p>"},{"location":"new/version2012/","title":"2.0.12","text":"<ul> <li> <p>cxbox/demo 2.0.12 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M16 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.5.2 git, release notes, npm</p> </li> <li> <p>cxbox/code-samples 2.0.12 git, release notes </p> </li> <li> <p>cxbox/intellij-plugin 1.7.9 Jetbrains Marketplace, cxbox-intellij-plugin.zip </p> </li> </ul>"},{"location":"new/version2012/#key-updates-february-march-2025","title":"Key updates February, March 2025","text":""},{"location":"new/version2012/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version2012/#added-push-notifications-new-display-modes","title":"Added: Push Notifications - new display modes","text":"<p>We have introduced three display modes for WebSocket Push Notifications: <code>single</code>, <code>stack</code>, and <code>column</code>.  </p> Single (default)ColumnStack <p>Each new notification replaces the previous one in a single area.   </p> <p>Notifications appear separately, aligned vertically in a column. </p> <p>Notifications appear separately, stacking on top of each other.  </p> <p>You can configure <code>timeout</code> for all three modes. For <code>stack</code> and <code>column</code>, you can also set the maximum number of visible notifications and the display direction (<code>upward</code>/<code>downward</code>).  </p>"},{"location":"new/version2012/#added-line2d-widget-new-widget-type","title":"Added: Line2D widget - New widget type!","text":"<p>We have introduced a new widget type <code>Line2D</code> to display data using X and Y axes in a linear format.</p> <p></p> <p>Key features include:</p> <ul> <li>Axis scale/ step control</li> <li>Grouped display</li> <li>Tooltip display</li> </ul> <p>Functionality includes:</p> <ul> <li>Drilldown - click on xAxis values to drilldown to the filtered data displayed in a table.   </li> <li>Switch mode - switch from column mode to table mode to view data in a tabular format.  </li> <li>Segment interaction - click on legend values to add or remove lines from the plot.  </li> </ul>"},{"location":"new/version2012/#added-dualaxes2d-widget-new-widget-type","title":"Added: DualAxes2D widget - New widget type!","text":"<p>We have introduced a new widget type <code>DualAxes2D</code> to display data from different types of charts in a single area. The charts share the same X axis, but can have separate Y axes.  Note! DualAxes2D can only display 2D types of widgets (e.g. Line2D, Column2D). The features (tooltip and axis scale/step) for 2D widgets will apply to DualAxes2D automatically.</p> <p></p> <p>Functionality includes:  </p> <ul> <li>Drilldown - click on yAxis values to drilldown to the filtered data displayed in a table.  </li> <li>Switch mode - switch from column mode to table mode to view data in a tabular format.  </li> <li>Segment interaction - click on legend values to add or remove lines/bars from the plot.  </li> </ul>"},{"location":"new/version2012/#added-ui-panel-display-of-application-version-and-environment-type","title":"Added: UI panel - display of application version and environment type","text":"<p>We have added the ability to display the environment type and current application version in the UI panel for convenience. The text adapts depending on the menu state (<code>collapsed</code>/<code>expanded</code>) and shows a tooltip with more details. Background color customization for this section is also supported.  </p> AfterBefore <p></p> <p></p>"},{"location":"new/version2012/#added-push-notifications-long-links-support","title":"Added: Push Notifications - long links support","text":"<p>We have enhanced the display of long link labels for Push Notifications. Now, if the link label exceeds the width of the notification, the text automatically wraps to the next line, ensuring the full label is displayed correctly without being truncated. In addition, the \"and (N) more...\" text (in case there are several links) is also displayed correctly within the notification area.   </p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2012/#added-suggestionpicklist-field-scrollbar-and-empty-value-support","title":"Added: suggestionPickList field - scrollbar and empty value support","text":"<p>We have improved the suggestionPickList field by adding scrollbar support - you can now navigate long lists more easily using the scrollbar.  </p> AfterBefore <p></p> <p> </p> <p>In addition, we have improved empty value display logic. If backend returns <code>null</code>, frontend will display an empty value instead of showing <code>null</code>.  </p>"},{"location":"new/version2012/#added-suggestionpicklist-field-changes-in-filtering-method","title":"Added: suggestionPickList field - changes in filtering method","text":"<p>We have refined the filtering method for the suggestionPickList field. Previously, it required an exact match with the typed characters (<code>equals</code>). Now, the filtering logic is less strict, and displays all the results that contain the entered text (<code>contains</code>).  </p> AfterBefore <p> </p> <p> </p>"},{"location":"new/version2012/#added-dictionary-field-improved-layout-for-modeicon","title":"Added: dictionary field - improved layout for mode:icon","text":"<p>We have removed the minimum width restriction for Dictionary field with <code>mode: icon</code>. This allows the field to shrink dynamically while keeping the icon and value closer together, resulting in a more compact layout.  </p> AfterBefore <p> </p> <p> </p>"},{"location":"new/version2012/#added-groupinghierarchy-widget-validation-for-aggregate-fields","title":"Added: GroupingHierarchy widget - validation for aggregate fields","text":"<p>We have introduced a validation rule for aggregate fields in the GroupingHierarchy widget. Now, a field cannot be used both as a grouping field and as an aggregate field at the same time. If the same field is used both for  grouping and aggregation, the widget will prioritize grouping, and the aggregation function will be ignored.  </p>"},{"location":"new/version2012/#fixed-formpopup-widget-forceactive-update","title":"Fixed: FormPopup widget - forceActive update","text":"<p>We have enhanced the forceActive feature for FormPopup widget to ensure that only a POST row-meta request is executed. This guarantees the most up-to-date information even when the entity is being edited, preventing data loss.  </p>"},{"location":"new/version2012/#fixed-assoclistpopup-ignored-scope-for-action-buttons","title":"Fixed: AssocListPopup - ignored scope for action buttons","text":"<p>We have updated AssocListPopup to ignore <code>scope</code> for action buttons, which prevents unnecessary duplication. Previously, actions from the three-dot menu were duplicated as separate buttons at the top.  </p>"},{"location":"new/version2012/#added-draft-builder-for-drilldowns-with-field-filtration","title":"Added: Draft Builder for Drilldowns with field filtration","text":"<p>A new Java Builder for generating drillDowns with filter by fields has been introduced:</p> AfterBefore <pre><code>drillDownExt.filterBcByFields(\nCxboxRestController.sale, SaleDTO.class, fb -&gt; fb\n.input(SaleDTO_.clientName, fields.getCurrentValue(DashboardSalesProductDTO_.clientName).orElse(null))\n.dictionary(SaleDTO_.product, fields.getCurrentValue(DashboardSalesProductDTO_.productName).orElse(null))\n.multiValue(SaleDTO_.fieldOfActivity, activity)\n);\n</code></pre> <pre><code>\"?filters={\\\"\"\n+ CxboxRestController.sale + \"\\\":\\\"\"\n+ URLEncoder.encode(SaleDTO_.clientName + \".\" + SearchOperation.CONTAINS.getOperationName() + \"=\" + fields.getCurrentValue(DashboardSalesProductDTO_.clientName).orElse(null), StandardCharsets.UTF_8)\n+ \"&amp;\"\n+ URLEncoder.encode(SaleDTO_.product + \".\" +  SearchOperation.EQUALS_ONE_OF.getOperationName()\n+ \"=[\\\\\\\"\" + fields.getCurrentValue(DashboardSalesProductDTO_.productName).orElse(null) + \"\\\\\\\"]\", StandardCharsets.UTF_8)\n+ \"&amp;\"\n+ URLEncoder.encode(SaleDTO_.fieldOfActivity + \".\" + SearchOperation.EQUALS_ONE_OF.getOperationName()\n+ \"=[\\\\\\\"\" + FieldOfActivity.IT.getValue() + \"\\\\\\\",\\\\\\\"\" + FieldOfActivity.MEDIA.getValue() + \"\\\\\\\"]\", StandardCharsets.UTF_8)\n+ \"\\\"}\";\n//And lots of logic to skip field filter if its value is null...\n</code></pre> <p>Info</p> <p>This is a draft Java API \u2014 we will improve it but also make breaking changes in it very likely in next releases. So, please, do not use it in you production code for now, but your feedback is essential! </p>"},{"location":"new/version2012/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version2012/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":"<p>We have released a new 2.5.2 CORE UI version.</p>"},{"location":"new/version2012/#other-changes_1","title":"Other Changes","text":"<p>See cxbox-ui 2.5.2 changelog.  </p>"},{"location":"new/version2012/#cxbox-400-m16-core","title":"CXBOX 4.0.0-M16 (Core)","text":"<p>We have released a new 4.0.0-M16 CORE version.  </p>"},{"location":"new/version2012/#added-new-java-api-for-confirm-preactions","title":"Added: NEW! Java API for confirm preActions","text":"<p>New Java API for confirm preActions in the CORE now provides with a standardized and unified behavior for both <code>confirm</code> and <code>confirmWithWidget</code> preActions.  </p> <p>1)<code>confirm</code> preAction </p> with title/textdefault titledefault textall defaultwithoutTitle()withoutText() <p><code>title</code> or <code>text</code> set explicitly <pre><code>PreAction.confirm(cf -&gt; cf\n.title(\"Approve?\")\n.text(\"Changes will be saved\")\n.yesText(\"Approve and Save\")\n.noText(\"Cancel\"))\n</code></pre> </p> <p>If you call <code>.title(null)</code> or don't call <code>title(..)</code> at all, the default title is displayed (actually its translation). <pre><code>PreAction.confirm(cf -&gt; cf\n.text(\"Changes will be saved\")\n.yesText(\"Approve and Save\")\n.noText(\"Cancel\"))\n</code></pre> </p> <p>If you call <code>.text(null)</code> or don't call <code>text(..)</code> at all, the auto-generated text is displayed. <pre><code>PreAction.confirm(cf -&gt; cf\n.title(\"Approve?\")\n.yesText(\"Approve and Save\")\n.noText(\"Cancel\"))\n</code></pre> </p> <p>If <code>preAction.confirm()</code> is called, all default values are displayed. <pre><code>PreAction.confirm()\n</code></pre> </p> <p>We have added support for an empty title using a <code>.withoutTitle()</code> method <pre><code>PreAction.confirm(cf -&gt; cf\n.withoutTitle()\n.text(\"Changes will be saved\")\n.yesText(\"Approve and Save\")\n.noText(\"Cancel\"))\n</code></pre> </p> <p>We have added support for an empty text using a <code>.withoutText()</code> method. The body of the confirmPopup shrinks as the text is left empty. <pre><code>PreAction.confirm(cf -&gt; cf\n.title(\"Approve?\")\n.withoutText()\n.yesText(\"Approve and Save\")\n.noText(\"Cancel\"))\n</code></pre> </p> <p>2)<code>confirmWithWidget</code> preAction (replacement for old <code>confirmWithCustomWidget</code> in demo)  </p> with titledefault titlewithoutTitle() <p>If <code>title</code> contains a value, it is displayed. <pre><code>PreAction.confirmWithWidget(\"meetingResultFormPopup\", cf -&gt; cf\n.title(\"Approve?\")\n.yesText(\"Approve and Save\")\n.noText(\"Cancel\")\n)\n</code></pre> </p> <p>If you call <code>.title(null)</code> or don't call <code>title(..)</code> at all, then <code>*FormPopup.widget.json -&gt; title</code> is shown  <pre><code>PreAction.confirmWithWidget(\"meetingResultFormPopup\", cf -&gt; cf\n.yesText(\"Approve and Save\")\n.noText(\"Cancel\")\n)\n</code></pre> </p> <p>Just like with <code>confirm</code>, there is now a support for an empty title using a <code>.withoutTitle()</code> method <pre><code>PreAction.confirmWithWidget(\"meetingResultFormPopup\", cf -&gt; cf\n.withoutTitle()\n.yesText(\"Approve and Save\")\n.noText(\"Cancel\")\n)\n</code></pre> </p>"},{"location":"new/version2012/#added-multivaluefield-multivaluefieldsinglevalue-implemented-serializable","title":"Added: MultivalueField &amp; MultivalueFieldSingleValue - Implemented Serializable","text":"<p>We have implemented Serializable for <code>MultivalueField</code> and <code>MultivalueFieldSingleValue</code> to ensure compatibility with springSessionJDBC. This change allows the backend to serialize bcState using the JDK serializer (instead of Jackson) by default, resolving issues with inconsistent behavior when attempting to serialize these objects.</p>"},{"location":"new/version2012/#added-spring-boot-upgraded-up-to-338","title":"Added: Spring Boot upgraded up to 3.3.8","text":"<p>In response to security requirements, we have upgraded Spring Boot from 3.3.4 to 3.3.8. This update also automatically upgraded transitive dependencies, resolving most security-related issues.</p>"},{"location":"new/version2012/#other-changes_2","title":"Other Changes","text":"<p>See cxbox 4.0.0-M16 changelog.  </p>"},{"location":"new/version2012/#cxbox-plugin","title":"CXBOX plugin","text":"<p>We've updated the plugin to version 1.7.9  </p>"},{"location":"new/version2012/#added-run-inspections-button","title":"Added: Run Inspections Button","text":"<p>We have added a Run Inspections button to the IntelliJ IDEA sidebar, enabling one-click execution of inspections across the entire project. The functionality automates the manual steps required to run inspections, eliminating the need to configure profiles or adjust settings.  </p> <p></p>"},{"location":"new/version2012/#added-additionalinfo-widget-fieldkey-validation-in-widgetjson","title":"Added: AdditionalInfo widget - fieldKey validation in *.widget.json","text":"<p>Added inspections for AdditionalInfo widget, following the same logic as Info widget. Now, if a <code>fieldKey</code> in <code>layout</code> is missing or does not reference a field from <code>fields</code>, an inspection warning is triggered.  </p> <p></p>"},{"location":"new/version2012/#added-inspection-for-options-createedit-widget-in-widgetjson","title":"Added: Inspection for options -&gt; create/edit -&gt; widget in *.widget.json","text":"<p>Added an inspection to ensure that widgets referenced in <code>create</code> and <code>edit</code> parameters are present on the same view as the main widget. Missing widgets are automatically added to the view.  </p> <p></p>"},{"location":"new/version2012/#added-postaction-drilldownandwaituntil-validation-for-successcondition_bcname","title":"Added: postAction drillDownAndWaitUntil - validation for successCondition_bcName","text":"<p>We have added a validation check to verify that the field specified in the successCondition_bcName parameter is present on the indicated bc in the drillDownAndWaitUntil postAction.  </p> <p></p>"},{"location":"new/version2012/#added-multipleselect-field-updated-method-for-field-auto-generation-in-widgetjson","title":"Added: multipleSelect field - updated method for field auto-generation in *.widget.json","text":"<p>Now, when adding a multipleSelect field via the + button, the plugin automatically generates the necessary code. If the project's core version supports it, the generated code will use <code>setConcreteValues()</code> instead of <code>setDictionaryTypeWithCustomValues()</code> marked as @deprecated since 4.0.0-M12.  </p> <p></p>"},{"location":"new/version2012/#fixed-inlinepicklist-field-parent-bc-check-in-widgetjson","title":"Fixed: inlinePicklist field - parent bc check in *.widget.json","text":"<p>Fixed the inspection for <code>popupBcName</code> in *.widget.json, ensuring that it correctly checks that the referenced business component (bc) is a child to the parent widget's bc. </p> <p></p>"},{"location":"new/version2012/#added-searchparam-enhanced-inspection-algorithm","title":"Added: @SearchParam \u2013 enhanced inspection algorithm","text":"<p>We've improved the validation of the path to the filtered field, ensuring better compatibility with microservices (Anysource services). Additionally, we resolved an issue affecting the inspection process in cases where the initial annotated field lacked an explicitly specified path.</p>"},{"location":"new/version2013/","title":"2.0.13","text":"<ul> <li> <p>cxbox/demo 2.0.13 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M17 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.5.3 git, release notes, npm</p> </li> <li> <p>cxbox/code-samples 2.0.13 git, release notes </p> </li> </ul>"},{"location":"new/version2013/#key-updates-april-may-2025","title":"Key updates April, May 2025","text":""},{"location":"new/version2013/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version2013/#added-number-money-percent-fields-range-filter-support","title":"Added: number, money, percent fields - range filter support","text":"<p>You can now filter number, money, and percent fields by a value range.</p> <p>The filter displays two inputs:</p> <ul> <li><code>From</code> \u2013 shows values \u2265 the entered number (.greaterOrEqualThan).</li> <li><code>To</code> \u2013 shows values \u2264 the entered number (.lessOrEqualThan).</li> </ul> <p>You can fill in either one or both fields. Values matching the entered range will be shown.  </p> AfterBefore <p></p> <p></p> <p>See range filtering for number, percent, money in the updated articles.  </p> <p>Copy buttons allow duplicating values between fields:</p> <ul> <li><code>&gt;</code> button \u2013 copies <code>From</code> to <code>To</code></li> <li><code>&lt;</code> button \u2013 copies <code>To</code> to <code>From</code></li> </ul> <p>Note: The buttons are only active when the corresponding source field contains a value.</p> <p> </p> <p>Info</p> <p>The <code>.equals</code> method is still available to support exact match filtering, ensuring backward compatibility.  </p>"},{"location":"new/version2013/#added-dictionary-multipleselect-radio-fields-filter-display","title":"Added: dictionary, multipleSelect, radio fields - filter display","text":"<p>The filter panel for fields with checkbox-style filtering (dictionary, multipleSelect, and radio) has been improved for better usability.  </p> <ul> <li>Search Field: A text input for searching filter values has been added. It appears only when the list of values exceeds the visible area and a scrollbar is shown. Note: This is just a search tool - it doesn't select any values.  </li> <li>Selected Values Counter: A counter has been added to the \"Apply\" button to display the number of the selected values. It is shown under the same condition as the search field (when a scrollbar is present). The maximum displayed number is limited by a frontend constant. If the number of selected values exceeds the limit, a \"+\" sign is added (e.g., 9+).</li> <li>UI Adjustments:<ul> <li>Scrollbar is now aligned to the right edge</li> <li>Margin between the list and the buttons has been removed</li> </ul> </li> </ul> AfterBefore <p></p> <p> </p> <p>See filter display for dictionary, multipleSelect, radio in the updated articles.  </p>"},{"location":"new/version2013/#added-sorting-support-for-toggling-sorting-states","title":"Added: Sorting - support for toggling sorting states","text":"<p>In addition to modifying sorting (which was already supported), users can now clear sorting with a third click \u2014 returning the field to an unsorted state (only for user-applied sorting).  </p> <p>Visual updates make the sorting state more intuitive:  </p> <ul> <li>Both arrows (\u2191\u2193) are now always displayed to indicate whether sorting is applied.   </li> <li>The active direction is highlighted (ascending or descending), while the other remains faded.   </li> <li>When no sorting is applied, both arrows are faded and only visible on hover.</li> </ul> 1st click (ascending)2nd click (descending)3d click (no sorting) <p></p> <p></p> <p> </p> <p>Info</p> <p>Users can only clear the sorting they applied themselves. Default sorting set by the system cannot be cleared.  </p>"},{"location":"new/version2013/#added-time-field-logic-and-display-enhancements","title":"Added: time field - logic and display enhancements","text":"<p>The time field is now fully supported and aligned with the behavior of date, dateTime, and dateTimeWithSeconds fields. It supports sorting, range-based filtering, and multiple display formats (<code>HH:mm:ss</code>, <code>HH:mm</code>, <code>HH</code>, <code>hh:mm:ss A</code>, <code>hh:mm A</code>, <code>hh A</code>).</p> ListInfoForm <p></p> <p></p> <p></p> <p>Info</p> <p>An updated article on time field is coming soon \u2014 stay tuned!</p>"},{"location":"new/version2013/#added-screen-panel-line-wrapping-and-search-bar","title":"Added: Screen panel - line wrapping and search bar","text":"<p>We have enhanced the left screen panel with two new features:  </p> <ul> <li>Line wrapping for screen names - a new setting controls how long screen names are displayed    </li> </ul> none (default)auto <p>Names stay on a single line and may be truncated if the screen name is long. </p> <p>Names automatically wrap to the next line. </p> <ul> <li>Search bar visibility - you can now control the search bar's display when the navigation menu is expanded:  </li> </ul> true (default)false <p>The search bar is shown. </p> <p>The search bar is unavailable. </p>"},{"location":"new/version2013/#added-steps-widget-description-support","title":"Added: Steps widget \u2013 description support","text":"<p>The Steps widget now supports optional descriptions for each step. If no description is provided, only the step label is displayed, as before.</p> AfterBefore <p></p> <p></p>"},{"location":"new/version2013/#added-list-widget-configurable-excel-export-limit","title":"Added: List widget \u2013 configurable Excel export limit","text":"<p>You can now set a row limit for Excel export in List widget at the application level. If the number of rows to export exceeds the configured limit, a warning message will inform the user that only N rows were exported. To ensure stable performance, the maximum export limit is 10,000 rows, even if a higher value is set in the configuration.  </p>"},{"location":"new/version2013/#fixed-date-field-applied-filtration-display-after-drilldown","title":"Fixed: date field - applied filtration display after drillDown","text":"<p>Previously, when opening the filter window for a date field after a drillDown, the applied filter values were not displayed. Now, the selected values are shown correctly, making it easier to understand the applied filter values and adjust the filter.  </p> AfterBefore <p></p> <p></p>"},{"location":"new/version2013/#fixed-showcondition-with-forceactive-parent","title":"Fixed: showCondition with forceActive parent","text":"<p>We\u2019ve improved the showCondition logic in cases where a parent widget has forceActive enabled. Now, when the value of a forceActive field changes, the metadata is correctly updated, ensuring that the affected widget\u2019s visibility and available actions are properly refreshed.</p>"},{"location":"new/version2013/#fixed-drilldown-autoscroll-to-top","title":"Fixed: drillDown - autoscroll to top","text":"<p>The screen now scrolls to the top when navigating via drillDown. Previously, the scroll position was preserved, which could confuse users when switching between screens.  </p> AfterBefore <p></p> <p></p>"},{"location":"new/version2013/#fixed-dictionary-multipleselect-inlinepicklist-fields-unified-dropdown-positioning-in-list-widget","title":"Fixed: dictionary, multipleSelect, inlinePickList fields - unified dropdown positioning in List widget","text":"<p>The dropdown positioning for dictionary, multipleSelect, and inlinePickList fields has been unified. Now, all dropdowns in List widget are displayed correctly outside the row and are no longer truncated.  </p> AfterBefore <p></p> <p></p> <p>See dictionary, multipleSelect, and inlinePickList in the updated articles.  </p>"},{"location":"new/version2013/#fixed-refresh-request-for-a-non-existent-bc","title":"Fixed: refresh request for a non-existent bc","text":"<p>The frontend now handles refresh requests for business components that aren't present on the page without errors. Instead, a warning is logged to the console.</p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2013/#fixed-dictionary-field-consistent-field-size-with-validation-inline-edit","title":"Fixed: dictionary field - consistent field size with validation (inline-edit)","text":"<p>The display of dictionary in inline editing mode has been enhanced to handle errors (e.g., mandatory field validation errors).</p> <p>Now, the empty value area occupies the same space as filled fields, ensuring a consistent interface.</p> AfterBefore <p></p> <p></p>"},{"location":"new/version2013/#fixed-button-actions-respond-to-force-active-fields","title":"Fixed: Button actions - respond to force-active fields","text":"<p>Button actions now correctly respond to metadata updates from force-active fields. Previously, actions could be triggered before re-evaluating button availability, allowing execution even when the button should have been disabled.  </p> AfterBefore <p></p> <p></p>"},{"location":"new/version2013/#fixed-dictionary-multipleselect-multivalue-multivaluehover-unified-display-height-in-read-mode","title":"Fixed: dictionary, multipleSelect, multivalue, multivalueHover - unified display height in read mode","text":"<p>The height of the following field types in view mode has been adjusted from 20px to 16px (just like other fields) to ensure visual consistency.   </p>"},{"location":"new/version2013/#fixed-picklist-field-updated-query-logic","title":"Fixed: pickList field - updated query logic","text":"<ul> <li>The frontend no longer sends requests for picklist data when the parent entity contains no records.</li> <li>Child entity data is no longer requested if its parent entity has no records.</li> </ul> AfterBefore <p>The frontend no longer sends requests  </p> <p></p>"},{"location":"new/version2013/#fixed-role-switching-improved-error-handling","title":"Fixed: role switching - improved error handling","text":"<p>We\u2019ve refined how error messages are shown when switching user roles. Before, an error could appear even if the view was actually available. Now, the message is shown only when the requested view is truly inaccessible for the selected role.  </p>"},{"location":"new/version2013/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog </p>"},{"location":"new/version2013/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":"<p>We have released a new 2.5.3 CORE UI version.</p>"},{"location":"new/version2013/#other-changes_1","title":"Other Changes","text":"<p>See cxbox-ui 2.5.3 changelog.</p>"},{"location":"new/version2013/#cxbox-400-m17-core","title":"CXBOX 4.0.0-M17 (Core)","text":"<p>We have released a new 4.0.0-M17 CORE version.  </p>"},{"location":"new/version2013/#other-changes_2","title":"Other Changes","text":"<p>See cxbox 4.0.0-M17 changelog.</p>"},{"location":"new/version2013/#cxbox-documentation","title":"CXBOX documentation","text":""},{"location":"new/version2013/#added-suggestionpicklist-field","title":"Added: suggestionPickList field","text":"<p>We have provided a full description of suggestionPickList field</p>"},{"location":"new/version2013/#added-dictionary-multipleselect-radio-fields-updated-article","title":"Added: dictionary, multipleSelect, radio fields - updated article","text":"<p>We have provided a  description of dictionary, multipleSelect, radio </p>"},{"location":"new/version2013/#added-number-percent-money-fields-filtration-by-range","title":"Added: number, percent, money fields - filtration by range","text":"<p>We have updated the articles on number, percent and money on range filtration.  </p>"},{"location":"new/version2014/","title":"2.0.14","text":"<ul> <li> <p>cxbox/demo 2.0.14 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M18 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.6.0 git, release notes, npm</p> </li> <li> <p>cxbox/code-samples 2.0.14 git, release notes </p> </li> <li> <p>cxbox/intellij-plugin 1.8.0 Jetbrains Marketplace, cxbox repo (recommended)</p> </li> </ul>"},{"location":"new/version2014/#key-updates-june-july-2025","title":"Key updates June, July 2025","text":""},{"location":"new/version2014/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version2014/#added-list-widget-mass-operations-new","title":"Added: List widget \u2013 mass operations (NEW!)","text":"<p>We\u2019ve introduced a new feature that allows you to apply actions to multiple rows at once \u2013 mass operations. This is a special List widget display designed to guide the user through each step of a bulk action.  </p> <p>Mass operations can include the following steps:  </p> Step 1: SelectStep 2: ReviewStep 3: Confirm (Optional)Step 4: Results <p>Checkboxes appear next to each row. You can select multiple rows, which are then shown as tags above the table. You can also Select from file and upload the rows you want to apply mass operation to.   </p> <p>The selected rows are shown in read-only mode, allowing you to double-check your selection before proceeding. </p> <p>Depending on the operation, this step may be included to provide a form for entering additional required data or just provide a confirmation text.  </p> <p>Info</p> <p>We recommend to specifically create an additional mass operation field to display it on this step. Otherwise, the query will be sent to the first row in the table and, thus, the field will be pre-filled with the values from the first field.  </p> <p></p> <p>Once the action is complete, you\u2019ll see a summary of results for each row. You can also download the result as an Excel file to work with those rows later during the next bulk operation. </p> <p>Info</p> <p>A detailed article on mass operations will be available soon in our official documentation \u2013 stay tuned!  </p>"},{"location":"new/version2014/#added-filepreview-widget-new-widget-type","title":"Added: FilePreview widget \u2013 NEW widget type!","text":"<p>We\u2019ve introduced a new widget type \u2013 FilePreview. It takes up 50% of the main screen area and is placed next to other content. The widget remains fixed at the top while scrolling, keeping the document always visible.  </p> <p>FilePreview supports a new preview mode: <code>inline</code>, which displays the document directly within the page, without opening a popup.   </p> <p>This widget is especially useful for side-by-side document viewing and form editing, making it easier to fill out forms based on the contents of the uploaded file.  </p> Standard displayDisplay with Additional widgets <p></p> <p> </p>"},{"location":"new/version2014/#added-text-field-value-truncation","title":"Added: text field \u2013 value truncation","text":"<p>We\u2019ve added support for truncating long values in text field using a frontend constant. If the value exceeds the defined limit, it will be shortened with an ellipsis (...). Hovering over the ellipsis shows the full value in a tooltip.  </p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2014/#added-statsblock-widget-selected-block-highlighting","title":"Added: StatsBlock widget \u2013 selected block highlighting","text":"<p>We\u2019ve added support for highlighting the selected block in StatsBlock. This makes it easier to understand which block was clicked and which data is currently being displayed. It\u2019s especially useful when StatsBlock is used together with another widget (e.g. List widget).</p> <p>Info</p> <p>You can place StatsBlock and List widget either on different views or on the same view. The behavior depends on how they\u2019re configured.  </p> <p>StatsBlock + List widget:  </p> On the same view - highlight supportedOn different views - no highlight <p>If both widgets are placed on the same view, you can link them via a parent-child relationship, without using any drillDowns. In this case, highlighting is available. </p> <p>If the widgets are placed on separate views, highlighting is not supported. You can link them only using a drillDown. </p>"},{"location":"new/version2014/#fixed-form-widget-stable-layout-on-validation","title":"Fixed: Form widget - stable layout on validation","text":"<p>We have corrected layout behavior in multi-column Form widget. Validation messages no longer cause fields to shift. Fields stay aligned, and the overall form structure remains stable and consistent when errors appear.  </p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2014/#added-date-datetime-datetimewithseconds-fields-copy-buttons-in-range-filter","title":"Added: date, dateTime, dateTimeWithSeconds fields \u2013 copy buttons in range filter","text":"<p>We\u2019ve improved the range filter for the following field types: date, dateTime, and dateTimeWithSeconds.  </p> <p>The filter already supported \u201cFrom\u201d and \u201cTo\u201d inputs. This time, we\u2019ve added copy buttons to simplify filling both fields:  </p> <ul> <li><code>&gt;</code> button \u2013 copies the \u201cFrom\u201d value into \u201cTo\u201d  </li> <li><code>&lt;</code> button \u2013 copies the \u201cTo\u201d value into \u201cFrom\u201d  </li> </ul> <p>These buttons are only active when the source field contains a value.  </p> <p>This update brings the same convenient experience to date-based filters as the one we introduced for number, money, and percent fields in our previous release, 2.0.13.  </p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2014/#added-fileupload-field-word-wrapping-support","title":"Added: fileUpload field \u2013 word wrapping support","text":"<p>Long file names in fileUpload field now wrap automatically and fit within the available space. The text also wraps around the extension icon, making the layout more compact and readable.  </p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2014/#fixed-drilldown-updated-display-logic","title":"Fixed: drillDown \u2013 updated display logic","text":"<p>We\u2019ve updated the drillDown display logic to correctly handle cases where the first row has no value in a drillDown field. DrillDown links now appear for all rows with valid values, regardless of the first row. You can now simply set <code>\"drillDown\": true</code> in <code>*.widget.json</code>, and the links will be correctly rendered for all applicable rows.  </p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2014/#fixed-notification-counter-update","title":"Fixed: Notification counter update","text":"<p>The unread notifications counter (bell icon) now updates automatically after deleting unread messages. It always reflects the current number of unread notifications \u2014 including cases when there are none left.  </p>"},{"location":"new/version2014/#fixed-fourthlevelmenu-widget-correct-tab-rendering","title":"Fixed: FourthLevelMenu widget \u2013 correct tab rendering","text":"<p>FourthLevelMenu now shows only tabs from the active screen branch, matching the <code>screen.json</code> structure. Tabs from other branches are no longer displayed outside their defined context.  </p>"},{"location":"new/version2014/#fixed-pagination-default","title":"Fixed: Pagination default","text":"<p>The default <code>count</code> mode is set to <code>nextAndPreviousSmart</code>. For the following widget types, the default mode is <code>nextAndPreviousWithCount</code>:</p> <ul> <li><code>List</code></li> <li><code>CustomGroupingHierarchy</code></li> <li><code>CustomDashboardList</code></li> <li><code>AssocListPopup</code></li> <li><code>PickListPopup</code></li> <li><code>CustomPie1D</code></li> <li><code>CustomColumn2D</code></li> <li><code>CustomLine2D</code></li> <li><code>CustomDualAxes2D</code></li> </ul> <p>The <code>count</code> query is executed only if at least one widget with mode <code>nextAndPreviousWithCount</code> is present on the screen.</p> After Form widgetBefore Form widget <p></p> <p></p>"},{"location":"new/version2014/#added-pagination-switch","title":"Added: Pagination switch","text":"<p>A new option has been added to <code>options -&gt; pagination</code> in the <code>widget.json</code> configuration, controlling the display of the pagination panel.</p> <p>Example configuration:</p> <pre><code>\"options\": {\n\"pagination\": {\n\"enabled\": false\n}\n}\n</code></pre> <ul> <li><code>enabled: false</code> \u2014 the pagination panel and limit selector block will not be displayed, regardless of the number of records.</li> <li><code>enabled: true</code> (or if the option is omitted) \u2014 the standard display logic applies, taking <code>defaultPageLimit</code> into account.</li> </ul> <p></p>"},{"location":"new/version2014/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version2014/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":"<p>We have released two CORE UI versions - 2.5.4 and 2.6.0! </p>"},{"location":"new/version2014/#added-tag-changednow_-the-fields-modified-in-the-current-user-interaction","title":"Added: tag changedNow_ the fields modified in the current user interaction","text":"<p>A new tag, <code>changedNow_</code>, has been introduced. It contains only the fields modified in the current user interaction that have not yet been sent to the backend.</p> After row-meta/ (POST)Before row-meta/ (POST) <p></p> <p></p> <p>When is <code>changedNow_</code> sent?</p> <p>row-meta/ (POST)</p> <ul> <li>When the user exits a field that has <code>forceActive = true</code>.</li> <li>When call FormPopup widget</li> </ul> After BehaviorBefore Behavior Scenario Meta Builder Called Field Update Triggered Editing a field with <code>forceActive</code> \u2705 Yes \u2705 Yes <code>forceActive</code> \u2192 Standard Save button (for fields listed below where <code>row-meta</code> is not triggered until the field is exited) \u274c No \u274c No <code>forceActive</code> \u2192 Custom button (for fields listed below where <code>row-meta</code> is not triggered until the field is exited) \u274c No \u274c No Opening a <code>FormPopup</code> \u2705 Yes \u2705 Yes Clicking only the Standard Save button \u274c No \u274c No Clicking only a Custom button \u274c No \u274c No Clicking Delete \u274c No \u274c No (only deletes the record) Scenario Meta Builder Called Field Update Triggered Editing a field with <code>forceActive</code> \u2705 Yes \u2705 Yes <code>forceActive</code> \u2192 Standard Save button (for fields listed below where <code>row-meta</code> is not triggered until the field is exited) \u2705 Yes (via <code>/row-meta</code> \u2192 followed by save request) Update occurs within the <code>/row-meta</code> event <code>forceActive</code> \u2192 Custom button (for fields listed below where <code>row-meta</code> is not triggered until the field is exited) \u2705 Yes (via <code>/row-meta</code> \u2192 followed by custom action) Update occurs within the <code>/row-meta</code> event Opening a <code>FormPopup</code> \u2705 Yes \u2705 Yes Clicking only the Standard Save button \u274c No \u274c No Clicking only a Custom button \u274c No \u274c No Clicking Delete \u274c No \u274c No (only deletes the record) <p>Field Type Behavior</p> <p>Legend:</p> <ul> <li>\u2705 \u2014 <code>forceActive</code> (<code>row-meta</code>) is triggered immediately on value selection.</li> <li>\u274c \u2014 <code>row-meta</code> is not triggered until a button is clicked or user leaves the field.</li> <li><code>noValid</code> \u2014 field does not support in-place value changes.</li> </ul> Field Type <code>forceActive</code> triggered immediately? Notes <code>input</code> \u274c No Triggered on click outside the field or on a button <code>date</code> \u2705 Yes <code>dateTime</code> \u2705 Yes <code>dateTimeWithSeconds</code> \u2705 Yes <code>number</code> \u274c No Triggered on click outside the field or on a button <code>percent</code> \u274c No Triggered on click outside the field or on a button <code>hidden</code> <code>noValid</code> Not editable <code>text</code> \u274c No Triggered on click outside the field or on a button <code>radio</code> \u2705 Yes <code>checkbox</code> \u2705 Yes <code>money</code> \u274c No <code>dictionary</code> \u2705 Yes <code>fileUpload</code> \u2705 Yes <code>pickList</code> \u2705 Yes <code>inlinePickList</code> \u2705 Yes Save only triggered if an item is picked <code>hint</code> <code>noValid</code> Not editable <code>multifield</code> \u2705 Yes <code>multivalueHover</code> <code>noValid</code> Not editable <code>multivalue</code> \u2705 Yes <code>multipleSelect</code> \u2705 Yes <code>suggestionPickList</code> \u2705 Yes Save only triggered if an item is picked"},{"location":"new/version2014/#added-action-buttons-improved-logic-for-repeated-actions","title":"Added: action buttons \u2013  improved logic for repeated actions","text":"<p>We\u2019ve added a new logic to prevent accidental repeated execution of the same action. If a button is clicked while its action is already in progress, it becomes temporarily inactive and shows a spinner. Other actions remain available as usual.  </p> AfterBefore <p>Repeated clicks are ignored while the action is running \u2014 the action is only called once </p> <p>On double-click, the same action (while still in progress) could be triggered twice  </p>"},{"location":"new/version2014/#fixed-dictionary-field-support-for-filtering-with-special-characters","title":"Fixed: Dictionary field \u2013 support for filtering with special characters","text":"<p>Filtering by dictionary values that include special characters (e.g. \"\" ) is now fully supported. Results are displayed correctly in all cases.  </p> AfterBefore <p>Filtering by values with special characters applies correctly. </p> <p>Filtering by values with special characters did not apply.   </p>"},{"location":"new/version2014/#other-changes_1","title":"Other Changes","text":"<p>See cxbox-ui 2.6.0 changelog.</p>"},{"location":"new/version2014/#cxbox-400-m18-core","title":"CXBOX 4.0.0-M18 (Core)","text":"<p>We have released a new 4.0.0-M18 CORE version.</p>"},{"location":"new/version2014/#added-tag-changednow_-the-fields-modified-in-the-current-user-interaction_1","title":"Added: tag changedNow_ the fields modified in the current user interaction","text":"<p>Before</p> <p>Previously, the frontend included all previously changed fields in the <code>data</code> tag, rather than only those modified in the current user action. This made it difficult to determine which fields were just now changed by the user.</p> <p>After</p> <p>A new tag, <code>changedNow_</code>, has been introduced. It contains only the fields modified in the current user interaction that have not yet been sent to the backend.</p> <p>New Methods for Tracking Field Changes on the Client (changedNow_)</p> <p>We recommend using this method only for updating values and placing it at the beginning of the <code>buildRowDependentMeta</code> method.</p> <p>To support tracking of field changes on the UI, the following method has been introduced:</p> <pre><code>public &lt;V&gt; boolean isFieldChangedNow(RowDependentFieldsMeta&lt;T&gt; fields, DtoField&lt;? super T, V&gt; field)\n</code></pre> <p>Description: Checks if a specific field was modified during the current UI interaction, based on the contents of the <code>changedNow_</code> tag.</p> <p>Example Usage:</p> <p><code>buildRowDependentMeta</code> </p> <pre><code>if (fields.isFieldChangedNow(fields, MyExampleDTO_.country)) {\nif (fields.getCurrentValue(MyExampleDTO_.country).isEmpty()) {\nfields.setCurrentValue(MyExampleDTO_.region, null);\nfields.setCurrentValue(MyExampleDTO_.street, null);\n} else if (Objects.equals(fields.getCurrentValue(MyExampleDTO_.country).orElse(null), CountryEnum.BELARUS)) {\nfields.setCurrentValue(MyExampleDTO_.region, RegionEnum.MINSK);\nfields.setCurrentValue(MyExampleDTO_.street, \"Avenue Nezavisimosti\");\n} else if (Objects.equals(fields.getCurrentValue(MyExampleDTO_.country).orElse(null), CountryEnum.RUSSIA)) {\nfields.setCurrentValue(MyExampleDTO_.region, RegionEnum.MOSCOWSKAYA);\nfields.setCurrentValue(MyExampleDTO_.street, \"Tverskaya street\");\n}\n}\n</code></pre>"},{"location":"new/version2014/#added-drilldowns-with-field-based-filter-builder","title":"Added: Drilldowns with field-based filter \u2013 builder","text":"<p>A new method <code>setDrilldownWithFilter</code> has been implemented, enabling drill-down functionality with filtering capabilities for a specific field. You can use it with all field types by adding it directly to the builder. This makes drill-down link generation much simpler and more intuitive.</p> <pre><code>public final void setDrilldownWithFilter(DtoField&lt;? super T, ?&gt; field,\nDrillDownTypeSpecifier drillDownType, String drillDown,\nConsumer&lt;FC&gt; fc) </code></pre> <p>Example Usage:</p> <p><code>buildRowDependentMeta</code></p> <pre><code>fields.setDrilldownWithFilter(\nMyExampleWithDrilldownDTO_.customFieldHint, DrillDownType.INNER, \"/screen/MyExample/view/MyExamplelist/\",fc-&gt;\nfc.add(\nCxboxMyExampleController.myexample,\nMyExampleWithDrilldownDTO.class,\nfb -&gt; {\nfb.input(MyExampleWithDrilldownDTO_.region,\nfields.getCurrentValue(MyExampleWithDrilldownDTO_.region).orElse(null));\nfb.multiValue(MyExampleWithDrilldownDTO_.street,\nfields.getCurrentValue(MyExample4300WithDrilldownDTO_.street).orElse(null));\n}\n)\n);\n</code></pre>"},{"location":"new/version2014/#added-core-support-for-officially-introduced-in-previous-releases-widget-and-field-types-moved-from-project","title":"Added: Core support for officially introduced in previous releases widget and field types (moved from project)","text":"<p>Delete the classes from the project, or, if you want to keep the logic description of the new widgets at the project level, you need to add the new widget type to the project files FilePreview widget.</p> <ul> <li>moved \"multipleSelect\" support from project to core.</li> <li>moved \"suggestionPickList\" support from  project to core.</li> <li>moved prev releases officially introduced widget types from to core.</li> <li>merged InfoFieldExtractor.java and SimpleFormFieldExtractor.java to new single default SimpleFieldExtractor.java</li> </ul>"},{"location":"new/version2014/#other-changes_2","title":"Other Changes","text":"<p>See cxbox 4.0.0-M18 changelog.</p>"},{"location":"new/version2014/#cxbox-plugin","title":"CXBOX plugin","text":""},{"location":"new/version2014/#added-intellij-20251-support","title":"Added: IntelliJ 2025.1+ support","text":"<p>Installing the Platform Tools Plugin</p> <p>The plugin now has separate builds for different versions of JetBrains IDEs. Make sure the correct update repository is configured.</p> <p>1) Open the Plugin Manager</p> <ul> <li>In your JetBrains IDE, go to <code>Help \u2192 Find Action</code></li> <li>Type <code>Plugins</code> and open the corresponding option</li> </ul> <p>2) Add the Plugin Repository</p> <ul> <li>In the Plugins window, click the \u2699\ufe0f (gear icon) \u2192 <code>Manage Plugin Repositories...</code></li> <li>Click \u2795</li> <li> <p>Enter the following URL:   <pre><code>https://document.cxbox.org/plugin/updatePlugins.xml\n</code></pre></p> </li> <li> <p>Click OK</p> </li> </ul> <p>3) Install the Plugin</p> <ul> <li>Switch to the <code>Marketplace</code> tab</li> <li>Search for Platform Tools</li> <li>Click Install</li> <li>After installation, click OK</li> </ul> <p>4) Restart the IDE</p>"},{"location":"new/version2014/#added-code-generation-support-added-for-fields-with-type-time-in-widgetjson","title":"Added: Code generation support added for fields with type <code>Time</code> in <code>.widget.json</code>.","text":"<p>Works with core 4.0.0-M17 and the versions above.  </p>"},{"location":"new/version2014/#code-generation","title":"Code Generation","text":"<p>Added support for code generation of fields with the <code>time</code> type. You can now:</p> <ul> <li>Generate a <code>time</code> field with the default format <code>hh:mm:ss</code>;</li> <li>Specify a custom time format by selecting the desired pattern from the list of supported formats.</li> </ul> timetime with format <p></p> <p></p>"},{"location":"new/version2014/#autocomplete","title":"Autocomplete","text":"<p>Autocomplete is now available for <code>time</code> fields. When entering a format, you'll see a list of officially supported patterns, making it easier and faster to configure the desired time format.</p> <p></p>"},{"location":"new/version2014/#added-type-checking-for-fields-containing-pickmap","title":"Added: type checking for fields containing <code>pickMap</code>","text":"<p>For fields containing <code>pickMap</code>, type checking was added to ensure Java type consistency of <code>pickMap</code> parameters (excluding the <code>id</code> field).</p> <p>Validation is implemented for the following field types:</p> <ul> <li><code>inline-pickList</code></li> <li><code>pickList</code></li> <li><code>suggestionPickList</code></li> </ul> <p></p>"},{"location":"new/version2014/#added-inspection-and-quick-fix-support-for-the-new-api","title":"Added: inspection and quick-fix support for the new API","text":"<p>As part of the core 4.0.0-M15 release, used Lombok\u2019s @RequiredArgsConstructor and @Getter (meta,dao)  for AnySourceVersionAwareResponseService and @Getter (meta) VersionAwareResponseService instead of explicitly writing a constructor. Added a quick-fix for the plugin to ensure compatibility with the new API and simplify the migration to the updated service implementation.</p> <p> </p>"},{"location":"new/version2014/#added-searchparameter-if-no-explicit-parameter-is-defined","title":"Added: <code>@SearchParameter</code>: if no explicit parameter is defined","text":"<p>Now, if no parameter is specified for @SearchParameter,  through to the entity with the corresponding field name.</p> <p></p>"},{"location":"new/version2014/#added-autocomplete-ctrl-click-navigation-and-inspection-for-defaultview","title":"Added: Autocomplete, Ctrl-click navigation and inspection for defaultView","text":"<p>Autocomplete, Ctrl-click navigation and inspectio support added for the <code>defaultView</code> property in <code>.screen.json</code></p>"},{"location":"new/version2014/#autocomplete_1","title":"Autocomplete:","text":""},{"location":"new/version2014/#ctrl-click-navigation","title":"Ctrl-click navigation","text":""},{"location":"new/version2014/#inspection","title":"Inspection","text":""},{"location":"new/version2014/#refactoring","title":"Refactoring","text":""},{"location":"new/version2014/#fixed-code-generation-for-fields-with-type-picklist-and-inline-picklist","title":"Fixed: code generation for fields with type <code>Picklist</code> and <code>inline-pickList</code>","text":"<p>For fields with type <code>Picklist</code> and <code>inline-pickList</code> in <code>.widget.json</code> code generation fixed: </p> <ul> <li> <p>Field filtering added to the popup for selecting fields when creating a picklist.   Now only fields of the following types are displayed:</p> <ul> <li><code>String</code></li> <li><code>LocalDateTime</code></li> <li><code>Long</code></li> <li><code>Double</code></li> <li><code>Enum</code></li> <li><code>Dictionary extension</code></li> <li><code>Boolean</code></li> </ul> </li> <li> <p>Autogeneration of picklist configuration is now supported only for the above simple field types.   Other field types can be added manually via the picklist widget.</p> </li> </ul> <p>Autogeneration message: Autogeneration is supported for simple field types: String, LocalDateTime, Long, Double, Enum, Dictionary extension, Boolean. Other types can be added manually via the picklist widget.</p> <p></p>"},{"location":"new/version2014/#cxbox-documentation","title":"CXBOX documentation","text":""},{"location":"new/version2014/#added-pagination-hidelimitoptions-updated","title":"Added: Pagination - hideLimitOptions updated","text":"<p>We have updated the Pagination article, hideLimitOptions section.  </p>"},{"location":"new/version2015/","title":"2.0.15","text":"<ul> <li> <p>cxbox/demo 2.0.15 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M19 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.6.1 git, release notes, npm</p> </li> <li> <p>cxbox/code-samples 2.0.15 git, release notes </p> </li> <li> <p>cxbox/intellij-plugin 2.0.0 Jetbrains Marketplace, cxbox repo (recommended)</p> </li> </ul>"},{"location":"new/version2015/#key-updates-august-2025","title":"Key updates August 2025","text":""},{"location":"new/version2015/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version2015/#added-notification-banner-adaptive-button-display","title":"Added: notification banner \u2013 adaptive button display","text":"<p>We\u2019ve made the notification banner responsive to long button texts, so button labels are no longer cut off and the popup resizes accordingly.</p> AfterBefore <p></p> <p></p>"},{"location":"new/version2015/#added-collapsedcondition-tag","title":"Added:  collapsedCondition tag","text":"<p>Now you can set the collapse state when opening the screen by default.</p> <p>In view.json, each widget group now has a collapsedCondition tag.  </p> collapsedCondition: false (default)collapsedCondition: true <p>The widget group appears expanded. </p> <p>The widget group is displayed in a collapsed state as soon as the page is loaded. Only the main widget header remains visible. </p>"},{"location":"new/version2015/#fixed-validation-handling-for-required-disabled-and-hidden-fields","title":"Fixed: validation handling for required disabled and hidden fields","text":"<p>We have improved validation logic for disabled and hidden fields to correctly display messages when required fields are empty. Now the field validation is visible to the user.</p> disabledhidden <p></p> <p></p>"},{"location":"new/version2015/#fixed-cancel-action-after-validation-warning","title":"Fixed: cancel action after validation warning","text":"<p>We have improved the cancel action logic for cases when a form is blocked by validation. Now, if the system warns about required fields being left empty, users can still cancel and discard all changes.</p> AfterBefore <p></p> <p> </p>"},{"location":"new/version2015/#added-multivalue-field-updated-display","title":"Added: multivalue field \u2013 updated display","text":"<p>We\u2019ve updated the display of the multivalue field. Changes include adjustments to field height, chip size, folder icon display, and more to ensure visual consistency with other field types.</p>"},{"location":"new/version2015/#fixed-multivalue-field-correct-display-of-values","title":"Fixed: multivalue field \u2013 correct display of values","text":"<p>We've improved the logic behind displaying values in multivalue fields, ensuring that each row now shows its own correct data, regardless of the selected row.</p>"},{"location":"new/version2015/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version2015/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":""},{"location":"new/version2015/#fixed-error-popups-were-not-shown-for-fileupload","title":"Fixed: Error popups were not shown for fileUpload","text":"<p>Error popups were not shown when for fileUpload an error requiring user notification occurred \u2014 the message was logged to the console. Now the popup is displayed with the error text.</p> AfterBefore <p></p> <p></p>"},{"location":"new/version2015/#other-changes_1","title":"Other Changes","text":"<p>See cxbox-ui 2.6.1 changelog.</p>"},{"location":"new/version2015/#cxbox-400-m19-core","title":"CXBOX 4.0.0-M19 (Core)","text":"<p>We have released a new 4.0.0-M19 CORE version.</p>"},{"location":"new/version2015/#fixed-missing-roles-in-the-getsessionuserroles","title":"Fixed: Missing roles in the getSessionUserRoles","text":"<p>Added handling for the situation of missing roles in the getSessionUserRoles method.</p> afterbefore <p></p> <p></p>"},{"location":"new/version2015/#fixed-incorrect-behavior-of-getcurrentvalue-with-jsonserialize","title":"Fixed: Incorrect behavior of getCurrentValue with @JsonSerialize","text":"<p>We fixed the incorrect behavior of getCurrentValue with fields annotated with @JsonSerialize.</p> afterbefore <p></p> <p></p>"},{"location":"new/version2015/#fixed-logic-for-elementcollection-annotation-has-been-changed","title":"Fixed: Logic for @ElementCollection annotation has been changed","text":"<p>The logic for searching fields in the database with the @ElementCollection annotation has been changed:</p> <p>If a DTO field is annotated with @SearchParameter(name = \"joinTable.elementCollectionField\"), then filtering will perform a join of the entities that are present in the chain.</p> <p>Example of a query for count: <pre><code>select count(rt_1.id)\nfrom root_entity rt_1\nwhere rt_1.id in ((select rt_2.id\nfrom root_entity rt_2\njoin join_table jt on jt.id = rt_2.join_table_id\njoin element_collection_table ect on jt.id = ect.join_table_id\nwhere ect.value in ))\n</code></pre></p>"},{"location":"new/version2015/#other-changes_2","title":"Other Changes","text":"<p>See cxbox 4.0.0-M19 changelog.</p>"},{"location":"new/version2015/#cxbox-plugin","title":"CXBOX plugin.","text":"<p>We have released two versions - 2.0.0, 1.9.0</p>"},{"location":"new/version2015/#added-intellij-20252-support-added-with-190","title":"Added: IntelliJ 2025.2+ support added. (with 1.9.0)","text":"<p>IntelliJ 2025.2+ support added.</p>"},{"location":"new/version2015/#added-added-generation-bc-from-widget-with-200","title":"Added: Added generation bc from widget (with 2.0.0)","text":"<p>Added generation bc from widget.</p> <p></p> <p>You can create a new Service, Entity, or DTO based on the name of your BK, or you can use existing Services, Entities, or DTOs</p> <p>Select Parameters:</p> <p></p> <p>Example:</p> <p></p>"},{"location":"new/version2015/#added-added-to-check-the-sum-of-span-values-in-optionslayoutrowscols-with-200","title":"Added: Added to check the sum of span values in options.layout.rows.cols  (with 2.0.0)","text":"<p>Form and Info widgets, a validation was added to check that the sum of span values in options.layout.rows.cols does not exceed the grid limit (24)</p> <p></p>"},{"location":"new/version2015/#fixed-incorrect-triggering-of-inspection-for-ss-with-190","title":"Fixed: Incorrect triggering of inspection for ss (with 1.9.0)","text":"<p>We fixed the <code>SearchParameterAnnotationCorrectEndingInspection</code>, which was working incorrectly for the <code>multipleSelect</code> field.</p> afterbefore <p></p> <p></p>"},{"location":"new/version2015/#cxbox-documentation","title":"CXBOX documentation","text":""},{"location":"new/version2015/#added-widget-groupinghierarchy-aggregate","title":"Added: widget GroupingHierarchy - Aggregate","text":"<p>We have provided a description of Aggregate widget <code>GroupingHierarchy</code> Aggregate </p>"},{"location":"new/version2015/#added-multi-upload-files","title":"Added: Multi-upload files","text":"<p>We have provided a description of Multi-upload files.</p>"},{"location":"new/version202/","title":"v2.0.2","text":"<ul> <li> <p>cxbox/demo 2.0.2 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M4 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.0.0 git, release notes, npm</p> </li> </ul>"},{"location":"new/version202/#key-updates-july-2024","title":"Key updates July 2024","text":""},{"location":"new/version202/#cxbox-demo-code-samples","title":"CXBOX (Demo, Code Samples)","text":""},{"location":"new/version202/#creating-a-line-in-the-picklist-popup","title":"Creating a Line in the PickList Popup","text":"<p>We have added the ability to create a line directly within the picklist popup when clicking \"Add\" on the sheet.</p>"},{"location":"new/version202/#added-new-pagination-modes","title":"Added new pagination modes","text":"<p>The navigation arrows and limit settings block are removed if the number of records is less than the limit. Pagination modes:</p> <p>1) nextAndPreviousWithHasNext  Live Sample \u00b7</p> <p>    Next button availability logic:</p> <ul> <li>If hasNext (from /data) is true, Next button is available.</li> <li>If hasNext (from /data) is false, Next button is disabled.</li> </ul> <p>2) nextAndPreviousSmart    Live Sample \u00b7</p> <p> </p> <p>Next button availability logic:    If the number of records received from /data is less than _limit, Next button is disabled.</p> <p>Disadvantages of this mode:</p> <ul> <li>If the number of records is a multiple of _limit, a single jump to a page with no records will occur, since it is impossible to determine whether this is the last page.</li> <li>If the number of records is a multiple of _limit, a request for the next page will be sent even if it does not exist. If this request returns an error, it should be handled with a try {} catch {} block.</li> </ul> <p>3) Default nextAndPreviousWithCount     The functionality remains the same.</p>"},{"location":"new/version202/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p> <p>see cxbox-code-samples changelog</p>"},{"location":"new/version202/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":""},{"location":"new/version202/#fixed-saving-settings","title":"Fixed saving settings","text":"<p>Fixed the issue with saving settings when adding an option to the meta: add.fields.</p>"},{"location":"new/version202/#cxbox-400-m4-core","title":"CXBOX 4.0.0-M4  (Core)","text":""},{"location":"new/version202/#heap-dump-export","title":"Heap dump export","text":"<p>Fix heap dump export with actuator</p>"},{"location":"new/version202/#added-an-explicit-qualifier","title":"Added an explicit Qualifier","text":"<p>Fixed conflict between mappers (cxboxObjectMapper and businessComponentMapper)</p>"},{"location":"new/version202/#other-changes_1","title":"Other Changes","text":"<p>see cxbox changelog</p>"},{"location":"new/version203/","title":"v2.0.3","text":"<ul> <li> <p>cxbox/demo 2.0.3 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M5 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.0.0 git, release notes, npm</p> </li> </ul>"},{"location":"new/version203/#key-updates-august-2024","title":"Key updates August 2024","text":""},{"location":"new/version203/#cxbox-400-m5-core","title":"CXBOX 4.0.0-M5  (Core)","text":""},{"location":"new/version203/#dependencies-have-been-changed","title":"Dependencies have been changed","text":"<ul> <li>bumped org.springframework.boot/spring-boot-starter-parent to 3.2.5 from 3.2.4</li> <li>removed org.apache.commons/commons-text dependency</li> <li>removed de.odysseus.juel/* dependencies</li> <li>removed commons-io/commons-io dependency</li> <li>removed org.glassfish/javax.el dependency</li> <li>removed java.security.AccessController class usage</li> <li>removed jenkins ci pipeline file (GitHub ci is used instead)</li> <li>removed liquibase-maven-plugin dependency</li> <li>removed com.google.auto.service/auto-service dependency</li> <li>bumped jacoco-maven-plugin to 0.8.11 from 0.8.14</li> <li>removed com.sun.xml.bind/jaxb-impl dependency</li> <li>removed com.sun.xml.bind/jaxb-core dependency</li> <li>removed maven-gpg-plugin dependency and release profile from cxbox-starter-parent (they will no loner be visible in customer projects, so confusion is reduced)</li> <li>fixed dependency-review-config file folder</li> <li>removed com.google/guava dependency</li> <li>removed commons-collections4 dependency</li> <li>change commons-lang3 dependency version to be managed by spring-boot</li> </ul> <p>Only 2 dependencies versions are now explicitly set in cxbox core <pre><code>    &lt;hibernate-commons-annotations.version&gt;6.0.6.Final&lt;/hibernate-commons-annotations.version&gt;\n&lt;javapoet.version&gt;1.13.0&lt;/javapoet.version&gt;\n</code></pre> All other dependencies versions are now managed by <pre><code>&lt;parent&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n&lt;version&gt;3.2.5&lt;/version&gt;\n&lt;/parent&gt;\n</code></pre> so for all dependencies (except javapoet and hibernate-commons-annotations):</p> <ul> <li>core level: security issues can now be easily solved with just bumping spring-boot version in core now</li> <li>project level: dependencies versions can be overriden on project level just like in usual spring-boot app (see)</li> </ul>"},{"location":"new/version203/#other-changes","title":"Other Changes","text":"<p>see cxbox changelog</p>"},{"location":"new/version203/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version203/#front-dependencies-have-been-changed","title":"Front. Dependencies have been changed","text":"<ul> <li>axios:   1.6.0</li> <li>rc-select: 14.11.0</li> <li>@types/lodash.debounce: 4.0.9</li> </ul>"},{"location":"new/version203/#new-version-core","title":"New version core","text":"<p>New version core  CXBOX 4.0.0-M5</p>"},{"location":"new/version203/#added-siem-integration-example","title":"Added SIEM integration example","text":"<p>Added an example demonstrating how to log <code>CrudmaAction</code> along with the associated data.</p>"},{"location":"new/version203/#fixed-errors-for-showcondition","title":"Fixed errors for showCondition.","text":"<p>Resolved an error that occurred when two widgets were present on the screen in one BC with showCondition, where one widget was hidden and the other was visible</p>"},{"location":"new/version203/#fixed-errors-encountered-during-drilldown-transitions","title":"Fixed errors encountered during drilldown transitions.","text":"<p>1)  Fixed an error that occurred after switching between tabs when navigating to a screen via a link from another screen, where both the source and destination links had different BC.</p> <p></p> <p>2) Resolved an error that occurred when navigating between screens via a link, where the source and target screens contained multiple widget sets based on different BCs.</p> <p></p>"},{"location":"new/version203/#added-the-ability-to-switch-to-a-hidden-view-within-tabs","title":"Added the ability to switch to a hidden view within tabs.","text":"<p>Added the ability to switch to a hidden view within tabs.</p>"},{"location":"new/version203/#other-changes_1","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version204/","title":"v2.0.4","text":"<ul> <li> <p>cxbox/demo 2.0.4 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M6 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.0.0 git, release notes, npm</p> </li> <li> <p>Platform Tools 1.7.5</p> </li> </ul>"},{"location":"new/version204/#key-updates-august-2024","title":"Key updates August 2024","text":""},{"location":"new/version204/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version204/#new-version-core","title":"New version core","text":"<p>New version core  CXBOX 4.0.0-M6</p>"},{"location":"new/version204/#file-api-authorization","title":"File API authorization","text":"<p>Added: File upload is now available only for authorized users. An authorization token is passed while uploading a single file or multiple files. Otherwise, file upload option will not be available. The same logic is applicable to file preview and file download processes. </p>"},{"location":"new/version204/#creating-a-line-in-the-inlinepicklist-popup","title":"Creating a Line in the InlinePickList Popup","text":"<p>Added: We have extended the possibility of creating a new line in picklist and inline-picklist fields. One can now create new row in picklist/inline-picklist during parent edit/creation process (Parent force save is not triggered anymore. As a result required fields do not block row creation in picklist anymore, parent changes can be correctly cancelled even after new row creation in picklist and so on). New special method for fetching parent DTO field with single line of code introduced</p>"},{"location":"new/version204/#tab-functionality","title":"Tab functionality","text":"<p>Added: we added type tag for different tab schemas (just like field types and widget types). Default tab schema has type='standard' now. Few fixes in it:</p> <p>1) Fixed: resolved an error that occurred when navigating between screens via a link to a related entity on the same screen</p> <p></p> <p>2) Fixed: the work of third-level tabs</p> <p></p> <p>Fulltextsearch </p> <p>3) Fixed: default display hidden view of the first level</p> <p>We have added a restriction for displaying hidden views in navigation. Now, if a hidden view is specified in the metadata, it will not be displayed when the screen is opened. For the application to work correctly, the following rule must be observed: at each navigation level (aggregate or single), there must be at least one visible view. </p>"},{"location":"new/version204/#added-fulltext-search-option-in-pop-up-picklistpopup-and-inlinepicklist","title":"Added fulltext search option in pop-up (pickListPopup and inlinePickList)","text":"<p>A search bar has been added.When the user types in the full text search input area, then widget filters the rows that match the search query (search criteria is configurable and will usually check if at least one column has corresponding value). This feature makes it easier for users to quickly find the information they are looking for within a List widget.</p>"},{"location":"new/version204/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version204/#cxbox-400-m6-core","title":"CXBOX 4.0.0-M6  (Core)","text":""},{"location":"new/version204/#creation-of-new-record-directly-in-popup-picklist-inlinepicklist-and-so-on","title":"Creation of new record directly in Popup (picklist, inlinePicklist and so on)","text":"<ul> <li>Added: abstractAnySourceResponseService and AbstractResponseService now have new method <code>getParentField(&lt;PARENT_DTO&gt;_.&lt;parent_field&gt;, bc)</code> to get Parent bc DTO field with single line of code</li> <li>Added: support of creation new records directly in popups (picklist and so on) without force saving parent bc. AbstractAnySourceResponseService and AbstractResponseService can be used for this popups services with the only restriction -- one must use new method <code>getParentField</code> instead of <code>repository.findById(bc.getParentIdAsLong())</code> to get parent values if needed</li> <li>Fixed: BcStateAware now cleans cache only for exact bc (for user session), when terminal action request completed (instead of whole cache for user session)</li> </ul>"},{"location":"new/version204/#lov-sorting-in-filter-and-edit-dropdowns-by-display_order","title":"LOV sorting in filter and edit dropdowns by display_order","text":"<ul> <li>Added: java doc for <code>setDictionaryTypeWithAllValues</code> and <code>setAllFilterValuesByLovType</code> methods describing, that this methods sort items by display_order, then by key. Deleted duplication methods <code>setAllFilterValuesByLovTypeOrdered</code> and <code>setDictionaryTypeWithAllValuesOrdered</code></li> <li>Fixed: <code>setAllFilterValuesByLovType</code> method signature - redundant argument fields removed</li> <li>Fixed: <code>setDictionaryTypeWithAllValues</code> method signature - redundant argument fields removed</li> <li>Fixed: LOV dictionary loader :   NOW: sorting items by display_order, then by key (display_order can be null)   WAS: sorting items by display_order (display_order could not be null)</li> </ul>"},{"location":"new/version204/#other-changes_1","title":"Other Changes","text":"<p>see cxbox changelog</p>"},{"location":"new/version204/#cxbox-plugin","title":"CXBOX plugin","text":"<p>We've updated the plugin to version 1.7.5.</p>"},{"location":"new/version204/#new-for-new-field-code-generation-plugin-uses-setifchanged","title":"New. For new field code generation plugin uses setIfChanged","text":"<p>For new field code generation plugin uses setIfChanged single line mapping where possible</p>"},{"location":"new/version204/#fix-generation-of-picklistinline-picklist-fields-types-unique-name","title":"Fix. Generation of pickList/inline-pickList fields types  unique name","text":"<p>For new field code generation of pickList/inline-pickList fields types plugin now generates unique name for popup corresponding classes</p>"},{"location":"new/version204/#fix-for-new-field-code-generation-when-you-do-not-have-dto_-class","title":"Fix. For new field code generation when you do not have DTO_ class","text":"<p> For new field code generation when you do not have DTO_ class (generated with maven plugin), then plugin auto generates DTO_ for you (also it will now automatically create auto generated sources folder in /target and add it as sources root to IDE)</p>"},{"location":"new/version205/","title":"2.0.5","text":"<ul> <li> <p>cxbox/demo 2.0.5 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M8 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.2.0 git, release notes, npm</p> </li> </ul>"},{"location":"new/version205/#key-updates-september-2024","title":"Key updates September 2024","text":""},{"location":"new/version205/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":""},{"location":"new/version205/#redesign-of-saving-context-for-tabs","title":"Redesign of saving context for tabs","text":"<p>If the view change was triggered by switching tabs:</p> <ol> <li>Pagination, data, and rowMeta will remain unchanged. Data will only be requested if it hasn\u2019t been loaded yet or if the parent bc cursor has changed. There will no longer be a re-request of data for all bc.</li> <li>When fetching data for the parent bc, an additional check will remove outdated data for child bookmakers from the store.</li> <li>The frequency of bcChangeCursors calls has been reduced.</li> </ol> <p></p> <p></p>"},{"location":"new/version205/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version205/#new-version-core","title":"New version core","text":"<p>New version core  CXBOX 4.0.0-M8</p>"},{"location":"new/version205/#fixed-user-roles","title":"Fixed User Roles","text":"<p>Fixed the display of multiple roles and the ability to switch between them.</p> <p></p>"},{"location":"new/version205/#fixed-content-disposition-header-handling","title":"Fixed Content-Disposition Header Handling","text":"<p>We have fixed the handling of the <code>Content-Disposition</code> header to ensure correct file display during preview. Changes made:  Frontend: The correct <code>Content-Disposition</code> header is now passed. Backend: Updated the <code>cxbox</code> controller to handle the <code>inline</code> parameter.    The header is set as follows: - <code>Content-Disposition</code>: <code>inline</code> when <code>preview=true</code>. - <code>Content-Disposition</code>: <code>attachment</code> when <code>preview=false</code> or by default.   The Result:  For file preview requests, the header will be <code>inline</code>. For file downloads or when the parameter is missing, the header will be <code>attachment</code>.</p> <p></p>"},{"location":"new/version205/#added-text-customization-in-preactionconfirm-for-buttons-and-title","title":"Added text customization in PreAction.Confirm for buttons and title","text":"<p>We have added the ability to set custom text for confirmation title and buttons.</p> <p></p>"},{"location":"new/version205/#updated-the-logic-of-text-colorization-width","title":"Updated the logic of text colorization width","text":"<p>We have updated the text colorization logic. Now, if the string exceeds 100 pixels in length, the highlight dynamically adjusts to the string length, preventing the text from overflowing beyond the highlighted area.</p> <p></p>"},{"location":"new/version205/#fixed-fields-alignment-in-the-multi-column-form-widget","title":"Fixed fields' alignment in the multi-column form widget","text":"<p>We have resolved the alignment issue with fields in the multi-column form widget. The fields are now properly aligned across columns.</p> <p></p>"},{"location":"new/version205/#fixed-the-display-of-grouping-columns-in-grouping-hierarchy-list-widget-mode","title":"Fixed the display of grouping columns in Grouping Hierarchy (list widget mode)","text":"<p>We have added a condition to ensure that hidden fields in hierarchical mode are properly displayed in list widget mode.</p> <p></p>"},{"location":"new/version205/#cxbox-400-m8-core","title":"CXBOX 4.0.0-M8  (Core)","text":""},{"location":"new/version205/#added-superbuilder-to-baseentity","title":"Added SuperBuilder to BaseEntity","text":"<p>The <code>@SuperBuilder</code> annotation was added to the <code>BaseEntity</code> and <code>AbstractEntity</code> classes. This change was made to align these classes with the DTO classes, where this annotation had already been introduced.</p>"},{"location":"new/version205/#added-the-sethiddensetnothidden-hidden-method","title":"Added the setHidden,setNotHidden, hidden method","text":"<p>We standardized the behavior of the <code>hidden</code> method to align with how the <code>required</code> method works. Before: <pre><code>fields.get(MyDTO_.fullName).setHidden(false);  </code></pre> Now: <pre><code>fields.setHidden(MyDTO_.fullName);\n</code></pre></p> <p>The old methods are marked as <code>deprecated</code>.  </p> <p> </p>"},{"location":"new/version205/#flush-and-setwithfirstlevelcache-return-the-entity","title":"Flush and setWithFirstLevelCache return the entity","text":"<p>The logic of the save method for creating and updating entities has been changed. Instead of using the method <code>flush(bc)</code>, a simpler version without parameters <code>flush()</code> is now used. This allows for inlining the result in the return statement, and the method automatically determines whether to perform an update or create operation.  </p> <p>Critical changes: If the class implements the <code>AnySourceBaseDAO</code> interface, the return type must be changed from void to the entity type, so that the method can return the object after <code>flush()</code> is executed.  </p> <p>Before: <pre><code>this.getBaseDao().flush(bc);\n</code></pre> After: <pre><code>this.getBaseDao().flush();\n</code></pre></p> <p>This simplifies the code and allows the method to be directly inlined in the <code>return</code>, while still automatically determining the type of operation (create or update).</p>"},{"location":"new/version205/#added-the-setcurrentvalue-generics-method","title":"Added the setCurrentValue generics method","text":"<p>The <code>setCurrentValue</code> methods in DTOs have been updated to use generics, improving type checking and ensuring that passed values conform to expected types, which helps prevent type-related errors.  </p> <p>Changes: Before: <pre><code>fields.get(final DtoField&lt;? super T, ?&gt; field).setCurrentValue(Object object);\n</code></pre></p> <p>After: <pre><code>fields.setCurrentValue(final DtoField&lt;? super T, E&gt; field, E value);\n</code></pre></p>"},{"location":"new/version205/#added-the-ability-to-disable-sorting-for-a-field","title":"Added the ability to disable sorting for a field","text":"<p>The ability to control sorting of table fields has been introduced, allowing sorting to be enabled or disabled on a per-field basis.  </p> <p>Info</p> <p>By default, <code>sortEnabledDefault</code> parameter is set to <code>false</code>. If you want sorting to be enabled across the entire project, you need to set <code>sortEnabledDefault = true</code> in the <code>MetaConfigurationProperties</code>.   </p> <p>Changes:     1. Field-Level Sorting Control: the sorting behavior can be managed for each field independently. You can enable sorting on specific fields using the <code>fields.enableSort()</code> method on the backend. If a field is set as sortable=true, the sorting icon will appear, allowing users to add or change sorting. If sortable=false, the icon will either be hidden or inactive.     2. Default Sorting: fields with default sorting remain active, even if not sortable. Users can view it but cannot modify it unless the field is sortable.     3. Multi-Field Sorting:         - Multiple fields can be sorted via default settings, but in the UI, sorting can only be applied to one sortable field.         - Sorting icons for sortable and non-sortable fields are visually distinct.</p> <p></p>"},{"location":"new/version205/#added-lambda-based-action-builder-api","title":"Added lambda based action builder api","text":"<p>Using old api users common mistake was to forget .add() method and lose action without any compiler or runtime exception. Also, bad actions visual separation was another common problem. New lambda based api solves both this problems:</p> <p>Changes: Before: <pre><code>    @Override\npublic Actions&lt;DashboardFilterDTO&gt; getActions() {\nreturn Actions.&lt;DashboardFilterDTO&gt;builder()\n.action(\"filter\", \"Apply Filters\")\n.invoker((bc, dto) -&gt; new ActionResultDTO&lt;&gt;())\n.available(bc -&gt; true).withAutoSaveBefore()\n.add()\n.build();\n}\n</code></pre></p> <p>After: <pre><code>@Override\npublic Actions&lt;DashboardFilterDTO&gt; getActions() {\nreturn Actions.&lt;DashboardFilterDTO&gt;builder()\n.action(act -&gt; act\n.action(\"filter\", \"Apply Filters\")\n.invoker((bc, dto) -&gt; new ActionResultDTO&lt;&gt;())\n.available(bc -&gt; true).withAutoSaveBefore()\n)\n.build();\n}\n</code></pre></p>"},{"location":"new/version205/#other-changes","title":"Other Changes","text":"<p>see cxbox changelog</p>"},{"location":"new/version205/#cxbox-plugin","title":"CXBOX plugin","text":"<p>We've updated the plugin to version 1.7.6. Will be available in Intellij public Marketplace in a few days!</p>"},{"location":"new/version205/#fix-for-filtering-fields-of-type-hint","title":"Fix for filtering fields of Type Hint","text":"<p>The <code>SearchParameter</code> annotation was added to <code>Hint</code> fields in the DTO, enabling proper filtering functionality.  </p>"},{"location":"new/version205/#added-quick-fix-for-action-builder-api","title":"Added quick-fix for action builder api","text":"<p>You can choose to migrate actions either selectively or for the entire project to the new API.</p> <p>Selectively: </p> <p></p> <p>For the entire project:</p> <p></p>"},{"location":"new/version205/#added-inspection-for-widget-references","title":"Added inspection for widget references","text":"<ol> <li>Reference and inspection for <code>option.create.widget</code> and <code>option.edit.widget</code>    1.1 Added references in <code>.widget.json</code> for <code>option.create.widget</code> and <code>option.edit.widget</code> to the <code>name</code> field, enabling autocomplete, navigation to usages, definition, and rename refactoring.    1.2 Error and warning inspections added for invalid widget types and missing references. </li> <li>Reference and inspection for <code>confirmWithCustomWidget</code>    2.1 Implemented references for <code>confirmWithCustomWidget</code> method arguments to widgets in <code>.widget.json</code>, with the same autocomplete, navigation, and refactoring functionality.    2.2 Error and warning inspections added for invalid widget types and missing references.     </li> <li>Introduced the <code>@WidgetName</code> annotation in the core, which checks the widget type via the <code>typePostfix</code> parameter to ensure the correct type is used.  </li> <li>Expanded coverage of inspections and autocompletion for methods where arguments are annotated with <code>@WidgetName</code>. </li> </ol>"},{"location":"new/version205/#cxbox-documentation","title":"CXBOX documentation","text":""},{"location":"new/version205/#added-description-tabs","title":"Added description tabs","text":"<p>Added a description of tab functionality and detailed instructions for creating and organizing different levels of tabs on the screen.</p> <p></p> <p>Basic Basic for developer</p>"},{"location":"new/version206/","title":"2.0.6","text":"<ul> <li> <p>cxbox/demo 2.0.6 git, release notes </p> </li> <li> <p>cxbox-ui/core 2.3.0 git, release notes, npm </p> </li> </ul>"},{"location":"new/version206/#key-updates-september-october-2024","title":"Key updates September, October 2024","text":""},{"location":"new/version206/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":""},{"location":"new/version206/#changed-the-editing-row-format","title":"Changed the editing row format","text":"<ol> <li>Single-Click Row Editing. Rows now enter edit mode on a single click (previously, a double-click was required). All Fields Editable. When a row enters edit mode, all editable fields in the row are simultaneously placed in edit mode. Previously, only one field could be edited at a time.  </li> </ol> <ol> <li> <p>Custom Row Highlighting.  We\u2019ve added the ability to customize row highlight colors for different states, such as hover and active, directly from the frontend.  </p> </li> <li> <p>New <code>style</code> Attribute. A new style attribute has been added to the edit and create options in the metadata. Supported values are:    \u2022 <code>inline</code>: the row enters inline editing mode.    \u2022 <code>inlineForm</code>: opens an additional widget for editing the row.    \u2022  NEW! <code>none</code>: the row remains in readOnly mode. This is recommended for rows with non-editable fields, ensuring they don\u2019t switch to edit mode on click.  </p> </li> </ol> <p></p> <p>The specified style will take precedence over the presence of a widget name. It means that if you declare a widget name and any value of <code>style</code> attribute apart from <code>inlineForm</code>, the declared <code>style</code> value will be applied and the widget will not open.  </p> <p></p>"},{"location":"new/version206/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version206/#new-version-core-ui","title":"New version Core UI","text":"<p>We've updated Core UI to version 2.3.0.</p>"},{"location":"new/version206/#new-version-keycloak","title":"New version keycloak","text":"<p>We've updated keycloak from version 12.0.3 to version 12.0.4.</p>"},{"location":"new/version206/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version207/","title":"2.0.7","text":"<ul> <li> <p>cxbox/demo 2.0.7 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M10 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.4.0 git, release notes, npm </p> </li> <li> <p>cxbox/code-samples 2.0.7 git, release notes</p> </li> </ul>"},{"location":"new/version207/#key-updates-october-2024","title":"Key updates October 2024","text":""},{"location":"new/version207/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version207/#changed-grouping-hierarchy-widget-compact-look","title":"Changed: Grouping Hierarchy widget - compact look","text":"<p>Hierarchies now expanded in a more compact way. If grouping fields are empty or contain a single item, the hierarchy displays as expanded by default, reducing unnecessary clicks.  </p> AfterBefore <p></p> <p> </p>"},{"location":"new/version207/#added-grouping-hierarchy-widget-default-hierarchy","title":"Added: Grouping Hierarchy widget - default hierarchy","text":"<p>You can now (optionally) provide default hierarchy structure, that will be displayed even, when widget has no data</p> After: with Default HierarchyBefore: no Default Hierarchy <p></p> <p></p> <p>If data is provided from backend, frontend merges it with the default hierarchy. Default hierarchy and all data from backend are guarantied to be shown</p> After: default hierarchy and data from backendBefore: just data from backend <p></p> <p></p>"},{"location":"new/version207/#added-info-widget-field-title-mode","title":"Added: Info widget - field title mode","text":"<p>We have updated the info widget display options for both single-column and multi-column layouts. You can now set <code>titleMode</code> to <code>left</code> or <code>top</code> in the settings. The default is <code>left</code> for backward compatibility</p> Title Left (default)Title Top <p></p> <p></p>"},{"location":"new/version207/#added-money-field-currency-support","title":"Added:  Money field - currency support","text":"<p>The Money field now supports currency. Constant currency value per widget field is supported in this release. Dynamic and editable currency value support will be added in next releases</p> AfterBefore <p></p> <p></p>"},{"location":"new/version207/#added-checkbox-field-placeholder-support","title":"Added: Checkbox field - placeholder support","text":"<p>We have added placeholder support for checkbox. The value set for placeholder will be displayed on the right next to the checkbox itself. Note that it will not disappear once you click on the checkbox.  </p> <p></p>"},{"location":"new/version207/#added-formpopup-widget-multiple-popups-support","title":"Added: FormPopup widget - multiple popups support","text":"<p>It is now possible to set different FormPopup widgets for different buttons on the same bc/widget.  </p> <p> </p>"},{"location":"new/version207/#changed-checkbox-field-uniformed-look","title":"Changed: Checkbox field - uniformed look","text":"<p>We have improved the checkbox look by aligning it with other field types</p>"},{"location":"new/version207/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version207/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":""},{"location":"new/version207/#changed-actions-logic-when-required-fields-are-left-empty","title":"Changed: Actions logic when required fields are left empty","text":"<p>We have adjusted the logic of actions with <code>withoutAutoSaveBefore()</code> when required fields are left empty. Now, unsaved changes notification pop-up will appear. </p> <p></p>"},{"location":"new/version207/#changed-improved-data-loading-logic-for-child-components-with-hidden-parent","title":"Changed: Improved data loading logic for child components with <code>hidden</code> parent","text":"<p>We have adjusted the logic of loading data into child business components when their parent widget is <code>hidden</code> </p> <p> </p>"},{"location":"new/version207/#other-changes_1","title":"Other Changes","text":"<p>see cxbox-ui changelog</p>"},{"location":"new/version207/#cxbox-400-m10-core","title":"CXBOX 4.0.0-M10 (Core)","text":""},{"location":"new/version207/#added-fieldmetabuilder-class-getparentfield-method-support","title":"Added: FieldMetaBuilder class - <code>getParentField()</code> method support","text":"<p>This update makes <code>getParentField()</code> method available in FieldMetaBuilder. We have also introduced a new method <code>getBc()</code> in FieldMetaBuilder and <code>*ResponseService</code> classes</p>"},{"location":"new/version207/#added-fieldmetabuilder-class-defaultgroupinghierarchy-method-support","title":"Added: FieldMetaBuilder class - <code>defaultGroupingHierarchy</code> method support","text":"<p>Example 1: explicitly provided default hierarchy tree (grouped by two Enum fields document and then briefing): <pre><code>fields.defaultGroupingHierarchy(\nMeetingDocumentsDTO_.document,\nMeetingDocumentsDTO_.briefing,\nlvl -&gt; lvl\n.add(\nDocuments.POLICY,\nlvl2 -&gt; lvl2\n.add(Briefings.PROJECT)\n.add(Briefings.SECURITY)\n)\n.add(\nDocuments.COMPLIANCE\n)\n);\n</code></pre></p> <p>Example 2: dynamically provided default hierarchy tree. Can be convenient, when default hierarchy structure is configurable through admin UI, so needed to be loaded from DB/microservice: <pre><code>Map&lt;Documents, Set&lt;Briefings&gt;&gt; external = Map.of(\nDocuments.REFERENCE, Set.of(Briefings.FINANCIAL, Briefings.PROJECT),\nDocuments.POLICY, new HashSet&lt;&gt;()\n);\nfields.defaultGroupingHierarchy(\nMeetingDocumentsDTO_.document,\nMeetingDocumentsDTO_.briefing,\nlvl1 -&gt; external.entrySet().stream().collect(Hierarchy.toHierarchy(\nEntry::getKey,\n(doc, lvl2) -&gt; doc.getValue().stream().collect(Hierarchy.toHierarchy(brief -&gt; brief))\n)\n)\n);\n</code></pre></p>"},{"location":"new/version207/#other-changes_2","title":"Other Changes","text":"<p>see cxbox changelog</p>"},{"location":"new/version207/#cxbox-plugin","title":"CXBOX plugin","text":"<p>We've updated the plugin to version 1.7.7</p>"},{"location":"new/version207/#added-screenjson-inspection-when-type-standard","title":"Added: *.screen.json - inspection when \"type\" : \"standard\"","text":"<p>We have added inspections for screens that have explicitly set <code>\"type\"=\"standard\"</code> in .screen.json. These include making sure each <code>viewName</code> is unique, detecting empty arrays. We have also improved view generation (triggered by <code>+</code> icon click)</p>"},{"location":"new/version207/#added-widgetjson-auto-completion-and-navigation-for-actionkey","title":"Added: *.widget.json - auto-completion and navigation for <code>actionKey</code>","text":"<p>Previous plugin versions provided navigation for actions referenced in <code>options-&gt;actionGroups</code> of .widget.json. In this release we added same feature for actions referenced in <code>options-&gt;buttons-&gt;actionKey</code> tag of .widget.json used for files drag-and-drop configuration.  </p> <p></p>"},{"location":"new/version207/#added-widgetjson-inspection-for-actiongroups-location","title":"Added: *.widget.json - inspection for actionGroups location.","text":"<p>We have added an inspection for <code>actionGroups</code> tag in .widget.json to ensure it is located within <code>options</code>.  </p> <p> </p>"},{"location":"new/version207/#cxbox-documentation","title":"CXBOX documentation","text":""},{"location":"new/version207/#added-picklistpopup-widget-documentation-article","title":"Added: PickListPopup widget - documentation article","text":"<p>We have added a description of PickListPopup.</p>"},{"location":"new/version207/#added-list-form-info-widgets-showcondition-documentation-article","title":"Added: List, Form, Info Widget's - showCondition documentation article","text":"<p>We have added a full description of Show Condition and showCondition option for three main widgets (Form, Info, List).</p>"},{"location":"new/version207/#added-money-field-currency-property-section","title":"Added: Money field - currency property section","text":"<p>We have added a currency property description in Money field.</p>"},{"location":"new/version208/","title":"2.0.8","text":"<ul> <li> <p>cxbox/demo 2.0.8 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M11 git, release notes, maven</p> </li> <li> <p>cxbox-ui/core 2.4.1 git, release notes, npm</p> </li> <li> <p>cxbox/code-samples 2.0.8 git, release notes</p> </li> </ul>"},{"location":"new/version208/#key-updates-november-2024","title":"Key updates November 2024","text":""},{"location":"new/version208/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version208/#added-groupinghierarchy-widget-counter","title":"Added: GroupingHierarchy widget - counter","text":"<p>We have added a counter for grouping fields to display the number nested rows with data. You configure it with <code>counterMode</code> (possible values: <code>always</code>, <code>collapsed</code> and default <code>none</code>)  </p> NoneCollapsedAlways <p></p> <p></p> <p> </p>"},{"location":"new/version208/#added-groupinghierarchy-widget-nodes-expanded-by-default","title":"Added: GroupingHierarchy widget - nodes expanded by default","text":"<p>It is now possible configure expanded by default (<code>defaultExpanded</code> = <code>true</code>) nodes of GroupingHierarchy widget</p> defaultExpanded: false/ nulldefaultExpanded: true <p> </p> <p></p> <p>Note! To reduce user clicks we always expand groups, that will use only 1 row, when expanded. So, when <code>defaultExpanded</code> is <code>false</code> or <code>null</code>, then nodes are by default 'smartly' collapsed:</p> <ul> <li>groups with 1 or 0 elements are expanded</li> <li>groups with more than 1 element are collapsed.</li> </ul>"},{"location":"new/version208/#changed-additional-info-widget-style","title":"Changed: Additional Info widget - style","text":"<p>We have updated the style of Additional Info widget.  </p> AfterBefore <p></p> <p></p>"},{"location":"new/version208/#added-additional-list-widget-new-widget-type","title":"Added: Additional List widget - new widget type!","text":"<p>We have introduced a new widget type - <code>AdditionalList</code>, which can display multiple data rows</p> <ul> <li>In this release: one must provide <code>.widget.json -&gt; options -&gt; read</code> parameter, that points to <code>AdditionalInfo</code> widget used to render each data row</li> <li>In next releases: one will be able to skip <code>.widget.json -&gt; options -&gt; read</code> parameter, e.g. render <code>AdditionalList</code> rows with default <code>List</code>-like style</li> </ul> AfterBefore <p></p> <p> </p>"},{"location":"new/version208/#added-dictionary-field-icon-support","title":"Added: Dictionary field - icon support","text":"<p>It is now possible to set icon for a <code>dictionary</code> field. Using the <code>mode</code> parameter, you can either set it to <code>default</code> (displays both the icon and text) or <code>icon</code> (displays only icon). Also, tooltip always appears on icon hover.</p> Icon set (default)Icon set (mode=icon)No icon set <p></p> <p></p> <p> </p>"},{"location":"new/version208/#added-view-widget-groups-support","title":"Added: View - widget groups support","text":"<p>You can now group multiple widgets together and collapse or expand them. The first widget in the group gets an icon to control collapsing. When collapsed, all widgets in the group become hidden except for the title of the first widget. The group of widgets is displayed as expanded by default.   </p> Expanded (Default)Collapsed <p></p> <p></p>"},{"location":"new/version208/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog </p>"},{"location":"new/version208/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":""},{"location":"new/version208/#added-parameter-for-displaying-icon-in-dictionary-fields","title":"Added: parameter for displaying icon in dictionary fields","text":"<p>We have added support for icons to Dictionary field under a new <code>allValues</code> tag. Each entry in <code>allValues</code> includes an <code>icon</code> attribute, allowing configuration of the icon`s direction (ANT or custom) and color according to the corresponding value. </p>"},{"location":"new/version208/#other-changes_1","title":"Other Changes","text":"<p>see cxbox-ui changelog </p>"},{"location":"new/version208/#cxbox-400-m11-core","title":"CXBOX 4.0.0-M11 (Core)","text":""},{"location":"new/version208/#changed-icon-handling-methods-for-dictionary-fields","title":"Changed: Icon handling methods for dictionary fields","text":"<p>Such methods as <code>setIconWithValue()</code> and <code>setFilterValuesWithIcons()</code> are now marked as <code>@Deprecated</code>. They have been replaced by a new method <code>setAllValuesWithIcons()</code>, which is applicable for both LOV and Enum types  </p>"},{"location":"new/version208/#added-parameter-for-managing-default-display-mode-for-default-grouping-hierarchy","title":"Added: parameter for managing default display mode for Default Grouping Hierarchy","text":"<p>A new Boolean <code>defaultExpanded</code> has been introduced.</p>"},{"location":"new/version208/#other-changes_2","title":"Other Changes","text":"<p>see cxbox changelog</p>"},{"location":"new/version208/#cxbox-documentation","title":"CXBOX documentation","text":""},{"location":"new/version208/#added-dictionary-icon-section","title":"Added: Dictionary - Icon section","text":"<p>We have added a full description of Icon in Dictionary field. </p>"},{"location":"new/version209/","title":"2.0.9","text":"<ul> <li> <p>cxbox/demo 2.0.9 git, release notes</p> </li> <li> <p>cxbox/core 4.0.0-M12 git, release notes, maven </p> </li> <li> <p>cxbox-ui/core 2.4.2 git, release notes, npm</p> </li> <li> <p>cxbox/code-samples 2.0.9 git, release notes</p> </li> <li> <p>cxbox/intellij-plugin 1.7.7 Jetbrains Marketplace, cxbox-intellij-plugin.zip</p> </li> </ul>"},{"location":"new/version209/#key-updates-november-december-2024","title":"Key updates November, December 2024","text":""},{"location":"new/version209/#cxbox-demo","title":"CXBOX (Demo)","text":""},{"location":"new/version209/#added-additionallist-widget-new-display-mode","title":"Added: AdditionalList widget - new display mode","text":"<p>Now, Additional List widget supports two display modes.</p> <ul> <li>(NEW) Default: each row in Additional List is rendered using the default List-like style.</li> <li>(OLD) If <code>options -&gt; read</code> is populated with AdditionalInfo widget name: each row is rendered as specified  AdditionalInfo widget.</li> </ul> DefaultWith read option <p></p> <p></p>"},{"location":"new/version209/#added-notifications-drilldown-to-objects","title":"Added: Notifications - drilldown to objects","text":"<p>We have enhanced the Notifications popup to support multiple drilldown links.</p> <ul> <li>The notification banner now displays number of links: </li> </ul> AfterBefore <p></p> <p></p> <ul> <li>Clicking the bell icon opens the Notifications popup, where all hyperlinks to related objects are listed.  </li> </ul> AfterBefore <p> </p> <p> </p>"},{"location":"new/version209/#added-formpopup-widget-gridwidth-support","title":"Added: FormPopup widget - gridWidth support","text":"<p>We now support <code>gridWidth</code> for FormPopup. You can now directly indicate the width using <code>view.json -&gt; widgets -&gt; gridWidth</code> and the width now dynamically adjusts based on the following factors:  </p> <ul> <li>The state of the menu (collapsed or expanded)  </li> </ul> gridWidth12 Menu ExpandedgridWidth Menu Collapsed <p> </p> <p> </p> <ul> <li>The presence or absence of the additional widget on the view.  </li> </ul> gridWidth12 No AdditionalgridWidth12 With Additional <p> </p> <p></p> <p>These changes ensure that the <code>gridWidth</code> option for usual widget and for FormPopup widget has the same meaning (e.g. generates widgets of same width).  </p> <p>Note! Before this release value of <code>gridWidth</code> was ignored, e.g. popup widget was constant. After release one can set <code>gridWidth = 9</code> to remain old popup sizes.  </p> <p>See the detailed description in the updated formPopup article.  </p>"},{"location":"new/version209/#added-dictionary-field-administration-ui","title":"Added: Dictionary field - Administration UI","text":"<ul> <li>A new Administration Screen has been added to the UI, allowing you to configure <code>dictionaries</code> directly from the interface  </li> <li>Changes made through the UI are applied instantly via <code>Clear Cache</code> (experimental feature, does not support cluster)  </li> <li>You can now export dictionary data to a CSV file using the <code>Export</code>. Exported file format is same as used in Liquibase migration (see next paragraph) which makes migration process easier without any manual adjustments  </li> <li>A new CSV migration with Liquibase - ensures effortless pre-filling and data transfer between environments (production ready)</li> </ul> <p>See details in the updated Dictionary article:</p> <ul> <li>section Administration Dictionary</li> <li><code>How to add?</code> sections in this article now have snippets with <code>Dictionary</code> usage (instead of deprecated <code>LOV</code>)  </li> </ul>"},{"location":"new/version209/#added-role-based-model-multirole-support","title":"Added: Role-Based Model - MultiRole Support","text":"<p>BEFORE (<code>multi-role-enabled: false</code>):</p> <ul> <li>Login Behavior. The backend returned an activeRole parameter indicating the user's active role (e.g., \"activeRole\": \"CXBOX_USER\").</li> <li>UI Behavior. The UI displayed a checkbox for the active role, and users can switch roles.  </li> </ul> <p>AFTER (<code>multi-role-enabled: true</code>):</p> <ul> <li>Login Behavior. The backend sends activeRole: null, and the UI ignores this value. All roles available to the user are sent in the roles list. The content of requests includes all views accessible by any of the user's roles. If the view is available for at least one role, it means that the view is available for user in the multirole mode.</li> <li>UI Behavior. Checkboxes for all roles are displayed but are disabled, preventing role switching. Requests to the backend for role switching are no longer triggered.  </li> </ul> AfterBefore <p></p> <p> </p>"},{"location":"new/version209/#added-role-based-model-view-responsibilities-administration-ui","title":"Added: Role-Based Model - View Responsibilities Administration UI","text":"<p>BEFORE (<code>view-allowed-roles-enabled: true</code>):</p> <ul> <li><code>view responsibilities</code> are configured in <code>view.json -&gt; rolesAllowed</code>.</li> <li>Database management of the Responsibilities table is only possible through <code>view.json</code>.</li> </ul> <p>AFTER (<code>view-allowed-roles-enabled: false</code>):</p> <ul> <li>A new Administration Screen has been introduced in the UI for configuring view responsibilities  </li> <li>Any updates made in the UI are applied instantly via <code>Clear Cache</code> (experimental feature, does not support cluster)</li> <li>You can now export <code>view responsibilities</code> data to a CSV file using the <code>Export</code>. Exported file format is same as used in Liquibase migration (see next paragraph) which makes migration process easier without any manual adjustments</li> <li>A new CSV migration with Liquibase - ensures effortless pre-filling and data transfer between environments (production ready)</li> </ul> <p></p>"},{"location":"new/version209/#added-role-based-model-action-responsibilities-support","title":"Added: Role-Based Model - Action Responsibilities Support","text":"<p>BEFORE (corresponds to <code>widget-action-groups-enabled: true</code>):</p> <ul> <li>UI Layer: Action visibility (e.g., buttons on widgets) is managed in <code>widget.json  -&gt; actionGroups -&gt; include</code>.</li> </ul> <p>AFTER (<code>widget-action-groups-enabled: false</code>)</p> <ul> <li>The UI now includes an Administration Screen for configuring action responsibilities directly. Additionally, a database table (responsibilities_action) has been introduced to store action responsibilities data.   </li> <li>Any updates made in the UI are applied instantly via <code>Clear Cache</code> (experimental feature, does not support cluster)</li> <li>You can now export <code>action responsibilities</code> data to a CSV file using the <code>Export</code>. Exported file format is same as used in Liquibase migration (see next paragraph) which makes migration process easier without any manual adjustments</li> <li>A new CSV migration with Liquibase - ensures effortless pre-filling and data transfer between environments (production ready)</li> </ul> <p></p> <p>We have introduced automatic migration of <code>widget.json -&gt; actionGroups -&gt; include</code> configuration to <code>responsibilities_action</code>. Application fills table on start based on widget information if <code>widget-action-groups-enabled: true</code>. Only <code>widget.json -&gt; actionGroups -&gt; include</code> is supported - one should migrate manually if <code>widget.json -&gt; actionGroups -&gt; exclude</code> is used</p> <p>Also, two migration modes introduced</p> COMPACT (widget-action-groups-compact: true)FULL (widget-action-groups-compact: false) <p>If you indicate <code>widget-action-groups-compact: true</code> the <code>responsibilities_action</code> data will be filled in a compact way. Under this parameter, the asterisk (*) means that the responsibility is relevant for all roles and all views. This is especially helpful during migration process so that you don't have to handle with numerous data rows and just display them in a collapsed way instead. </p> <p>If you indicate <code>widget-action-groups-compact: false</code> the data will be filled for each role and each view separately. </p>"},{"location":"new/version209/#added-suggestionpicklist-field-backend-query-on-click","title":"Added: suggestionPickList field - backend query on click","text":"<p>We have optimized the functionality of <code>suggestionPickList</code> by removing the character limit for backend queries. Now, when users click on the field, a request is sent to the backend immediately, displaying all available data without the need to type any characters.  </p> <p> </p>"},{"location":"new/version209/#added-notifications-bearer-token-authentication-for-websockets","title":"Added: Notifications - Bearer Token authentication for WebSockets","text":"<p>We have added support for Bearer token authentication when connecting to WebSocket endpoints for notifications. Now, the Bearer token is included in the request header for secure access to the following endpoints: <code>/api/v1/websocketnotification/</code> and <code>/api/v1/notification</code>.  </p>"},{"location":"new/version209/#added-drilldown-tooltip","title":"Added: Drilldown - tooltip","text":"<p><code>drilldown</code>s now has tooltip that appears on hover, offering two options:  </p> <ul> <li>Open in a New Tab: Open the <code>drilldown</code> link in a new browser tab.</li> <li>Copy Link Address: Copy the <code>drilldown</code> link to the clipboard. </li> </ul> <p>Feature can be turned on with <code>cxbox.ui.drill-down-tooltip: newAndCopy</code>.  </p> AfterBefore <p></p> <p></p> <p>Limitations:  </p> <ul> <li><code>drilldowns</code> of to-view-with-fields-filtration type are currently not supported for the \"Open in a New Tab\" option.  </li> <li>tooltip is not yet supported for the Stats Block widget.  </li> </ul>"},{"location":"new/version209/#added-formpopup-widget-forceactive","title":"Added: FormPopup widget - forceActive","text":"<p>We have introduced the <code>forceActive</code> feature for FormPopup, allowing a backend request to be triggered before the modal window is opened. This ensures that the data within the popup is dynamically updated before being displayed, providing users with the most up-to-date information.  </p> <p> </p>"},{"location":"new/version209/#fixed-list-widget-improved-inline-create-logic","title":"Fixed: List widget - improved inline create logic","text":"<p>We enhanced the behavior of inline creation in List widgets. When adding a new row, it now automatically opens in edit mode, allowing users to immediately input data without extra clicks.  </p> <p> </p>"},{"location":"new/version209/#other-changes","title":"Other Changes","text":"<p>see cxbox-demo changelog</p>"},{"location":"new/version209/#cxbox-core-ui","title":"CXBOX (Core Ui)","text":"<p>We have released a new CORE UI version (2.4.2).  </p>"},{"location":"new/version209/#other-changes_1","title":"Other Changes","text":"<p>see cxbox-ui changelog </p>"},{"location":"new/version209/#cxbox-400-m12-core","title":"CXBOX 4.0.0-M12 (Core)","text":""},{"location":"new/version209/#added-dictionary-class-lov-deprecated-replacement","title":"Added: Dictionary class - LOV (deprecated) replacement.","text":"<p>We have replaced the LOV strongly typed Dictionary class for managing configurable dictionaries. New Dictionary class uses specific subclasses to represent different types of dictionaries. It also has unified handling of dictionaries across Entity and DTO layers, ensuring consistency in compile time. Also, we enabled storing constants within subclasses for streamlines use in business logic.  </p> <p>All details are provided in the updated Dictionary article (see \"Dictionary\" tabs in all examples).  </p> <p> </p>"},{"location":"new/version209/#other-changes_2","title":"Other Changes","text":"<p>Breaking changes have appeared! See cxbox changelog</p>"},{"location":"new/version209/#cxbox-documentation","title":"CXBOX documentation","text":""},{"location":"new/version209/#added-grouping-hierarchy","title":"Added: Grouping Hierarchy","text":"<p>We have added a full description of Grouping Hierarchy.  </p>"},{"location":"new/version209/#added-export-excel","title":"Added: Export Excel","text":"<p>We have provided a detailed description of Export to Excel function.  </p>"},{"location":"new/version209/#added-page-limit","title":"Added: Page Limit","text":"<p>Default limit page (available for List and Grouping Hierarchy) is now described in the article.  </p>"},{"location":"new/version209/#added-checkbox-placeholder","title":"Added: Checkbox - placeholder","text":"<p>See all the details about a Checkbox placeholder in our updated article. </p>"},{"location":"new/version209/#added-customization-of-displayed-columns","title":"Added: Customization of displayed columns","text":"<p>We have described the process of customization of displayed columns.  </p>"},{"location":"new/version209/#cxbox-plugin","title":"CXBOX plugin","text":""},{"location":"new/version209/#new-intellij-20243-support","title":"New: Intellij 2024.3+ support","text":"<p>Intellij 2024.3+ support</p>"},{"location":"new/version209/#new-autocomplete-ctrl-click-navigation-and-inspection-for-searchparameter","title":"New: Autocomplete, Ctrl-click navigation and inspection for @SearchParameter","text":"<p>Autocomplete, Ctrl-click navigation and inspection for @SearchParameter name parameter containing path to Hibernate entity field. Inspection highlights 2 simple but usefully cases: not existing fields references (most common error) and not finished path (expression not ending with hibernate @Column field)</p> <ul> <li> <p>Autocomplete: </p> </li> <li> <p>Ctrl-click navigation </p> </li> <li> <p>Inspection </p> </li> <li> <p>Refactoring </p> </li> </ul>"},{"location":"new/version209/#new-actions-in-widgetjson","title":"New. Actions in .widget.json","text":"<p>Autocomplete, Ctrl-click navigation and inspection for Actions in .widget.json -&gt; options -&gt; actionGroups -&gt; include. Now available without downloading sources with maven!</p>"},{"location":"new/version209/#plus-icon-and-code-generation","title":"Plus icon and code generation","text":"<p>We can now generate java boilerplate for new action and navigate to it immediately! </p>"},{"location":"new/version209/#actions-string-in-widgetjson-support","title":"Actions - <code>string</code> in .widget.json support:","text":""},{"location":"new/version209/#ctrl-click-navigation","title":"Ctrl-click navigation","text":"<p>Service  -&gt; .widget.json, .widget.json -&gt; Service:   </p>"},{"location":"new/version209/#autocomplete","title":"Autocomplete","text":""},{"location":"new/version209/#inspection","title":"Inspection","text":""},{"location":"new/version209/#refactoring","title":"Refactoring","text":""},{"location":"new/version209/#actions-enum-in-widgetjson-support","title":"Actions - <code>Enum</code> in .widget.json support:","text":""},{"location":"new/version209/#ctrl-click-navigation_1","title":"Ctrl-click navigation.","text":"<p>Service  -&gt; .widget.json, .widget.json -&gt; Service: </p>"},{"location":"new/version209/#autocomplete_1","title":"Autocomplete","text":""},{"location":"new/version209/#inspection_1","title":"Inspection","text":""},{"location":"new/version209/#refactoring_1","title":"Refactoring","text":""},{"location":"new/version209/#actions-java-constant-in-widgetjson-support","title":"Actions - <code>java constant</code>  in .widget.json support:","text":""},{"location":"new/version209/#ctrl-click-navigation_2","title":"Ctrl-click navigation","text":"<p>Only .widget.json -&gt; Service : </p>"},{"location":"new/version209/#autocomplete_2","title":"Autocomplete","text":""},{"location":"new/version209/#inspection_2","title":"Inspection","text":""},{"location":"new/version209/#new-inspection-viewname","title":"New. Inspection viewName","text":"<p>Inspection that checks viewName is unique per screen </p> <p>Inspection that checks viewName is unique per screen (.screen.json -&gt; navigation correctness), when type = standard is set (we skip this checks in other cases for backward compatibility with project customizations). We check:</p>"},{"location":"new/version209/#new-inspection-that-checks-popupbcname-in-widgetjson-fields","title":"New. Inspection that checks popupBcName in widget.json -&gt; fields","text":"<p>Inspection that checks popupBcName in widget.json -&gt; fields must be child for owning widget bc. Inspection checks this only for fields with type picklist</p>"},{"location":"new/version209/#new-inspection-that-checks-actiongroups-in-widgetjson","title":"New. Inspection that checks actionGroups in widget.json","text":"<p>Inspection that checks actionGroups in widget.json location (e.g. it is located in options tag)</p>"},{"location":"new/version209/#other-changes_3","title":"Other Changes","text":"<p>Other minor fixes: when AssocListPopup is code generated title and name order was reverted; when multipleSelect is code generated @CollectionTable name is made more unique (field name + bc); title required inspection is turned off - now we have widgets, that use empty titles by design</p>"},{"location":"new/whatsnew/","title":"What\u2019s New in cxbox","text":""},{"location":"new/whatsnew/#v2015","title":"v2.0.15","text":""},{"location":"new/whatsnew/#v2014","title":"v2.0.14","text":""},{"location":"new/whatsnew/#v2013","title":"v2.0.13","text":""},{"location":"new/whatsnew/#v2012","title":"v2.0.12","text":""},{"location":"new/whatsnew/#v2011","title":"v2.0.11","text":""},{"location":"new/whatsnew/#v2010","title":"v2.0.10","text":""},{"location":"new/whatsnew/#v209","title":"v2.0.9","text":""},{"location":"new/whatsnew/#v208","title":"v2.0.8","text":""},{"location":"new/whatsnew/#v207","title":"v2.0.7","text":""},{"location":"new/whatsnew/#v206","title":"v2.0.6","text":""},{"location":"new/whatsnew/#v205","title":"v2.0.5","text":""},{"location":"new/whatsnew/#v204","title":"v2.0.4","text":""},{"location":"new/whatsnew/#v203","title":"v2.0.3","text":""},{"location":"new/whatsnew/#v202","title":"v2.0.2","text":""},{"location":"new/whatsnew/#v202_1","title":"v2.0.2","text":""},{"location":"new/whatsnew/#v201","title":"v2.0.1","text":""},{"location":"new/whatsnew/#v200","title":"v2.0.0","text":""},{"location":"new/whatsnew/#v101","title":"v1.0.1","text":""},{"location":"new/whatsnew/#v100","title":"v1.0.0","text":""},{"location":"plugin/plugin/","title":"Plugin","text":""},{"location":"plugin/plugin/#v2015","title":"v2.0.15","text":""},{"location":"plugin/plugin/#added-intellij-20252-support-added-with-190","title":"Added: IntelliJ 2025.2+ support added. (with 1.9.0)","text":"<p>IntelliJ 2025.2+ support added.</p>"},{"location":"plugin/plugin/#added-added-generation-bc-from-widget-with-200","title":"Added: Added generation bc from widget (with 2.0.0)","text":"<p>Added generation bc from widget.</p> <p></p> <p>You can create a new Service, Entity, or DTO based on the name of your BK, or you can use existing Services, Entities, or DTOs</p> <p>Select Parameters:</p> <p></p> <p>Example:</p> <p></p>"},{"location":"plugin/plugin/#added-added-to-check-the-sum-of-span-values-in-optionslayoutrowscols-with-200","title":"Added: Added to check the sum of span values in options.layout.rows.cols  (with 2.0.0)","text":"<p>Form and Info widgets, a validation was added to check that the sum of span values in options.layout.rows.cols does not exceed the grid limit (24)</p> <p></p>"},{"location":"plugin/plugin/#fixed-incorrect-triggering-of-inspection-for-ss-with-190","title":"Fixed: Incorrect triggering of inspection for ss (with 1.9.0)","text":"<p>We fixed the <code>SearchParameterAnnotationCorrectEndingInspection</code>, which was working incorrectly for the <code>multipleSelect</code> field.</p> afterbefore <p></p> <p></p>"},{"location":"plugin/plugin/#v2014","title":"v2.0.14","text":""},{"location":"plugin/plugin/#added-intellij-20251-support","title":"Added: IntelliJ 2025.1+ support","text":"<p>Installing the Platform Tools Plugin</p> <p>The plugin now has separate builds for different versions of JetBrains IDEs. Make sure the correct update repository is configured.</p> <p>1) Open the Plugin Manager</p> <ul> <li>In your JetBrains IDE, go to <code>Help \u2192 Find Action</code></li> <li>Type <code>Plugins</code> and open the corresponding option</li> </ul> <p>2) Add the Plugin Repository</p> <ul> <li>In the Plugins window, click the \u2699\ufe0f (gear icon) \u2192 <code>Manage Plugin Repositories...</code></li> <li>Click \u2795</li> <li> <p>Enter the following URL:   <pre><code>https://document.cxbox.org/plugin/updatePlugins.xml\n</code></pre></p> </li> <li> <p>Click OK</p> </li> </ul> <p>3) Install the Plugin</p> <ul> <li>Switch to the <code>Marketplace</code> tab</li> <li>Search for Platform Tools</li> <li>Click Install</li> <li>After installation, click OK</li> </ul> <p>4) Restart the IDE</p>"},{"location":"plugin/plugin/#added-code-generation-support-added-for-fields-with-type-time-in-widgetjson","title":"Added: Code generation support added for fields with type <code>Time</code> in <code>.widget.json</code>.","text":"<p>Works with core 4.0.0-M17 and the versions above.</p>"},{"location":"plugin/plugin/#code-generation","title":"Code Generation","text":"<p>Added support for code generation of fields with the <code>time</code> type. You can now:</p> <ul> <li>Generate a <code>time</code> field with the default format <code>hh:mm:ss</code>;</li> <li>Specify a custom time format by selecting the desired pattern from the list of supported formats.</li> </ul> timetime with format <p></p> <p></p>"},{"location":"plugin/plugin/#autocomplete","title":"Autocomplete","text":"<p>Autocomplete is now available for <code>time</code> fields. When entering a format, you'll see a list of officially supported patterns, making it easier and faster to configure the desired time format.</p> <p></p>"},{"location":"plugin/plugin/#added-type-checking-for-fields-containing-pickmap","title":"Added: type checking for fields containing <code>pickMap</code>","text":"<p>For fields containing <code>pickMap</code>, type checking was added to ensure Java type consistency of <code>pickMap</code> parameters (excluding the <code>id</code> field).</p> <p>Validation is implemented for the following field types:</p> <ul> <li><code>inline-pickList</code></li> <li><code>pickList</code></li> <li><code>suggestionPickList</code></li> </ul> <p></p>"},{"location":"plugin/plugin/#added-inspection-and-quick-fix-support-for-the-new-api","title":"Added: inspection and quick-fix support for the new API","text":"<p>As part of the core 4.0.0-M15 release, used Lombok\u2019s @RequiredArgsConstructor and @Getter (meta,dao) for AnySourceVersionAwareResponseService and @Getter (meta) VersionAwareResponseService instead of explicitly writing a constructor. Added a quick-fix for the plugin to ensure compatibility with the new API and simplify the migration to the updated service implementation.</p> <p></p>"},{"location":"plugin/plugin/#added-searchparameter-if-no-explicit-parameter-is-defined","title":"Added: <code>@SearchParameter</code>: if no explicit parameter is defined","text":"<p>Now, if no parameter is specified for @SearchParameter,  through to the entity with the corresponding field name.</p> <p></p>"},{"location":"plugin/plugin/#added-autocomplete-ctrl-click-navigation-and-inspection-for-defaultview","title":"Added: Autocomplete, Ctrl-click navigation and inspection for defaultView","text":"<p>Autocomplete, Ctrl-click navigation and inspectio support added for the <code>defaultView</code> property in <code>.screen.json</code></p>"},{"location":"plugin/plugin/#autocomplete_1","title":"Autocomplete:","text":""},{"location":"plugin/plugin/#ctrl-click-navigation","title":"Ctrl-click navigation","text":""},{"location":"plugin/plugin/#inspection","title":"Inspection","text":""},{"location":"plugin/plugin/#refactoring","title":"Refactoring","text":""},{"location":"plugin/plugin/#fixed-code-generation-for-fields-with-type-picklist-and-inline-picklist","title":"Fixed: code generation for fields with type <code>Picklist</code> and <code>inline-pickList</code>","text":"<p>For fields with type <code>Picklist</code> and <code>inline-pickList</code> in <code>.widget.json</code> code generation fixed:</p> <ul> <li> <p>Field filtering added to the popup for selecting fields when creating a picklist.   Now only fields of the following types are displayed:</p> </li> <li> <p><code>String</code></p> </li> <li><code>LocalDateTime</code></li> <li><code>Long</code></li> <li><code>Double</code></li> <li><code>Enum</code></li> <li><code>Dictionary extension</code></li> <li> <p><code>Boolean</code></p> </li> <li> <p>Autogeneration of picklist configuration is now supported only for the above simple field types.   Other field types can be added manually via the picklist widget.</p> </li> </ul> <p>Autogeneration message: Autogeneration is supported for simple field types: String, LocalDateTime, Long, Double, Enum, Dictionary extension, Boolean. Other types can be added manually via the picklist widget.</p> <p></p>"},{"location":"plugin/plugin/#v2012","title":"v2.0.12","text":""},{"location":"plugin/plugin/#added-run-inspections-button","title":"Added: Run Inspections Button","text":"<p>We have added a Run Inspections button to the IntelliJ IDEA sidebar, enabling one-click execution of inspections across the entire project. The functionality automates the manual steps required to run inspections, eliminating the need to configure profiles or adjust settings.</p> <p></p>"},{"location":"plugin/plugin/#added-additionalinfo-widget-fieldkey-validation-in-widgetjson","title":"Added: AdditionalInfo widget - fieldKey validation in *.widget.json","text":"<p>Added inspections for AdditionalInfo widget, following the same logic as Info widget. Now, if a <code>fieldKey</code> in <code>layout</code> is missing or does not reference a field from <code>fields</code>, an inspection warning is triggered.</p> <p></p>"},{"location":"plugin/plugin/#added-inspection-for-options-createedit-widget-in-widgetjson","title":"Added: Inspection for options -&gt; create/edit -&gt; widget in *.widget.json","text":"<p>Added an inspection to ensure that widgets referenced in <code>create</code> and <code>edit</code> parameters are present on the same view as the main widget. Missing widgets are automatically added to the view.</p> <p></p>"},{"location":"plugin/plugin/#added-postaction-drilldownandwaituntil-validation-for-successcondition_bcname","title":"Added: postAction drillDownAndWaitUntil - validation for successCondition_bcName","text":"<p>We have added a validation check to verify that the field specified in the successCondition_bcName parameter is present on the indicated bc in the drillDownAndWaitUntil postAction.</p> <p></p>"},{"location":"plugin/plugin/#added-multipleselect-field-updated-method-for-field-auto-generation-in-widgetjson","title":"Added: multipleSelect field - updated method for field auto-generation in *.widget.json","text":"<p>Now, when adding a multipleSelect field via the + button, the plugin automatically generates the necessary code. If the project's core version supports it, the generated code will use <code>setConcreteValues()</code> instead of <code>setDictionaryTypeWithCustomValues()</code> marked as @deprecated since 4.0.0-M12.</p> <p></p>"},{"location":"plugin/plugin/#fixed-inlinepicklist-field-parent-bc-check-in-widgetjson","title":"Fixed: inlinePicklist field - parent bc check in *.widget.json","text":"<p>Fixed the inspection for <code>popupBcName</code> in *.widget.json, ensuring that it correctly checks that the referenced business component (bc) is a child to the parent widget's bc.</p> <p></p>"},{"location":"plugin/plugin/#added-searchparam-enhanced-inspection-algorithm","title":"Added: @SearchParam \u2013 enhanced inspection algorithm","text":"<p>We've improved the validation of the path to the filtered field, ensuring better compatibility with microservices (Anysource services). Additionally, we resolved an issue affecting the inspection process in cases where the initial annotated field lacked an explicitly specified path.</p>"},{"location":"plugin/plugin/#v2010","title":"v2.0.10","text":""},{"location":"plugin/plugin/#added-searchparameter-improved-handling-for-unresolved-entities","title":"Added: @SearchParameter - improved handling for unresolved entities","text":"<p>We have improved the plugin's behavior when the Entity specified in the annotation cannot be resolved.</p> <p>Now, if the Entity cannot be resolved, the plugin will:</p>"},{"location":"plugin/plugin/#inspection_1","title":"Inspection","text":"<p>Highlight the class name in yellow (Warning) with the message \"Entity not found.\"</p> <p></p>"},{"location":"plugin/plugin/#quick-fix-suggestion","title":"Quick-fix suggestion","text":"<p>Quick-fix suggestion to specify the Entity path explicitly in a comment. Example comment: //@entity:. <p></p>"},{"location":"plugin/plugin/#inspection-for-field-references-with-fieldkey-postfix-options-section","title":"Inspection for field references with -FieldKey postfix (options section).","text":"<p>The plugin now supports autocomplete, reference and inspections for field references in the options section of a widget.json file. To enable this functionality, ensure that fields in the options are named using the -FieldKey postfix (or simply named fieldKey). The plugin will link these fields to the fields array at the beginning of a widget.json file and, thus, ensure accurate references.</p> Autocomplete <p></p> Reference <p></p> Inspection <p></p>"},{"location":"plugin/plugin/#added-adding-multipleselect-field-for-enum-stored-in-entity-as-set","title":"Added: Adding MultipleSelect field for Enum stored in Entity as Set&lt;&gt;","text":"<p>Adding MultipleSelect field now utilizes a new method for <code>buildRowDependentMeta</code>. </p>"},{"location":"plugin/plugin/#v209","title":"v2.0.9","text":""},{"location":"plugin/plugin/#new-intellij-20243-support","title":"New: Intellij 2024.3+ support","text":"<p>Intellij 2024.3+ support</p>"},{"location":"plugin/plugin/#new-autocomplete-ctrl-click-navigation-and-inspection-for-searchparameter","title":"New: Autocomplete, Ctrl-click navigation and inspection for @SearchParameter","text":"<p>Autocomplete, Ctrl-click navigation and inspection for @SearchParameter name parameter containing path to Hibernate entity field. Inspection highlights 2 simple but usefully cases: not existing fields references (most common error) and not finished path (expression not ending with hibernate @Column field)</p> <ul> <li> <p>Autocomplete:   </p> </li> <li> <p>Ctrl-click navigation   </p> </li> <li> <p>Inspection   </p> </li> <li> <p>Refactoring   </p> </li> </ul>"},{"location":"plugin/plugin/#new-actions-in-widgetjson","title":"New. Actions in .widget.json","text":"<p>Autocomplete, Ctrl-click navigation and inspection for Actions in .widget.json -&gt; options -&gt; actionGroups -&gt; include. Now available without downloading sources with maven!</p>"},{"location":"plugin/plugin/#plus-icon-and-code-generation","title":"Plus icon and code generation","text":"<p>We can now generate java boilerplate for new action and navigate to it immediately! </p>"},{"location":"plugin/plugin/#actions-string-in-widgetjson-support","title":"Actions - <code>string</code> in .widget.json support:","text":""},{"location":"plugin/plugin/#ctrl-click-navigation_1","title":"Ctrl-click navigation","text":"<p>Service  -&gt; .widget.json, .widget.json -&gt; Service: </p>"},{"location":"plugin/plugin/#autocomplete_2","title":"Autocomplete","text":""},{"location":"plugin/plugin/#inspection_2","title":"Inspection","text":""},{"location":"plugin/plugin/#refactoring_1","title":"Refactoring","text":""},{"location":"plugin/plugin/#actions-enum-in-widgetjson-support","title":"Actions - <code>Enum</code> in .widget.json support:","text":""},{"location":"plugin/plugin/#ctrl-click-navigation_2","title":"Ctrl-click navigation.","text":"<p>Service  -&gt; .widget.json, .widget.json -&gt; Service: </p>"},{"location":"plugin/plugin/#autocomplete_3","title":"Autocomplete","text":""},{"location":"plugin/plugin/#inspection_3","title":"Inspection","text":""},{"location":"plugin/plugin/#refactoring_2","title":"Refactoring","text":""},{"location":"plugin/plugin/#actions-java-constant-in-widgetjson-support","title":"Actions - <code>java constant</code>  in .widget.json support:","text":""},{"location":"plugin/plugin/#ctrl-click-navigation_3","title":"Ctrl-click navigation","text":"<p>Only .widget.json -&gt; Service : </p>"},{"location":"plugin/plugin/#autocomplete_4","title":"Autocomplete","text":""},{"location":"plugin/plugin/#inspection_4","title":"Inspection","text":""},{"location":"plugin/plugin/#new-inspection-viewname","title":"New. Inspection viewName","text":"<p>Inspection that checks viewName is unique per screen </p> <p>Inspection that checks viewName is unique per screen (.screen.json -&gt; navigation correctness), when type = standard is set (we skip this checks in other cases for backward compatibility with project customizations). We check:</p>"},{"location":"plugin/plugin/#new-inspection-that-checks-popupbcname-in-widgetjson-fields","title":"New. Inspection that checks popupBcName in widget.json -&gt; fields","text":"<p>Inspection that checks popupBcName in widget.json -&gt; fields must be child for owning widget bc. Inspection checks this only for fields with type picklist</p>"},{"location":"plugin/plugin/#new-inspection-that-checks-actiongroups-in-widgetjson","title":"New. Inspection that checks actionGroups in widget.json","text":"<p>Inspection that checks actionGroups in widget.json location (e.g. it is located in options tag)</p>"},{"location":"plugin/plugin/#v207","title":"v2.0.7","text":""},{"location":"plugin/plugin/#added-screenjson-inspection-when-type-standard","title":"Added: *.screen.json - inspection when \"type\" : \"standard\"","text":"<p>We have added inspections for screens that have explicitly set <code>\"type\"=\"standard\"</code> in .screen.json. These include making sure each <code>viewName</code> is unique, detecting empty arrays. We have also improved view generation (triggered by <code>+</code> icon click)</p>"},{"location":"plugin/plugin/#added-widgetjson-auto-completion-and-navigation-for-actionkey","title":"Added: *.widget.json - auto-completion and navigation for <code>actionKey</code>","text":"<p>Previous plugin versions provided navigation for actions referenced in <code>options-&gt;actionGroups</code> of .widget.json. In this release we added same feature for actions referenced in <code>options-&gt;buttons-&gt;actionKey</code> tag of .widget.json used for files drag-and-drop configuration.</p> <p></p>"},{"location":"plugin/plugin/#added-widgetjson-inspection-for-actiongroups-location","title":"Added: *.widget.json - inspection for actionGroups location.","text":"<p>We have added an inspection for <code>actionGroups</code> tag in .widget.json to ensure it is located within <code>options</code>.</p> <p></p>"},{"location":"plugin/plugin/#v205","title":"v2.0.5","text":""},{"location":"plugin/plugin/#fix-for-filtering-fields-of-type-hint","title":"Fix for filtering fields of Type Hint","text":"<p>The <code>SearchParameter</code> annotation was added to <code>Hint</code> fields in the DTO, enabling proper filtering functionality.</p>"},{"location":"plugin/plugin/#added-quick-fix-for-action-builder-api","title":"Added quick-fix for action builder api","text":"<p>You can choose to migrate actions either selectively or for the entire project to the new API.</p> <p>Selectively:</p> <p></p> <p>For the entire project:</p> <p></p>"},{"location":"plugin/plugin/#added-inspection-for-widget-references","title":"Added inspection for widget references","text":"<ol> <li>Reference and inspection for <code>option.create.widget</code> and <code>option.edit.widget</code>    1.1 Added references in <code>.widget.json</code> for <code>option.create.widget</code> and <code>option.edit.widget</code> to the <code>name</code> field, enabling autocomplete, navigation to usages, definition, and rename refactoring.    1.2 Error and warning inspections added for invalid widget types and missing references. </li> <li>Reference and inspection for <code>confirmWithCustomWidget</code>    2.1 Implemented references for <code>confirmWithCustomWidget</code> method arguments to widgets in <code>.widget.json</code>, with the same autocomplete, navigation, and refactoring functionality.    2.2 Error and warning inspections added for invalid widget types and missing references.    </li> <li>Introduced the <code>@WidgetName</code> annotation in the core, which checks the widget type via the <code>typePostfix</code> parameter to ensure the correct type is used.</li> <li>Expanded coverage of inspections and autocompletion for methods where arguments are annotated with <code>@WidgetName</code>. </li> </ol>"},{"location":"plugin/plugininstalling/","title":"Install and Update the Platform Tools Plugin","text":"recommended Plugin Manager (Since 1.8.0 Platform Tools)Jetbrains Marketplace <p>Set this up once, and all future updates will be automatic.</p> <p>1) Open the Plugin Manager</p> <ul> <li>In your JetBrains IDE, go to <code>Help \u2192 Find Action</code></li> <li>Type <code>Plugins</code> and open the corresponding option</li> </ul> <p>2) Add the Plugin Repository</p> <ul> <li>In the Plugins window, click the \u2699\ufe0f (gear icon) \u2192 <code>Manage Plugin Repositories...</code></li> <li>Click \u2795</li> <li> <p>Enter the following URL:   <pre><code>https://document.cxbox.org/plugin/updatePlugins.xml\n</code></pre></p> </li> <li> <p>Click OK</p> </li> </ul> <p>3) Install the Plugin</p> <ul> <li>Switch to the <code>Marketplace</code> tab</li> <li>Search for Platform Tools</li> <li>Click Install</li> <li>After installation, click OK</li> </ul> <p>4) Restart the IDE</p> <p>5) Enjoy it!</p> <p>Also, the plugin is available for download on the official JetBrains Marketplace.</p> <p>cxbox/intellij-plugin  Jetbrains Marketplace</p>"},{"location":"widget/fields/fieldtypes/","title":"Fields","text":"<p>Work in progress</p>"},{"location":"widget/fields/fieldtypes/#how-properties","title":"How properties?","text":"<p>In cxbox add standard types</p> Type input text date dateTime dateTimeWithSeconds <code>Placeholder</code> + + + + + <code>Color</code> + + + + + <code>RO/Edit</code> + + + + + <code>Filter</code> + + + + + <code>Drilldown</code> + + + + + <code>Validation</code> + + + + + <code>Sort</code> + + + + + <code>Required</code> + + + + + Type number percent money radio checkbox hidden <code>Placeholder</code> + + + - - - <code>Color</code> + + + + + - <code>RO/Edit</code> + + + + + - <code>Filter</code> + + + + + - <code>Drilldown</code> + + + + - - <code>Validation</code> + + + + + - <code>Sort</code> + + + + + - <code>Required</code> + + + + + - Type dictionary fileUpload pickList inlinePickList suggestionPickList <code>Placeholder</code> + + + + + <code>Color</code> + - + + + <code>RO/Edit</code> + + + + + <code>Filter</code> + + + + + <code>Drilldown</code> + - + + + <code>Validation</code> + + + + + <code>Sort</code> + + + + + <code>Required</code> + + + + + Type hint multifield multivalueHover multivalue multipleSelect <code>Placeholder</code> - - - + + <code>Color</code> - - + + - <code>RO/Edit</code> - - - + + <code>Filter</code> - + + + + <code>Drilldown</code> - - - + - <code>Validation</code> - - - + + <code>Sort</code> - - - - + <code>Required</code> - - - + +"},{"location":"widget/fields/fieldtypes/#how-to-add-block-fields","title":"How to add block fields?","text":"Example <p>Step1 Add Block   \"fields\": [ ]: in json</p> <p>label - title field (optional) key - name field in DTO (required) type -  see standard types (required)</p> <pre><code>\"fields\": [  {\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n]\n</code></pre>"},{"location":"widget/fields/filtersearchoperation/","title":"SearchOperation for filtering","text":"<p>Each field type requires a distinct filtering operation sent by the frontend.</p> <p>It's crucial to consider this when dealing with microservices. </p> <p>Here are the standard field types with their respective filtering methods.</p> Type Filtration <code>input</code> .contains <code>date</code> .greaterOrEqualThan .lessOrEqualThan <code>dateTime</code> .greaterOrEqualThan .lessOrEqualThan <code>dateTimeWithSeconds</code> .greaterOrEqualThan .lessOrEqualThan <code>number</code> .equals <code>percent</code> .equals <code>hidden</code> - <code>text</code> .contains <code>radio</code> .equalsOneOf <code>checkbox</code> .specified=true/false <code>money</code> .equals <code>dictionary</code> .equalsOneOf <code>fileUpload</code> .contains <code>pickList</code> .contains <code>inlinePickList</code> .contains <code>hint</code> - <code>multifield</code> .equals <code>multivalueHover</code> .equalsOneOf <code>multivalue</code> .equalsOneOf <code>multipleSelect</code> .equalsOneOf <code>suggestionPickList</code> .contains"},{"location":"widget/fields/field/checkbox/checkbox/","title":"CheckBox","text":"<p><code>Field CheckBox</code> allows the user to make a binary choice.</p>"},{"location":"widget/fields/field/checkbox/checkbox/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetFormwidget"},{"location":"widget/fields/field/checkbox/checkbox/#how-to-add","title":"How to add?","text":"Example With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing form widget</p> <p></p> <p>Step1 Add field Boolean to corresponding BaseEntity.</p> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Column\nprivate Boolean customField;\n}\n</code></pre> <p>Step2 Add field Boolean to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BooleanValueProvider.class)\nprivate Boolean customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"checkbox\"\n}\n]\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"checkbox\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"checkbox\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/checkbox/checkbox/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application.</p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>_</p> <p></p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField, \"Text Placeholder\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/checkbox/checkbox/#color","title":"Color","text":"<p>not applicable</p>"},{"location":"widget/fields/field/checkbox/checkbox/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-does-it-look_2","title":"How does it look?","text":"EditableEditable List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-to-add_2","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre></p> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/checkbox/checkbox/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. Search uses <code>in</code> operator.</p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-does-it-look_3","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p>`</p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-to-add_3","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BooleanValueProvider.class)\nprivate Boolean customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/checkbox/checkbox/#drilldown","title":"Drilldown","text":"<p>not applicable</p>"},{"location":"widget/fields/field/checkbox/checkbox/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-to-add_4","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nif (Boolean.FALSE.equals(data.getCustomField())) {\nthrow new BusinessException().addPopup(ONLY_TRUE);\n}\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Use if:</p> <p>Requires a simple fields check (javax validation) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BooleanValueProvider.class)\n@AssertTrue(message = ONLY_TRUE)\nprivate Boolean customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (Boolean.FALSE.equals(dto.getCustomField())) {\nentity.addField(MyExampleDTO_.customField.getName(), \"The field 'customField' can contain only 'True\");\n}\nif (Boolean.FALSE.equals(dto.getCustomFieldAdditional())) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' can contain only 'True\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre> <code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomFieldAdditional(data.getCustomFieldAdditional());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/checkbox/checkbox/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order.</p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-to-add_5","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/checkbox/checkbox/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided.</p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/checkbox/checkbox/#how-to-add_6","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p>"},{"location":"widget/fields/field/date/date/","title":"Date","text":"<p><code>Date</code>  is a component for date with time editing. It can be used for editing and displaying dates.</p>"},{"location":"widget/fields/field/date/date/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/date/date/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/date/date/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add field LocalDate to corresponding BaseEntity. <pre><code>@Entity\n@Table(name = \"DateBasic\")\n@Getter\n@Setter\n@NoArgsConstructor\npublic class DateBasic extends BaseEntity {\nprivate LocalDateTime customField;\n}\n</code></pre></p> <p>Step2  Add field LocalDate to corresponding DataResponseDTO. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class DateBasicDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateValueProvider.class)\nprivate LocalDateTime customField;\npublic DateBasicDTO(DateBasic entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"DateBasicList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateBasic\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"date\"\n}\n]\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"DateBasicInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateBasic\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"date\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"DateBasicForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"dateBasic\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"date\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/date/date/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application.</p>"},{"location":"widget/fields/field/date/date/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/date/date/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DatePlaceholderDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDatePlaceholderDTO_.customField\n);\nfields.setPlaceholder(DatePlaceholderDTO_.customField, \"29.05.2023\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/date/date/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/date/date/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/date/date/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. </p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class DateColorDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateValueProvider.class)\nprivate LocalDateTime  customField;\nprivate String customFieldColor;\npublic DateColorDTO(dateColor entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"DateColorList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateColor\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"date\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"DateColorInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateColor\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"date\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"DateColorConstList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateColorConst\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"date\",\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"DateColorConstInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateColorConst\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"date\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/date/date/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/date/date/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/date/date/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;DateBasicDTO&gt; doUpdateEntity(DateBasic entity, DateBasicDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(DateBasicDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateBasicDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDateBasicDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateCreateEditDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre> Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/date/date/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. </p> <p>Search uses (data format is YYYY-MM-DD):</p> <ul> <li><code>greaterOrEqualThan</code>(&gt;=) and <code>lessOrEqualThan</code>(&lt;=) operators.  </li> <li><code>equals</code> (=) operator.</li> </ul>"},{"location":"widget/fields/field/date/date/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget By RangeEquals <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/date/date/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Info</p> <p>By default, filtration is carried out by range. If you want to turn it off, indicate <code>cxbox.widget.fields.filter-by-range-enabled-default: false</code> in meta. see more</p> <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class DateFiltrationDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateTimeValueProvider.class)\nprivate LocalDateTime customField;\npublic DateFiltrationDTO(dateFiltrationEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;DateFiltrationDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(DateFiltrationDTO_.customField);\n}\nfields.enableFilter(DateFiltrationDTO_.customField);\nfields.enableSort(DateFiltrationDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable </p>"},{"location":"widget/fields/field/date/date/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/date/date/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/date/date/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateDrillDownDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDateDrillDownDTO_.customField\n);\nfields.setRequired(\nDateDrillDownDTO_.customField\n);\nfields.setDrilldown(\nDateDrillDownDTO_.customField,\nDrillDownType.INNER,\n\"/screen/DateDrillDown/view/DateDrillDownform/\" + CxboxDateDrillDownController.dateDrillDown + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"DateDrillDownList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateDrillDown\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"date\",\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"DateDrillDownInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateDrillDown\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"date\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/date/date/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/date/date/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/date/date/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;DateValidationBusinessExDTO&gt; doUpdateEntity(DateValidationBusinessExEntity entity,\nDateValidationBusinessExDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(DateValidationBusinessExDTO_.customField)) {\nLocalDateTime sysdate = LocalDateTime.now();\nif (data.getCustomField() != null &amp;&amp; sysdate.compareTo(data.getCustomField()) &gt; 0) {\nthrow new BusinessException().addPopup(LESS_CURRENT_DATE);\n}\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;DateValidationRuntimeExEntityDTO&gt; doUpdateEntity(DateValidationRuntimeExEntity entity,\nDateValidationRuntimeExEntityDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(DateValidationRuntimeExEntityDTO_.customField)) {\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;DateConfirmDTO&gt; getActions() {\nreturn Actions.&lt;DateConfirmDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateValueProvider.class)\n@Future(message = LESS_CURRENT_DATE)\nprivate LocalDateTime  customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nLocalDateTime sysdate = LocalDateTime.now();\nif (dto.getCustomField() != null &amp;&amp; sysdate.compareTo(dto.getCustomField()) &gt; 0) {\nentity.addField(MyExampleDTO_.customField.getName(),\n\"The field 'customField' cannot be less than the current date\");\n}\nif (dto.getCustomField() != null &amp;&amp; sysdate.compareTo(dto.getCustomFieldAdditional()) &gt; 0) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' cannot be less than the current date\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre> <code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomFieldAdditional(data.getCustomFieldAdditional());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/date/date/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order.</p>"},{"location":"widget/fields/field/date/date/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/date/date/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;DateSortingDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(DateSortingDTO_.customField);\n}\nfields.enableSort(DateSortingDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/date/date/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided.</p>"},{"location":"widget/fields/field/date/date/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/date/date/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateRequiredDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDateRequiredDTO_.customField\n);\nfields.setRequired(\nDateRequiredDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTime/dateTime/","title":"DateTime","text":"<p><code>DateTime</code>  is a component for date with time editing. It can be used for editing and displaying dates with time.</p>"},{"location":"widget/fields/field/dateTime/dateTime/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/dateTime/dateTime/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add field LocalDateTime to corresponding BaseEntity.</p> <pre><code>@Entity\n@Table(name = \"DateTimeBasic\")\n@Getter\n@Setter\n@NoArgsConstructor\npublic class DateTimeBasic extends BaseEntity {\nprivate LocalDateTime customField;\n}\n</code></pre> <p>Step2  Add field LocalDateTime to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class DateTimeBasicDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateTimeValueProvider.class)\nprivate LocalDateTime customField;\npublic DateTimeBasicDTO(DateTimeBasic entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"DateTimeBasicList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateTimeBasic\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTime\"\n}\n]\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"DateTimeBasicInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateTimeBasic\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTime\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"DateTimeBasicForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"dateTimeBasic\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTime\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTime/dateTime/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application.</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateTimePlaceholderDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDateTimePlaceholderDTO_.customField\n);\nfields.setPlaceholder(DateTimePlaceholderDTO_.customField, \"29.05.2023 11:25\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTime/dateTime/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null.  <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class DateTimeColorCalcDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateTimeValueProvider.class)\nprivate LocalDateTime customField;\nprivate String customFieldColor;\npublic DateTimeColorCalcDTO(DateTimeColorCalc entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"DateTimeColorCalcList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateTimeColorCalc\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTime\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"DateTimeColorCalcInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateTimeColorCalc\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTime\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"DateTimeColorCalcForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"dateTimeColorCalc\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTime\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"DateTimeColorCalcInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateTimeColorCalc\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTime\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTime/dateTime/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\nprotected ActionResultDTO&lt;DateTimeBasicDTO&gt; doUpdateEntity(DateTimeBasic entity, DateTimeBasicDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(DateTimeBasicDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateTimeBasicDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDateTimeBasicDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateTimeEditDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n//\n}\n</code></pre> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTime/dateTime/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria.</p> <p>Search uses (data format is YYYY-MM-DD HH:MM):</p> <ul> <li><code>greaterOrEqualThan</code>(&gt;=) and <code>lessOrEqualThan</code>(&lt;=) operators. When the date is first set in the filter field, the time values will either be 00:00 or 23:59, depending on the date field.</li> <li><code>equals</code> (=) operator.Search is carried out between 00:00:00 and 23:59:59.</li> </ul>"},{"location":"widget/fields/field/dateTime/dateTime/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget By RangeEquals <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Info</p> <p>By default, filtration is carried out by range. If you want to turn it off, indicate <code>cxbox.widget.fields.filter-by-range-enabled-default: false</code> in meta. see more</p> <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter)</p> <p><pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class DateTimeFiltrationDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateTimeValueProvider.class)\nprivate LocalDateTime customField;\npublic DateTimeFiltrationDTO(DateTimeFiltration entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;DateTimeFiltrationDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(DateTimeFiltrationDTO_.customField);\n}\nfields.enableFilter(DateTimeFiltrationDTO_.customField);\nfields.enableSort(DateTimeFiltrationDTO_.customField);\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/dateTime/dateTime/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateTimeDrilldownDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDateTimeDrilldownDTO_.customField\n);\nfields.setRequired(\nDateTimeDrilldownDTO_.customField\n);\nfields.setDrilldown(\nDateTimeDrilldownDTO_.customField,\nDrillDownType.INNER,\n\"/screen/DateTimeDrilldown/view/DateTimeDrilldownform/\" + CxboxDateTimeDrilldownController.dateTimeDrilldown\n+ \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json.</p> <pre><code>{\n\"name\": \"DateTimeDrilldownList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateTimeDrilldown\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTime\",\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre> <p>Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json.</p> <pre><code>{\n\"name\": \"DateTimeDrilldownInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateTimeDrilldown\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTime\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/dateTime/dateTime/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\nprotected ActionResultDTO&lt;DateTimeValidationBusinessExDTO&gt; doUpdateEntity(DateTimeValidationBusinessEx entity,\nDateTimeValidationBusinessExDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(DateTimeValidationBusinessExDTO_.customField)) {\nLocalDateTime sysdate = LocalDateTime.now();\nif (data.getCustomField() != null &amp;&amp; sysdate.compareTo(data.getCustomField()) &gt; 0) {\nthrow new BusinessException().addPopup(LESS_CURRENT_DATE);\n}\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\nprotected ActionResultDTO&lt;DateTimeValidationRuntimeExDTO&gt; doUpdateEntity(DateTimeValidationRuntimeEx entity,\nDateTimeValidationRuntimeExDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(DateTimeValidationRuntimeExDTO_.customField)) {\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;DateTimeValidationDTO&gt; getActions() {\nreturn Actions.&lt;DateTimeValidationDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateTimeValueProvider.class)\n@Future(message = LESS_CURRENT_DATE)\nprivate LocalDateTime customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check.</p> <p><pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nLocalDateTime sysdate = LocalDateTime.now();\nif (dto.getCustomField() != null &amp;&amp; sysdate.isAfter(dto.getCustomField())) {\nentity.addField(MyExampleDTO_.customField.getName(),\n\"The field 'customField' cannot be less than the current date\");\n}\nif (dto.getCustomField() != null &amp;&amp; sysdate.isAfter(dto.getCustomFieldAdditional())) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' cannot be less than the current date\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre> <code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomFieldAdditional(data.getCustomFieldAdditional());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTime/dateTime/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order.</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;DateTimeSortDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(DateTimeSortDTO_.customField);\n}\nfields.enableSort(DateTimeSortDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/dateTime/dateTime/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided.</p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/dateTime/dateTime/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;RequiredDateTimeDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nRequiredDateTimeDTO_.customField\n);\nfields.setRequired(\nRequiredDateTimeDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/","title":"DateTimeWithSeconds","text":"<p><code>DateTimeWithSeconds</code> is a component for date with time editing. It can be used for editing and displaying dates with time and with seconds.</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add field LocalDateTimeWithSeconds to corresponding BaseEntity.</p> <pre><code>@Entity\n@Table(name = \"DateTimeWithSecondsEntity\")\n@Getter\n@Setter\n@NoArgsConstructor\npublic class DateTimeWithSecondsEntity extends BaseEntity {\n@Column\nprivate LocalDateTime customField;\n@Column\nprivate LocalDateTime customField;\n}\n</code></pre> <p>Step2 Add field LocalDateTimeWithSeconds to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class DateTimeWithSecondsDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateTimeValueProvider.class)\nprivate LocalDateTime customField;\npublic DateTimeWithSecondsDTO(DateTimeWithSecondsEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"DateTimeWithSecondsList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateTimeWithSeconds\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTimeWithSeconds\"\n}\n]\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"DateTimeWithSecondsInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateTimeWithSeconds\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTimeWithSeconds\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"DateTimeWithSecondsForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"dateTimeWithSeconds\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTimeWithSeconds\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application.</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateTimeWithSecondsPlaceholderDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDateTimeWithSecondsPlaceholderDTO_.customField\n);\nfields.setPlaceholder(DateTimeWithSecondsPlaceholderDTO_.customField, \"29.05.2023 11:25:58\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. </p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class DateTimeWithSecondsColorDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateTimeValueProvider.class)\nprivate LocalDateTime customField;\nprivate String customFieldColor;\npublic DateTimeWithSecondsColorDTO(DateTimeWithSecondsColorEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"DateTimeWithSecondsColorList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateTimeWithSecondsColor\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTimeWithSeconds\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"DateTimeWithSecondsColorInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateTimeWithSecondsColor\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTimeWithSeconds\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <pre><code>{\n\"name\": \"DateTimeWithSecondsColorConstList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateTimeWithSecondsColorConst\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTimeWithSeconds\",\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <pre><code>{\n\"name\": \"DateTimeWithSecondsColorConstInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateTimeWithSecondsColorConst\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTimeWithSeconds\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;DateTimeWithSecondsDTO&gt; doUpdateEntity(DateTimeWithSecondsEntity entity,\nDateTimeWithSecondsDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(DateTimeWithSecondsDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateTimeWithSecondsDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDateTimeWithSecondsDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateTimeWithSecondsCreateEditDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\n//\n}\n</code></pre> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria.  </p> <p>Search uses (data format is YYYY-MM-DD HH:MM):</p> <ul> <li><code>greaterOrEqualThan</code>(&gt;=) and <code>lessOrEqualThan</code>(&lt;=) operators. When the date is first set in the filter field, the time values will either be 00:00:00 or 23:59:59, depending on the date field.</li> <li><code>equals</code> (=) operator.Search is carried out between 00:00:00 and 23:59:59.</li> </ul>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget By RangeEquals <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Info</p> <p>By default, filtration is carried out by range. If you want to turn it off, indicate <code>cxbox.widget.fields.filter-by-range-enabled-default: false</code> in meta. see more</p> <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter)</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class DateTimeWithSecondsFiltrationDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateTimeValueProvider.class)\nprivate LocalDateTime customField;\npublic DateTimeWithSecondsFiltrationDTO(DateTimeWithSecondsFiltrationEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;DateTimeWithSecondsFiltrationDTO&gt; fields,\nInnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(DateTimeWithSecondsFiltrationDTO_.customField);\n}\nfields.enableFilter(DateTimeWithSecondsFiltrationDTO_.customField);\nfields.enableSort(DateTimeWithSecondsFiltrationDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateTimeWithSecondsDrillDownDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDateTimeWithSecondsDrillDownDTO_.customField\n);\nfields.setDrilldown(\nDateTimeWithSecondsDrillDownDTO_.customField,\nDrillDownType.INNER,\n\"/screen/DateTimeWithSecondsDrillDown/view/DateTimeWithSecondsDrillDownform/\"\n+ CxboxDateTimeWithSecondsDrillDownController.dateTimeWithSecondsDrillDown + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"DateTimeWithSecondsDrillDownList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"dateTimeWithSecondsDrillDown\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTimeWithSeconds\",\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre></p> <p>Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json.</p> <p><pre><code>{\n\"name\": \"DateTimeWithSecondsDrillDownInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"dateTimeWithSecondsDrillDown\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"dateTimeWithSeconds\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nif (data.getCustomField() != null &amp;&amp; LocalDateTime.now().isAfter(data.getCustomField())) {\nthrow new BusinessException().addPopup(LESS_CURRENT_DATE);\n}\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;DateTimeWithSecondsValidationRuntimeExEntityDTO&gt; doUpdateEntity(\nDateTimeWithSecondsValidationRuntimeExEntity entity, DateTimeWithSecondsValidationRuntimeExEntityDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(DateTimeWithSecondsValidationRuntimeExEntityDTO_.customField)) {\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;DateTimeWithSecondsValidationBusinessExDTO&gt; getActions() {\nreturn Actions.&lt;DateTimeWithSecondsValidationBusinessExDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = DateValueProvider.class)\n@Future(message = LESS_CURRENT_DATE)\nprivate LocalDateTime customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nLocalDateTime sysdate = LocalDateTime.now();\nif (dto.getCustomField() != null &amp;&amp; sysdate.isAfter(dto.getCustomField())) {\nentity.addField(MyExampleDTO_.customField.getName(),\n\"The field 'customField' cannot be less than the current date\");\n}\nif (dto.getCustomField() != null &amp;&amp; sysdate.isAfter(dto.getCustomFieldAdditional())) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' cannot be less than the current date\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre></p> <p><code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomFieldAdditional(data.getCustomFieldAdditional());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order.</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;DateTimeWithSecondsSortingDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(DateTimeWithSecondsSortingDTO_.customField);\n}\nfields.enableSort(DateTimeWithSecondsSortingDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided.</p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/dateTimeWithSeconds/dateTimeWithSeconds/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;DateTimeWithSecondsRequredDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nDateTimeWithSecondsRequredDTO_.customField\n);\nfields.setRequired(\nDateTimeWithSecondsRequredDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/","title":"Dictionary","text":"<p><code>Dictionary</code> is a component that allows to select single value from dropdown.</p> <p>Tips</p> <p>Use for dictionaries or slowly-growing entities, e.g. no more than 1000 values (all values are loaded in memory). Otherwise, use inlinePickList</p>"},{"location":"widget/fields/field/dictionary/dictionary/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p> <p>Dictionary can configurable:</p> <ul> <li>Enum</li> <li>Dictionary (since release 2.0.9)</li> <li><code>Not recommended.</code> LOV deprecated (since release 2.0.9) </li> </ul> <p><code>Dictionary</code> enables adding, deleting, and modifying its values through the administrative interface, so it should remain independent of business logic.</p> <p>If the dictionary is tied to business logic, it is recommended to use <code>Enum</code> to prevent modifications or deletions via the administration panel.</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add","title":"How to add?","text":"Example EnumDictionaryLOV deprecated recommended use Dictionary With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add dictionary field to an existing form widget     </p> <p>Add field to .widget.json.</p> <ul> <li>Step1 Create Enum. Best practice: storing enum name in the Database and using a separate field for displayed UI values     <pre><code>@Getter\n@AllArgsConstructor\npublic enum CustomFieldEnum {\nBELGOROD(\"Belgorod region\"),\nBRYANSK(\"Bryansk region\"),\nVLADIMIR(\"Vladimir region\"),\nVORONEZH(\"Voronezh region\"),\nIVANOVO(\"Ivanovo region\"),\nKALUGA(\"Kaluga region\"),\nKOSTROMA(\"Kostroma region\"),\nKURSK(\"Kursk region\"),\nMOSCOW(\"Moscow region\"),\nORYOL(\"Oryol region\"),\nRYAZAN(\"Ryazan region\"),\nSMOLENSK(\"Smolensk region\"),\nTAMBOV(\"Tambov region\"),\nTVER(\"Tver region\");\n@JsonValue\nprivate final String value;\npublic static CustomFieldEnum getByValue(@NonNull String value) {\nreturn Arrays.stream(CustomFieldEnum.values())\n.filter(enm -&gt; Objects.equals(enm.getValue(), value))\n.findFirst()\n.orElse(null);\n}\n}\n</code></pre></li> <li>Step2 Add  Enum field to corresponding BaseEntity.</li> </ul> <pre><code>    @Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Enumerated(value = EnumType.STRING)\n@Column\nprivate CustomFieldEnum customField;\n}\n</code></pre> <ul> <li>Step3 Add  Enum field to corresponding DataResponseDTO.</li> </ul> <pre><code>    @Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = EnumValueProvider.class)\nprivate CustomFieldEnum customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> <ul> <li> <p>Step4 Use fields.setEnumValues in the appropriate FieldMetaBuilder to ensure the frontend reseives the list of values in the /row-meta     method under \"values\" tag.</p> <p>If the values list is dependent on a parent field, use fields.setEnumValues within the buildRowDependentMeta  method to dynamically set it based on the parent.</p> </li> </ul> <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.setEnumValues(MyExampleDTO_.customField, CustomFieldEnum.values());\n}\n</code></pre> List widgetInfo widgetForm widget <ul> <li>Step5 Add to .widget.json.</li> </ul> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dictionary\"\n}\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <ul> <li>Step5 Add to .widget.json.</li> </ul> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dictionary\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <ul> <li>Step5 Add to .widget.json.</li> </ul> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dictionary\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>(since release 2.0.9)</p> <p>Step 1.  Configurable dictionary. Add description and value dictionary to DICTIONARY.csv.</p> <pre><code>TYPE;KEY;VALUE;DISPLAY_ORDER;DESCRIPTION;ACTIVE;ID\nREGIONS;MOSCOW;Moscow;;;;\nREGIONS;SAINT PETERBURG;St. Petersburg;;;;\nREGIONS;KOSTROMA;Kostroma;1;;;\nREGIONS;SYKTYVKAR;Syktyvkar;2;;;\nREGIONS;NewYork;New York;3;;;\n</code></pre> <p>Step 2.  Create record = name type dictionary implements Dictionary (If a dictionary type includes underscores,          its name is transformed into CamelCase by removing the underscores and capitalizing the first letter of each word.)  </p> <pre><code>public record Regions(String key) implements Dictionary {\npublic static final Regions SAINT_PETERBURG = new Regions(\"SAINT_PETERBURG\");\npublic static final Regions MOSCOW = new Regions(\"MOSCOW\");\n}\n</code></pre> <p>Step 3. Add field with new record to corresponding BaseEntity.</p> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Column\nprivate String customField;\n@Column\nprivate Regions customFieldDictionary;\n}\n</code></pre> <p>Step 4. Add field with new record to corresponding DataResponseDTO.</p> <p>Info</p> <p>if you microservice uses hibernate, then add dependency, that will allow you to use org. cxbox. dictionary. hibernate. DictionaryType under entity column, e. g. @Type(DictionaryType. class):  <pre><code>&lt;dependency&gt;  &lt;groupId&gt;org. cxbox&lt;/ groupId&gt; &lt;artifactId&gt;cxbox-dictionary-hibernate&lt;/ artifactId&gt; &lt;/ dependency&gt;\n</code></pre></p> <p>Also, you can turn on auto type registration setting org. cxbox. dictionary. enable_types_contributor=true in hibernate properties, e. g. in spring: <pre><code>&lt;dependency&gt;   &lt;groupId&gt;org. cxbox&lt;/ groupId&gt; &lt;artifactId&gt;cxbox-dictionary-api&lt;/ artifactId&gt; &lt;/ dependency&gt;\n</code></pre></p> <pre><code>spring: \njpa:   \n    properties:  \n        org:       \n            cxbox:        \n                dictionary:         \n                    enable_types_contributor: true\n</code></pre> <p>then @Type(DictionaryType. class) can be optionally skipped under column, because system will register type for all Dictionary implementations. enable_types_contributor feature is experimental - please, use @Type(DictionaryType. class) under entity column as fallback varian</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldDictionary\", provider = DictionaryValueProvider.class)\nprivate Regions customFieldDictionary;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldDictionary = entity.getCustomFieldDictionary();\n}\n}\n</code></pre> <p>Step 5. Use fields.setDictionaryValues in the appropriate FieldMetaBuilder to ensure the frontend reseives the list of values in the /row-meta         method under \"values\" tag.</p> <p>If the values list is dependent on a parent field, use fields.setEnumValues within the buildRowDependentMeta          method to dynamically set it based on the parent.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setEnabled(MyExampleDTO_.customFieldDictionary);\nfields.setDictionaryValues(MyExampleDTO_.customFieldDictionary);\n}\n</code></pre> <p>Step 6. Add fields.setDictionaryFilterValues to corresponding FieldMetaBuilder.</p> <p>The front-end requires us to display all directory data within the method /row-meta tag values.  If the values list is dependent on the parent, we should use the buildIndependentMeta method for this purpose.        </p> <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.setDictionaryFilterValues(MyExampleDTO_.customFieldDictionary);\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step 7. Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List configurable dictionary basic\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Lov\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Step 7. Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info configurable dictionary basic\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Lov\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldDictionary\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Step 7. Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form configurable dictionary basic\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Lov\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldDictionary\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Step 8.  Add bean DictionaryProvider. Incorporate it into the application a single time.</p> <pre><code>import java.util.Collection;\nimport lombok.NonNull;\nimport org.cxbox.api.data.dictionary.DictionaryCache;\nimport org.cxbox.api.data.dictionary.SimpleDictionary;\nimport org.cxbox.dictionary.Dictionary;\nimport org.cxbox.dictionary.DictionaryProvider;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n@Configuration\npublic class DictionaryConfig {\n@Bean\npublic DictionaryProvider dictionaryProvider() {\nreturn new DictionaryProvider() {\n@Override\npublic &lt;T extends Dictionary&gt; T lookupName(@NonNull Class&lt;T&gt; type, @NonNull DictionaryValue value) {\nvar dictTmp = Dictionary.of(type, \"\");\nvar lov = DictionaryCache.dictionary().lookupName(value.getValue(), dictTmp.getDictionaryType());\nreturn Dictionary.of(type, lov.getKey());\n}\n@Override\npublic &lt;T extends Dictionary&gt; SimpleDictionary lookupValue(@NonNull T dictionary) {\nreturn DictionaryCache.dictionary().get(dictionary.getDictionaryType(), dictionary.key());\n}\n@Override\npublic &lt;T extends Dictionary&gt; Collection&lt;T&gt; getAll(@NonNull Class&lt;T&gt; dictionaryType) {\nreturn DictionaryCache.dictionary().getAll(Dictionary.of(dictionaryType, \"\").getDictionaryType())\n.stream()\n.map(e -&gt; Dictionary.of(dictionaryType, e.getKey()))\n.toList();\n}\n};\n}\n}\n</code></pre> <ul> <li> <p>Step 1. LOV Create LOV</p> <ul> <li> <p>Step 1.1 Add type LOV to CXBOX-DICTIONARY_TYPE.csv.</p> <pre><code>ID;TYPE;TYPE_DESC\n200;REGIONS;Regions\n</code></pre> </li> <li> <p>Step 1.2 Add description and value LOV to CXBOX-DICTIONARY_ITEM.csv.</p> <pre><code>\"300\";200;\"REGIONS\";\"MOSCOW\";\"Moscow\";true;0;null\n\"301\";200;\"REGIONS\";\"SAINT PETERBURG\";\"St. Petersburg\";true;1;null\n\"302\";200;\"REGIONS\";\"KOSTROMA\";\"Kostroma\";true;2;null\n\"303\";200;\"REGIONS\";\"SYKTYVKAR\";\"Syktyvkar\";true;3;null\n</code></pre> </li> <li> <p>Step 1.3 Add corresponding launguage to database change management DICTIONARY_ITEM_TR.</p> <pre><code>&lt;changeSet id=\"ADD LANGUAGE DICTIONARY_ITEM_TR\" author=\"initial\"&gt;\n&lt;sql&gt;\ninsert into DICTIONARY_ITEM_TR (ID, LANGUAGE, VALUE)\n    select ID, 'en' as LANGUAGE, VALUE as VALUE\n    from DICTIONARY_ITEM;\n  &lt;/sql&gt;\n&lt;sql&gt;\ninsert into DICTIONARY_ITEM_TR (ID, LANGUAGE, VALUE)\n    select ID, 'ru' as LANGUAGE, VALUE as VALUE\n    from DICTIONARY_ITEM;\n  &lt;/sql&gt;\n&lt;/changeSet&gt;\n</code></pre> </li> <li> <p>Step 1.4 Add in project AdministeredDictionary</p> <pre><code>\n</code></pre> </li> <li> <p>Step 1.5  Add in project AdministeredDictionaryType</p> <pre><code>@Getter\n@RequiredArgsConstructor\npublic enum AdministeredDictionaryType implements Serializable, IDictionaryType {\n@Override\npublic LOV lookupName(String val) {\nreturn dictionary().lookupName(val, this);\n}\n@Override\npublic String lookupValue(LOV lov) {\nreturn dictionary().lookupValue(lov, this);\n}\n@Override\npublic String getName() {\nreturn name();\n}\npublic boolean containsKey(String key) {\nreturn dictionary().containsKey(key, this);\n}\n}\n</code></pre> </li> <li> <p>Step 1.6  Add  LOV (REGIONS) in AdministeredDictionaryType     <pre><code>@Getter\n@RequiredArgsConstructor\npublic enum AdministeredDictionaryType implements Serializable, IDictionaryType {\nREGIONS;\n@Override\npublic LOV lookupName(String val) {\nreturn dictionary().lookupName(val, this);\n}\n@Override\npublic String lookupValue(LOV lov) {\nreturn dictionary().lookupValue(lov, this);\n}\n@Override\npublic String getName() {\nreturn name();\n}\npublic boolean containsKey(String key) {\nreturn dictionary().containsKey(key, this);\n}\n}\n</code></pre></p> </li> </ul> </li> <li> <p>Step2  Add  LOV field to corresponding BaseEntity. </p> </li> </ul> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Column\nprivate LOV customField;\n}\n</code></pre> <ul> <li>Step3Add  String field to corresponding DataResponseDTO.</li> </ul> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(provider = LovValueProvider.class)\n@AdministeredDictionaryOld(REGIONS)\nprivate String customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = REGIONS.lookupValue(entity.getCustomField());\n}\n}\n</code></pre> <ul> <li>Step4 Add fields.setDictionaryTypeWithAllValues to corresponding FieldMetaBuilder.</li> </ul> <p>The front-end requires us to display all directory data within the method /row-meta tag values.  If the values list is dependent on the parent, we should use the buildRowDependentMeta method for this purpose.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre> List widgetInfo widgetForm widget <ul> <li>Step5 Add to .widget.json.</li> </ul> <pre><code>    {\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dictionary\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <ul> <li>Step5 Add to .widget.json.</li> </ul> <pre><code>\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <ul> <li>Step5 Add to .widget.json.</li> </ul> <pre><code>\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField, \"Placeholder text\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null.  <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = EnumValueProvider.class)\nprivate CustomFieldEnum customField;\nprivate String customFieldColor;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dictionary\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dictionary\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dictionary\",\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dictionary\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p>"},{"location":"widget/fields/field/dictionary/dictionary/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p> Live Sample \u00b7  GitHub</p> <p>Works for Info.</p> <p> Live Sample \u00b7  GitHub</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#filtering","title":"Filtering","text":"<p>Enum  Live Sample \u00b7  GitHub</p> <p>Dictionary  Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. Search uses <code>in</code> operator.</p> <p>The filter component displays a text search field and scrollbar based on the number of available filter values. (since release 2.0.13)</p> <ul> <li> <p>The search input and scrollbar appear only when the number of filterable values exceeds   7 items (Default count items - configurable via frontend constant).</p> </li> <li> <p>The Apply button shows a counter of selected items (e.g., <code>Apply (5)</code>).</p> </li> <li>If the selection count exceeds  7 items, it displays <code>Apply (N+)</code> (e.g., <code>Apply (9+)</code>).</li> </ul>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget &lt; Default count items&gt; Default count items <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_4","title":"How to add?","text":"Example EnumDictionary List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = EnumValueProvider.class)\nprivate CustomFieldEnum customField;\n@SearchParameter(name = \"customFieldNew\", provider = EnumValueProvider.class)\nprivate CustomFieldNewEnum customFieldNew;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldNew = entity.getCustomFieldNew();\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder.</p> <p>Add fields.setEnumFilterValues to corresponding FieldMetaBuilder.</p> <p>The front-end requires us to display all directory data within the method /row-meta tag <code>filterValues</code>. </p> <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (Boolean.TRUE.equals(configuration.getForceActiveEnabled())) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.setEnumValues(MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.setEnumFilterValues(fields, MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\nfields.setEnumValues(MyExampleDTO_.customFieldNew, CustomFieldNewEnum.values());\nfields.setEnumFilterValues(fields, MyExampleDTO_.customFieldNew, CustomFieldNewEnum.values());\nfields.enableFilter(MyExampleDTO_.customFieldNew);\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p> List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldDictionary\", provider = DictionaryValueProvider.class)\nprivate CustomDictionaryFiltration customFieldDictionary;\n@SearchParameter(name = \"customFieldNewDictionary\", provider = EnumValueProvider.class)\nprivate CustomDictionaryNewFiltration customFieldNewDictionary;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldDictionary = entity.getCustomFieldDictionary();\nthis.customFieldNewDictionary = entity.getCustomFieldNewDictionary();\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder.</p> <p>Add fields.setDictionaryFilterValues to corresponding FieldMetaBuilder.</p> <p>The front-end requires us to display all directory data within the method /row-meta tag <code>filterValues</code>. </p> <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableFilter(MyExampleDTO_.customFieldNewDictionary);\nfields.setDictionaryFilterValues(MyExampleDTO_.customFieldNewDictionary);\nfields.setDictionaryFilterValues(MyExampleDTO_.customFieldDictionary);\nfields.enableFilter(MyExampleDTO_.customFieldDictionary);\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p> <p>Configuration Default count items</p> <ul> <li>Location: <code>\\ui\\src\\constants\\filter.ts</code></li> <li> <p>Variables:</p> <ul> <li><code>checkboxFilterMaxVisibleItems</code> \u2013 Controls when scroll/search appear.</li> <li><code>checkboxFilterCounterLimit</code> \u2013 Sets the maximum number before switching to <code>+</code> notation.</li> </ul> </li> </ul>"},{"location":"widget/fields/field/dictionary/dictionary/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\" + PlatformMyExampleController.myExampleBc + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dictionary\",\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre></p> <p>Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p> Live Sample \u00b7  GitHub</p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"dictionary\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/dictionary/dictionary/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nif (data.getCustomField() != null &amp;&amp; !CustomFieldEnum.HIGH.getValue().equals(data.getCustomField().getValue())) {\nthrow new BusinessException().addPopup(ONLY_HIGH);\n}\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation) Add javax.validation to corresponding DataResponseDTO. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = EnumValueProvider.class)\n@NotNull(message = \"Custom message about error\")\nprivate CustomFieldEnum customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (!dto.getCustomField().getValue().equals(CustomFieldEnum.HIGH.getValue())) {\nentity.addField(MyExampleDTO_.customField.getName(), \"Custom message about error\");\n}\nif (!dto.getCustomFieldAdditional().getValue().equals(CustomFieldEnum.HIGH.getValue())) {\nentity.addField(MyExampleDTO_.customFieldAdditional.getName(), \"Custom message about error\");\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre></p> <p><code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#sorting","title":"Sorting","text":"<p><code>Enum</code>  Live Sample \u00b7  GitHub</p> <p><code>Dictionary</code>  Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order.</p> <p>Sorting data: The sorting of values is based on those stored in the database rather than those displayed in the interface.</p> <p>Info</p> <p>Sorting won't function until the page is refreshed after adding or updating records.</p> <p>Sorting Drop-down list or  List values for filter:  Can also arrange the values in the drop-down list or list values for filter in the desired order. <code>Enum</code> possible to  arrange list values for filter different from sorting for drop-down values.</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_7","title":"How does it look?","text":"Sorting dataList values for filterDrop-down list List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> List widgetInfo widgetForm widget <p></p> <p>not applicable</p> <p>not applicable</p> List widgetInfo widgetForm widget <p></p> <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget EnumDictionary Sorting dataDrop-down listList values for filter <p>see more Sorting</p> <p>The sorting of values is based on those stored in the database rather than those displayed in the interface, using lexicographic sorting.</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.setEnumFilterValues(fields, MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\nfields.setEnumFilterValues(fields, MyExampleDTO_.customFieldDictionaryCustomOrder, CustomFieldDictionaryCustomOrderEnum.LOW, CustomFieldDictionaryCustomOrderEnum.HIGH, CustomFieldDictionaryCustomOrderEnum.MIDDLE);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryCustomOrder);\nfields.enableSort(MyExampleDTO_.customFieldDictionaryCustomOrder);\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\n}\n</code></pre></p> <p>The sorting of drop-down values is determined by the order specified by the developer in the method.</p> <p>Step 1  Add fields.setEnumValues to corresponding FieldMetaBuilder. Ensure the values are passed in the correct order to achieve the desired sorting.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setEnumValues(MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.setEnumValues(MyExampleDTO_.customFieldDictionaryCustomOrder, CustomFieldDictionaryCustomOrderEnum.MIDDLE, CustomFieldDictionaryCustomOrderEnum.LOW, CustomFieldDictionaryCustomOrderEnum.HIGH);\nfields.setEnabled(MyExampleDTO_.customFieldDictionaryCustomOrder);\n}\n</code></pre> <p>The sorting of drop-down values is determined by the order specified by the developer in the method.</p> <p>Step 1  Add fields.setEnumFilterValues to corresponding FieldMetaBuilder. Ensure the values are passed in the correct order to achieve the desired sorting.</p> <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.setEnumFilterValues(fields, MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\nfields.setEnumFilterValues(fields, MyExampleDTO_.customFieldDictionaryCustomOrder, CustomFieldDictionaryCustomOrderEnum.LOW, CustomFieldDictionaryCustomOrderEnum.HIGH, CustomFieldDictionaryCustomOrderEnum.MIDDLE);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryCustomOrder);\nfields.enableSort(MyExampleDTO_.customFieldDictionaryCustomOrder);\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> Sorting dataDrop-down list and List values for filter <p>see more Sorting</p> <p>The sorting of values is based on those stored in the database rather than those displayed in the interface.</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableSort(MyExampleDTO_.customFieldDictionary);\nfields.enableSort(MyExampleDTO_.customFieldDictionaryExample);\nfields.setDictionaryFilterValues(MyExampleDTO_.customFieldDictionary);\nfields.setDictionaryFilterValues(MyExampleDTO_.customFieldDictionaryExample);\n}\n</code></pre></p> <p>If you use DictionaryProvider. getAll(Class), that delegates to org. cxbox. api. data. dictionary. DictionaryCache, then drop-down values are sorted by display_order, then by key (display_order can be null) <pre><code>@Configuration\npublic class DictionaryConfig {\n@Bean\npublic DictionaryProvider dictionaryProvider() {\nreturn new DictionaryProvider() {\n@Override\npublic &lt;T extends Dictionary&gt; T lookupName(@NonNull Class&lt;T&gt; type, @NonNull DictionaryValue value) {\nvar dictTmp = Dictionary.of(type, \"\");\nvar lov = DictionaryCache.dictionary().lookupName(value.getValue(), dictTmp.getDictionaryType());\nreturn Dictionary.of(type, lov.getKey());\n}\n@Override\npublic &lt;T extends Dictionary&gt; SimpleDictionary lookupValue(@NonNull T dictionary) {\nreturn DictionaryCache.dictionary().get(dictionary.getDictionaryType(), dictionary.key());\n}\n@Override\npublic &lt;T extends Dictionary&gt; Collection&lt;T&gt; getAll(@NonNull Class&lt;T&gt; dictionaryType) {\nif (dictionaryType == CustomDictionarySortingExample.class) {\nreturn DictionaryCache.dictionary().getAll(Dictionary.of(dictionaryType, \"\").getDictionaryType())\n.stream()\n.sorted(Comparator.comparing(SimpleDictionary::getKey))\n.map(e -&gt; Dictionary.of(dictionaryType, e.getKey()))\n.toList();\n}\nreturn DictionaryCache.dictionary().getAll(Dictionary.of(dictionaryType, \"\").getDictionaryType())\n.stream()\n.map(e -&gt; Dictionary.of(dictionaryType, e.getKey()))\n.toList();\n}\n};\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> EnumDictionary Sorting dataDrop-down listList values for filter <p>not applicable</p> <p>The sorting of drop-down values is determined by the order specified by the developer in the method.</p> <p>Step 1  Add fields.setEnumValues to corresponding FieldMetaBuilder. Ensure the values are passed in the correct order to achieve the desired sorting.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setEnumValues(MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.setEnumValues(MyExampleDTO_.customFieldDictionaryCustomOrder, CustomFieldDictionaryCustomOrderEnum.MIDDLE, CustomFieldDictionaryCustomOrderEnum.LOW, CustomFieldDictionaryCustomOrderEnum.HIGH);\nfields.setEnabled(MyExampleDTO_.customFieldDictionaryCustomOrder);\n}\n</code></pre> <p>not applicable</p> Sorting dataDrop-down listList values for filter <p>not applicable</p> <p>If you use DictionaryProvider. getAll(Class), that delegates to org. cxbox. api. data. dictionary. DictionaryCache, then drop-down values are sorted by display_order, then by key (display_order can be null) <pre><code>@Configuration\npublic class DictionaryConfig {\n@Bean\npublic DictionaryProvider dictionaryProvider() {\nreturn new DictionaryProvider() {\n@Override\npublic &lt;T extends Dictionary&gt; T lookupName(@NonNull Class&lt;T&gt; type, @NonNull DictionaryValue value) {\nvar dictTmp = Dictionary.of(type, \"\");\nvar lov = DictionaryCache.dictionary().lookupName(value.getValue(), dictTmp.getDictionaryType());\nreturn Dictionary.of(type, lov.getKey());\n}\n@Override\npublic &lt;T extends Dictionary&gt; SimpleDictionary lookupValue(@NonNull T dictionary) {\nreturn DictionaryCache.dictionary().get(dictionary.getDictionaryType(), dictionary.key());\n}\n@Override\npublic &lt;T extends Dictionary&gt; Collection&lt;T&gt; getAll(@NonNull Class&lt;T&gt; dictionaryType) {\nif (dictionaryType == CustomDictionarySortingExample.class) {\nreturn DictionaryCache.dictionary().getAll(Dictionary.of(dictionaryType, \"\").getDictionaryType())\n.stream()\n.sorted(Comparator.comparing(SimpleDictionary::getKey))\n.map(e -&gt; Dictionary.of(dictionaryType, e.getKey()))\n.toList();\n}\nreturn DictionaryCache.dictionary().getAll(Dictionary.of(dictionaryType, \"\").getDictionaryType())\n.stream()\n.map(e -&gt; Dictionary.of(dictionaryType, e.getKey()))\n.toList();\n}\n};\n}\n}\n</code></pre></p> <p>not applicable</p>"},{"location":"widget/fields/field/dictionary/dictionary/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided.</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#additional-properties","title":"Additional properties","text":""},{"location":"widget/fields/field/dictionary/dictionary/#icon","title":"Icon","text":"<p>(since release 2.0.8)</p> <p> Live Sample \u00b7  GitHub</p> <p>Icons are small graphic symbols used within a user interface to visually represent certain actions, fields, or data types, making the interface more intuitive and easier to navigate. They serve as visual cues to help users quickly identify the purpose of a field without needing to read a title.</p>"},{"location":"widget/fields/field/dictionary/dictionary/#basic","title":"Basic","text":"<p>Tips</p> <p>We recommend avoiding long values for value fields, as filtering sends a string with vallue to the backend, which may be subject to length limitations.</p> <p>There are two display types icons:</p> <ul> <li><code>Standard icons</code></li> <li><code>Custom icons</code></li> </ul> <p>There are two display modes:</p> <ul> <li><code>Default Mode</code> (icon and text)</li> <li><code>Icon-Only Mode</code> (only icon)</li> </ul>"},{"location":"widget/fields/field/dictionary/dictionary/#modes","title":"Modes","text":""},{"location":"widget/fields/field/dictionary/dictionary/#default-mode","title":"Default Mode","text":"<p>Both icon and text are always shown.</p> <p>Applies to:</p> <ul> <li>Drop-down directory</li> <li>Edit mode/Creation</li> <li>Filtering</li> </ul>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_9","title":"How does it look?","text":"List widgetInfo widgetForm widgetAdditionalInfo widgetGroupingHierarchy widget"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_9","title":"How to add?","text":"Example <p>The frontend display mechanism for icons works as follows:</p> <p>Icon Value Matching: The frontend needs to have all occurrences of the icon values within a comprehensive tag collection (allValues).</p> <p>Icon Retrieval: It then takes the specified value from values(see more how_to_add)/filterValues(see more how_to_add and searches for a matching icon value within allValues. This process ensures that icons are displayed based on the specified icon values.</p> EnumDictionaryLOV deprecated recommended use Dictionary\" <p><code>Step 1</code> Add fields.setEnumIcons to buildIndependentMeta to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableFilter(MyExampleDTO_.customFieldMultivalueModeIcon);\nfields.enableFilter(MyExampleDTO_.customFieldMultivalue);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryInlinePickList);\nfields.enableFilter(MyExampleDTO_.customFieldPickList);\nfields.enableFilter(MyExampleDTO_.customFieldDictionary);\nfields.enableSort(MyExampleDTO_.customFieldDictionary);\nfields.setEnumFilterValues(fields,MyExampleDTO_.customFieldPickList,CustomFieldDictionaryEnum.values());\nfields.setEnumFilterValues(fields,MyExampleDTO_.customFieldDictionary,CustomFieldDictionaryEnum.values());\nfields.setAllValuesWithIcons(MyExampleDTO_.customFieldDictionary, CustomFieldDictionaryEnum.iconMap());\nfields.setEnumValues(MyExampleDTO_.customFieldDictionary, CustomFieldDictionaryEnum.values());\n}\n</code></pre></p> <p><code>Step 2</code> (optional)</p> <p>Missing mod tag = \"mode\": \"default</p> <p>Add \"mode\": \"default\" to corresponding widget.json.</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List Mode default\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\",\n\"mode\": \"default\"\n}\n]\n}\n</code></pre> <p><code>Step 1</code> Add fields.setDictionaryValues to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.setDictionaryFilterValues(MyExampleDTO_.customFieldDictionary);\nfields.setDictionaryIcons(MyExampleDTO_.customFieldDictionary,CustomDictionary.icons);\n}\n</code></pre></p> <p><code>Step 2</code> (optional)</p> <p>Missing mod tag = \"mode\": \"default</p> <p>Add \"mode\": \"default\" to corresponding widget.json.</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n}\n]\n}\n</code></pre> <p><code>Step 1</code> Add fields.setDictionaryTypeWithAllValues to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableFilter(MyExampleDTO_.customFieldDictionary);\nfields.enableSort(MyExampleDTO_.customFieldDictionary);\nfields.setDictionaryTypeWithAllValues(MyExampleDTO_.customFieldDictionary, REGIONS);\nMap&lt;LOV, Icon&gt; valueIconMap = Map.of(\nMOSCOW, ARROW_UP,\nSAINT_PETERBURG, DOWN,\nSYKTYVKAR, ARROW_UP_BLUE,\nKOSTROMA, WATERMELON);\nfields.setAllValuesWithIcons(MyExampleDTO_.customFieldDictionary, REGIONS, valueIconMap);\nfields.setAllFilterValuesByLovType(MyExampleDTO_.customFieldDictionary, REGIONS);\n}\n</code></pre></p> <p><code>Step 2</code> Missing mod tag = \"mode\": \"default</p> <p>Add \"mode\": \"default\" to corresponding widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n}\n]\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#icon-mode","title":"Icon Mode","text":"<p> Live Sample \u00b7  GitHub</p> <p>Only the icon is displayed.</p> <p>When hovering over the icon, a tooltip appears displaying text that is retrieved from the value.</p> <p>Applies to:</p> <ul> <li>Drop-down directory</li> <li>Edit mode/Creation</li> <li>For filtering, icon and text are always shown.</li> </ul>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_10","title":"How does it look?","text":"List widgetInfo widgetForm widgetAdditionalInfo widgetGroupingHierarchy widget"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_10","title":"How to add?","text":"Example <p>The frontend display mechanism for icons works as follows:      <code>allValues</code> tag is filled with values from the icon-to-value mapping directory.  Next, we retrieve the value from either values (see how_to_add) or filterValues (see  how_to_add) and then search for the matching icon in allValues.</p> EnumDictionaryLOV deprecated recommended use Dictionary <p><code>Step 1</code> Add fields.setAllValuesWithIcons to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableFilter(MyExampleDTO_.customFieldMultivalueModeIcon);\nfields.enableFilter(MyExampleDTO_.customFieldMultivalue);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryInlinePickList);\nfields.enableFilter(MyExampleDTO_.customFieldPickList);\nfields.enableFilter(MyExampleDTO_.customFieldDictionary);\nfields.enableSort(MyExampleDTO_.customFieldDictionary);\nfields.setEnumFilterValues(fields,MyExampleDTO_.customFieldPickList,CustomFieldDictionaryEnum.values());\nfields.setEnumFilterValues(fields,MyExampleDTO_.customFieldDictionary,CustomFieldDictionaryEnum.values());\nfields.setAllValuesWithIcons(MyExampleDTO_.customFieldDictionary, CustomFieldDictionaryEnum.iconMap());\nfields.setEnumValues(MyExampleDTO_.customFieldDictionary, CustomFieldDictionaryEnum.values());\n}\n</code></pre> <code>Step 2</code> Add \"mode\": \"icon\" to corresponding widget.json. <pre><code>{\n\"name\": \"MyExampleListIconMode\",\n\"title\": \"List Mode icon\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\",\n\"mode\": \"icon\"\n}\n]\n}\n</code></pre></p> <p><code>Step 1</code> Add fields.setDictionaryIcons to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.setDictionaryFilterValues(MyExampleDTO_.customFieldDictionary);\nfields.setDictionaryIcons(MyExampleDTO_.customFieldDictionary,CustomDictionary.icons);\n}\n</code></pre></p> <p><code>Step 2</code> Add \"mode\": \"icon\" to corresponding widget.json. <pre><code>{\n\"name\": \"MyExampleListOnlyIcon\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\",\n\"mode\": \"icon\"\n}\n]\n}\n</code></pre></p> <p><code>Step 1</code> Add fields.setDictionaryTypeWithAllValues to corresponding FieldMetaBuilder. <pre><code>\n</code></pre></p> <p><code>Step 2</code> Add \"mode\": \"icon\" to corresponding widget.json. <pre><code>\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#types-icons","title":"Types icons","text":"<p>The workflow logic is to first search for the icon name in the custom icons folder. If the icon is found, it will be used from there; if not, the search will continue in the standard Ant icons folder.</p> <p>Icon selection logic:</p> <ul> <li>Search by icon name in the custom icons folder.</li> <li>If found, use the custom icon.</li> <li>If not found, look in the standard Ant icons folder and use the icon from there.</li> </ul>"},{"location":"widget/fields/field/dictionary/dictionary/#standard-icons","title":"Standard icons","text":"<p>Cxbox-ui already includes this icon library.</p> <p>Ant Design icons You can customize the color of the standard icon using a hex color code.</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_11","title":"How does it look?","text":"BasicWith Color"},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_11","title":"How to add?","text":"Example BasicWith Color <p>Simply copy the icon name and pass it to the method\u2014that's all you need. For example, add </p> EnumDictionaryLOV deprecated recommended use Dictionary <p>Add standart icon  to corresponding Icon. ARROW_UP(\"arrow-up\") <pre><code>@RequiredArgsConstructor\n@Getter\npublic enum IconsEnum implements Icon {\nARROW_UP_BLUE(\"arrow-up #0cbfe\"),\nARROW_UP(\"arrow-up\"),\nWATERMELON(\"watermelon\"),\nDOWN(\"down\");\nprivate final String icon;\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p><code>Step 1</code> Add standart icon  to corresponding Enum with icons. ARROW_UP(\"arrow-up\") <pre><code>@RequiredArgsConstructor\n@Getter\npublic enum IconsEnum implements Icon {\nARROW_UP_BLUE(\"arrow-up #0cbfe\"),\nARROW_UP(\"arrow-up\"),\nWATERMELON(\"watermelon\"),\nDOWN(\"down\");\nprivate final String icon;\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p><code>Step 1</code> Add standart icon  to corresponding Enum with icons. ARROW_UP(\"arrow-up\") <pre><code>@RequiredArgsConstructor\n@Getter\npublic enum IconsEnum implements Icon {\nARROW_UP_BLUE(\"arrow-up #0cbfe\"),\nARROW_UP(\"arrow-up\"),\nWATERMELON(\"watermelon\"),\nDOWN(\"down\");\nprivate final String icon;\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> EnumDictionaryLOV deprecated recommended use Dictionary <p>Add standart icon and hex color code to corresponding Icon.</p> <p>For example, add </p> <p>ARROW_UP_BLUE(\"arrow-up #0cbfe9\")</p> <pre><code>@RequiredArgsConstructor\n@Getter\npublic enum IconsEnum implements Icon {\nARROW_UP_BLUE(\"arrow-up #0cbfe\"),\nARROW_UP(\"arrow-up\"),\nWATERMELON(\"watermelon\"),\nDOWN(\"down\");\nprivate final String icon;\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p><code>Step 1</code> Add standart icon and hex color code to corresponding Enum with icons.</p> <p>For example, add </p> <p>ARROW_UP_BLUE(\"arrow-up #0cbfe9\")</p> <pre><code>@RequiredArgsConstructor\n@Getter\npublic enum IconsEnum implements Icon {\nARROW_UP_BLUE(\"arrow-up #0cbfe\"),\nARROW_UP(\"arrow-up\"),\nWATERMELON(\"watermelon\"),\nDOWN(\"down\");\nprivate final String icon;\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p><code>Step 1</code> Add standart icon and hex color code to corresponding Enum with icons.</p> <p>For example, add </p> <p>ARROW_UP_BLUE(\"arrow-up #0cbfe9\")</p> <pre><code>@RequiredArgsConstructor\n@Getter\npublic enum IconsEnum implements Icon {\nARROW_UP_BLUE(\"arrow-up #0cbfe\"),\nARROW_UP(\"arrow-up\"),\nWATERMELON(\"watermelon\"),\nDOWN(\"down\");\nprivate final String icon;\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#custom-icons","title":"Custom icons","text":"<p> Live Sample \u00b7  GitHub</p> <p>Custom icons can be uploaded. Icons should be uploaded in SVG format.</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_12","title":"How does it look?","text":""},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_12","title":"How to add?","text":"Example <p><code>Step 1</code> Add icon (watermelon.svg) in folder ui/src/assets/icons/dictionaryCustomIcons</p> <p> GitHub</p> <p><code>Step 2</code> Create a link to the icon file by adding a reference to  ui/src/assets/icons/dictionaryCustomIcons/index.ts</p> <p> GitHub</p> <pre><code>    export { ReactComponent as watermelon } from './watermelon.svg'\n</code></pre> <p><code>Step 3</code> Add custom icon  to corresponding Icon. WATERMELON(\"watermelon\") <pre><code>@RequiredArgsConstructor\n@Getter\npublic enum IconsEnum implements Icon {\nARROW_UP_BLUE(\"arrow-up #0cbfe\"),\nARROW_UP(\"arrow-up\"),\nWATERMELON(\"watermelon\"),\nDOWN(\"down\");\nprivate final String icon;\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#administration-dictionary","title":"Administration dictionary","text":"<p>(since release 2.0.9)</p> <p>cxbox/core 4.0.0-M12</p> <p> Live Sample  GitHub</p> <p>This screen allows you to edit and create dictionaries .</p> <p>To apply the changes, click the \"Clear Cache\" button  on the administration screen and refresh the page on the user screen to re-request the data.</p>"},{"location":"widget/fields/field/dictionary/dictionary/#how-does-it-look_13","title":"How does it look?","text":""},{"location":"widget/fields/field/dictionary/dictionary/#how-to-add_13","title":"How to add?","text":"Example <ul> <li> <p>Step 1. Check for the presence and relevance of the files from the demo project in the <code>conf/cxbox/customization/dictionary</code> folder.</p> </li> <li> <p>Step 2. Check for the presence and relevance of the files from the demo project in the <code>/resources/meta/core/dictionary</code> folder.</p> </li> </ul> <p> Live Sample  GitHub</p>"},{"location":"widget/fields/field/dictionary/dictionary/#release","title":"Release","text":"<p>To ensure that user-made changes are not lost during the release process, follow these steps:</p> <ul> <li>Button export: Retrieve the format file containing the current reference books from the environment (stand) where the release will be deployed.</li> </ul> <p></p> <ul> <li> <p>Match the Files: Compare the downloaded reference file with the release file to ensure consistency and identify any discrepancies. This will help preserve user changes.</p> </li> <li> <p>Proceed with Release: After verifying that the files align correctly, continue with the deployment process, ensuring that user changes are retained in the updated system.</p> </li> </ul>"},{"location":"widget/fields/field/fileUpload/fileUpload/","title":"FileUpload","text":"<p><code>FileUpload</code> is a component that allows to view and attach single file</p> <p>Info</p> <ul> <li>When a file is selected, it is stored in the storage system immediately, which then generates a unique \"file ID\". When the save button is clicked, only this \"file ID\" is sent to the backend</li> <li>If a new file is selected, it will be saved as a new file in storage. Previous file remains untouched (e.g. one is free to implement custom deletion logic)</li> </ul>"},{"location":"widget/fields/field/fileUpload/fileUpload/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-to-add","title":"How to add?","text":"Example <p>For the entire application, a single file storage solution needs to be defined.  In this example file storage is minio.</p> <p>Step1 FileStorage Add file storage. <code>see more</code> FileStorage</p> <p>Step2 Add same String fields  to corresponding BaseEntity.</p> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Column\nprivate String customField;\n@Column\nprivate String customFieldId;\n}\n</code></pre> <p>Step3 Add two String fields (for file name and id)  to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldId\")\nprivate String customFieldId;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldId = entity.getCustomFieldId();\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step4 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"fileUpload\",\n\"fileIdKey\": \"customFieldId\"\n}\n]\n}\n</code></pre> <p>Step4 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"fileUpload\",\n\"fileIdKey\": \"customFieldId\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step4 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"fileUpload\",\n\"fileIdKey\": \"customFieldId\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldId);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField, \"Placeholder text\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#color","title":"Color","text":"<p>not applicable</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-does-it-look_2","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-to-add_2","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nentity.setCustomFieldId(data.getCustomFieldId());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setEnabled(MyExampleDTO_.customFieldId);\n//\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre></p> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. For <code>FileUpload field</code> filtering is case-insensitive and retrieves records containing the specified value at any position of file name (similar to SQL <code>Like %value%</code> ).</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-does-it-look_3","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-to-add_3","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldId\")\nprivate String customFieldId;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldId = entity.getCustomFieldId();\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#drilldown","title":"Drilldown","text":"<p>not applicable</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-to-add_4","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nentity.setCustomFieldId(data.getCustomFieldId());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\nif (!String.valueOf(data.getCustomField()).matches(\"[A-Za-z]+\")) {\nthrow new BusinessException().addPopup(ONLY_LETTER);\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nentity.setCustomFieldId(data.getCustomFieldId());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\n@Pattern(regexp = \"[A-Za-z]+\", message = ONLY_LETTER)\nprivate String customField;\n@SearchParameter(name = \"customFieldId\")\nprivate String customFieldId;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldId = entity.getCustomFieldId();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (!String.valueOf(dto.getCustomField()).matches(\"[A-Za-z]+\")) {\nentity.addField(MyExampleDTO_.customField.getName(), \"The field 'customField' can contain only letters.\");\n}\nif (!String.valueOf(dto.getCustomFieldAdditional()).matches(\"[A-Za-z]+\")) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' can contain only letters.\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre></p> <p><code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditionalId)) {\nentity.setCustomFieldAdditionalId(data.getCustomFieldAdditionalId());\n}\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomFieldAdditional(data.getCustomFieldAdditional());\n}\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nentity.setCustomFieldId(data.getCustomFieldId());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order. <code>FileUpload field</code> is a text field, so lexicographic sorting is used for it</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-to-add_5","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided. </p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#how-to-add_6","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldId);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/fileUpload/fileUpload/#additional-properties","title":"Additional properties","text":""},{"location":"widget/fields/field/fileUpload/fileUpload/#multi-upload-files","title":"Multi-upload files","text":"<p>We have implemented multi-file upload. You can use a dedicated drag-and-drop zone or a standard button to select your files.</p> <p>see more Multi-upload files</p>"},{"location":"widget/fields/field/hidden/hidden/","title":"Hidden","text":"<p><code>Hidden</code> is invisible technical component that allows to send field value to frontend</p>"},{"location":"widget/fields/field/hidden/hidden/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/hidden/hidden/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/hidden/hidden/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add String field to corresponding DataResponseDTO.</p> <pre><code>@Entity\n@Table(name = \"HiddenBasic\")\n@Getter\n@Setter\n@NoArgsConstructor\npublic class HiddenBasic extends BaseEntity {\nprivate String customField;\n}\n</code></pre> <p>Step2 Add String field to corresponding BaseEntity.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class HiddenBasicDTO extends DataResponseDTO {\nprivate String customField;\npublic HiddenBasicDTO(HiddenBasic entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"HiddenBasicList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"hiddenBasic\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"hidden\"\n}\n]\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"HiddenBasicInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"hiddenBasic\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"hidden\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"HiddenBasicForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"hiddenBasic\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"hidden\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/hidden/hidden/#placeholder","title":"Placeholder","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hidden/hidden/#color","title":"Color","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hidden/hidden/#readonlyeditable","title":"Readonly/Editable","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hidden/hidden/#filtering","title":"Filtering","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hidden/hidden/#drilldown","title":"Drilldown","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hidden/hidden/#validation","title":"Validation","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hidden/hidden/#sorting","title":"Sorting","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hidden/hidden/#required","title":"Required","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hint/hint/","title":"Hint","text":"<p><code>Hint</code> is a non-editable component used for indirect indication or suggestion The typical scenario involves using in a logical block Multifield</p>"},{"location":"widget/fields/field/hint/hint/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/hint/hint/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/hint/hint/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add String field  to corresponding BaseEntity. <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Column\nprivate String customField;\n@Column\nprivate String textField;\n}\n</code></pre></p> <p>Step2 Add String field  to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\nprivate String customField;\n@SearchParameter(name = \"textField\")\nprivate String textField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.textField = entity.getTextField();\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Text Field\",\n\"key\": \"textField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"hint\",\n\"showLength\": 100\n}\n]\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Text Field\",\n\"key\": \"textField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"hint\",\n\"showLength\": 100\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"textField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Text Field\",\n\"key\": \"textField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"hint\",\n\"showLength\": 100\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"textField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/hint/hint/#placeholder","title":"Placeholder","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hint/hint/#color","title":"Color","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hint/hint/#readonlyeditable","title":"Readonly/Editable","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hint/hint/#filtering","title":"Filtering","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hint/hint/#drilldown","title":"Drilldown","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hint/hint/#validation","title":"Validation","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hint/hint/#sorting","title":"Sorting","text":"<p>not applicable</p>"},{"location":"widget/fields/field/hint/hint/#required","title":"Required","text":"<p>not applicable</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/","title":"InlinePickList","text":"<p><code>InlinePickList</code> is component similar to Picklist, but uses drop-down instead of popup for value selection</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-to-add","title":"How to add?","text":"Example <ul> <li> <p>Step 1. Popup</p> <p>In the following example, MyEntity entity has a OneToOne/ManyToOne reference to the MyEntityPick entity. Link is made by id, e.g. MyEntity.customFieldId = MyEntityPick.id. Also, is this example we will use one <code>additional field</code> MyEntityPick.customField, that will be shown on MyEntity widget</p> <ul> <li> <p>Step 1.1 Add String <code>additional field</code>  to corresponding BaseEntity.     <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityPick extends BaseEntity {\n@Column\nprivate String customField;\n}\n</code></pre></p> </li> <li> <p>Step 1.2 Add String <code>additional field</code> to corresponding DataResponseDTO.     <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityPickDTO extends DataResponseDTO {\n@SearchParameter\nprivate String customField;\npublic MyEntityPickDTO(MyEntityPick entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> </li> <li> <p>Step 1.3  Create Popup List .widget.json.</p> <pre><code>{\n\"title\": \"myEntityPickListPopup Title\",\n\"name\": \"myEntityPickListPopupPickListPopup\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre> </li> <li> <p>Step 1.4 Add fields.enableFilter to corresponding FieldMetaBuilder.     <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyEntityPickDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nfields.enableFilter(MyEntityPickDTO_.customField);\nfields.enableSort(MyEntityPickDTO_.customField);\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyEntityPickDTO_.customField);\n}\nfields.enableSort(MyEntityPickDTO_.id);\n}\n</code></pre></p> </li> </ul> </li> <li> <p>Step 2 Add Popup to .view.json.</p> list.view.jsonform.view.json <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"My example List\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"template\": \"DashboardView\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityPickListPopupPickListPopup\",\n\"position\": 20,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <pre><code>{\n\"name\": \"myexampleform\",\n\"title\": \"My Example Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityPickListPopupPickListPopup\",\n\"position\": 20,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> </li> <li> <p>Step3 Add MyEntityPick field to corresponding BaseEntity.     <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@JoinColumn(name = \"CUSTOM_FIELD_ID\")\n@ManyToOne\nprivate MyEntityPick customFieldEntity;\n}\n</code></pre></p> </li> <li> <p>Step4 Add two fields (for id and for <code>additional field</code>) to corresponding DataResponseDTO.     <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldEntity.customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldEntity.id\", provider = LongValueProvider.class)\nprivate Long customFieldId;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldId = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(BaseEntity::getId)\n.orElse(null);\nthis.customField = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(MyEntityPick::getCustomField)\n.orElse(null);\n}\n}\n</code></pre></p> </li> <li> <p>Step5 Add bc myEntityPickListPopup to corresponding EnumBcIdentifier.</p> <p>Info</p> <p><code>myEntityPickListPopup</code> business component needs to be a child of the business component from which the popup window is invoked.</p> <pre><code>    myExampleBc(MyExampleService.class),\nmyEntityPickListPopup(myExampleBc, MyEntityPickPickListService.class);\n</code></pre> </li> </ul> List widgetInfo widgetForm widget <p>Step6 Add popupBcName and pickMap to .widget.json. <code>pickMap</code> - maping for field Picklist to MyEntity</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n}\n}\n]\n}\n</code></pre> <p>Step6 Add popupBcName and pickMap to .widget.json. <code>pickMap</code> - maping for field Picklist to MyEntity</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n}\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step6 Add popupBcName and pickMap to .widget.json. <code>pickMap</code> - maping for field Picklist to MyEntity</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n}\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.   <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldId);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField, \"Placeholder text\");\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null.  <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldEntity.customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldEntity.id\", provider = LongValueProvider.class)\nprivate Long customFieldId;\nprivate String customFieldColor;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldId = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(BaseEntity::getId)\n.orElse(null);\nthis.customField = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(MyEntity::getCustomField)\n.orElse(null);\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n},\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n},\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nentity.setCustomFieldEntity(data.getCustomFieldId() != null\n? entityManager.getReference(MyEntityPick.class, data.getCustomFieldId())\n: null);\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldId);\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre></p> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. Search uses in operator which compares ids in this case.</p> <p>Tips</p> <p>By default, filtration popup is auto-generated from field-editing popup (e.g. same fields, filters and so on will appear on both widgets).</p> <p>Optionally, a separate filtration widget can still be provided.</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldEntity.customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldEntity.id\", provider = LongValueProvider.class)\nprivate Long customFieldId;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldId = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(BaseEntity::getId)\n.orElse(null);\nthis.customField = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(MyEntity::getCustomField)\n.orElse(null);\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldId);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\" + PlatformMyExampleController.myExampleBc + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n},\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre></p> <p>Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json.</p> <p><pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n},\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nif (StringUtils.isNotEmpty(data.getCustomField())\n&amp;&amp; !data.getCustomField().matches(\"[A-Za-z]+\")\n) {\nthrow new BusinessException().addPopup(ONLY_LETTER);\n}\nentity.setCustomFieldEntity(data.getCustomFieldId() != null\n? entityManager.getReference(MyEntity.class, data.getCustomFieldId())\n: null);\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldEntity.customField\")\n@Pattern(regexp = \"[A-Za-z]+\", message = ONLY_LETTER)\nprivate String customField;\n@SearchParameter(name = \"customFieldEntity.id\", provider = LongValueProvider.class)\nprivate Long customFieldId;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldId = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(e -&gt; e.getId())\n.orElse(null);\nthis.customField = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(e -&gt; e.getCustomField())\n.orElse(null);\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (!dto.getCustomField().matches(\"[A-Za-z]+\")) {\nentity.addField(MyExampleDTO_.customField.getName(), \"The field 'customField' can contain only letters.\");\n}\nif (!dto.getCustomFieldAdditional().matches(\"[A-Za-z]+\")) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' can contain only letters.\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre></p> <p><code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order. Field has lexicographic sorting.</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided. </p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/inlinePickList/inlinePickList/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldId);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/","title":"Input","text":"<p><code>Field Input</code> component is used for text editing. It allows editing and displaying single-line text.</p>"},{"location":"widget/fields/field/input/input/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/input/input/#how-to-add","title":"How to add?","text":"Example With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing form widget</p> <p></p> <p>Step1  Add String field  to corresponding BaseEntity. <pre><code>@Entity\n@Table(name = \"InputBasic\")\n@Getter\n@Setter\n@NoArgsConstructor\npublic class InputBasic extends BaseEntity {\nprivate String customField;\n@Column\nprivate String customFieldRO;\n}\n</code></pre></p> <p>Step2 Add String field  to corresponding DataResponseDTO. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class InputBasicDTO extends DataResponseDTO {\nprivate String customField;\nprivate String customFieldRO;\npublic InputBasicDTO(InputBasic entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldRO = entity.getCustomFieldRO();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"InputBasicList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"InputBasic\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n]\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"InputBasicInfo\",\n\"title\": \"Info\",\n\"type\": \"Info\",\n\"bc\": \"InputBasic\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"InputBasicForm\",\n\"title\": \"Form\",\n\"type\": \"Form\",\n\"bc\": \"InputBasic\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\"\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application.</p>"},{"location":"widget/fields/field/input/input/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/input/input/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;InputPlaceholderDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nInputPlaceholderDTO_.customField\n);\nfields.setPlaceholder(InputPlaceholderDTO_.customField, \"Placeholder text\");\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/input/input/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null.  <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class InputColorDTO extends DataResponseDTO {\nprivate String customField;\nprivate String customFieldColor;\npublic InputColorDTO(InputColor entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"InputColorList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"InputColor\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"InputColorInfo\",\n\"title\": \"Info\",\n\"type\": \"Info\",\n\"bc\": \"InputColor\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"InputColorConstList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"InputColorConst\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"InputColorConstInfo\",\n\"title\": \"Info\",\n\"type\": \"Info\",\n\"bc\": \"InputColorConst\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/input/input/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\nprotected ActionResultDTO&lt;InputBasicDTO&gt; doUpdateEntity(InputBasic entity, InputBasicDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(InputBasicDTO_.customFieldRO)) {\nentity.setCustomFieldRO(data.getCustomFieldRO());\n}\nif (data.isFieldChanged(InputBasicDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;InputBasicDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nInputBasicDTO_.customField\n);\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;InputCreateEditDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre></p> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. For <code>Input field</code> filtering is case-insensitive and retrieves records containing the specified value at any position (similar to SQL <code>Like %value%</code> ). </p>"},{"location":"widget/fields/field/input/input/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/input/input/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class InputFiltrationDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\n@SearchParameter(name = \"brand\")\nprivate String brand;\npublic InputFiltrationDTO(InputFiltration entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.brand = entity.getBrand();\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;InputFiltrationDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(InputFiltrationDTO_.customField);\n}\nfields.enableFilter(InputFiltrationDTO_.brand);\nfields.enableFilter(InputFiltrationDTO_.customField);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/input/input/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>\u0421lick on clip </p> <p></p>"},{"location":"widget/fields/field/input/input/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;InputDrilldownDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(InputDrilldownDTO_.customField);\nfields.setEnabled(\nInputDrilldownDTO_.customField\n);\nfields.setRequired(\nInputDrilldownDTO_.customField\n);\nfields.setDrilldown(\nInputDrilldownDTO_.customField,\nDrillDownType.INNER,\n\"/screen/InputDrilldown/view/InputDrilldownform/\" + CxboxInputDrilldownController.InputDrilldown + \"/\" + id\n);\nfields.setDrilldown(\nInputDrilldownDTO_.customField,\nDrillDownType.INNER,\n\"/screen/InputDrilldown/view/InputDrilldowninfo/\" + CxboxInputDrilldownController.InputDrilldown + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"InputDrilldownList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"InputDrilldown\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre></p> <p>Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json.</p> <p><pre><code>{\n\"name\": \"InputDrilldownInfo\",\n\"title\": \"Info\",\n\"type\": \"Info\",\n\"bc\": \"InputDrilldown\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"InputDrilldownForm\",\n\"title\": \"Form\",\n\"type\": \"Form\",\n\"bc\": \"InputDrilldown\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/input/input/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/input/input/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable </p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/input/input/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;InputValidationBusinessExceptionDTO&gt; doUpdateEntity(InputValidationBusinessExc entity,\nInputValidationBusinessExceptionDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(InputValidationBusinessExceptionDTO_.customField)) {\nif (StringUtils.isNotEmpty(data.getCustomField())\n&amp;&amp; !String.valueOf(data.getCustomField()).matches(\"[A-Za-z]+\")\n) {\nthrow new BusinessException().addPopup(ONLY_LETTER);\n}\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;InputValidationRuntimeExceptionDTO&gt; doUpdateEntity(InputValidationRuntimeException entity,\nInputValidationRuntimeExceptionDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(InputValidationRuntimeExceptionDTO_.customField)) {\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;InputValidationDTO&gt; getActions() {\nreturn Actions.&lt;InputValidationDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\n@Pattern(regexp = \"[A-Za-z]+\", message = ONLY_LETTER)\nprivate String customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (!String.valueOf(dto.getCustomField()).matches(\"[A-Za-z]+\")) {\nentity.addField(MyExampleDTO_.customField.getName(), \"The field 'customField' can contain only letters.\");\n}\nif (!String.valueOf(dto.getCustomFieldAdditional()).matches(\"[A-Za-z]+\")) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' can contain only letters.\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre></p> <p><code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomFieldAdditional(data.getCustomFieldAdditional());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order. <code>Input field</code> is a text field, so lexicographic sorting is used for it</p>"},{"location":"widget/fields/field/input/input/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/input/input/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;InputSortDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(InputSortDTO_.customField);\n}\nfields.enableSort(InputSortDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/input/input/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided. By default, <code>Input field</code> is not required</p>"},{"location":"widget/fields/field/input/input/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/input/input/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;InputRequiredDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nInputRequiredDTO_.customField\n);\nfields.setRequired(\nInputRequiredDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/input/input/#additional-properties","title":"Additional properties","text":""},{"location":"widget/fields/field/input/input/#maxinput","title":"maxInput","text":"<p> Live Sample \u00b7  GitHub</p> <p>Specifies the maximum number of characters to enter</p>"},{"location":"widget/fields/field/input/input/#how-does-it-look_9","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/input/input/#how-to-add_9","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Add maxInput to .widget.json. <pre><code>{\n\"name\": \"MaxInputList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"maxInput\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"maxInput\": 2\n}\n]\n}\n</code></pre></p> <p>not applicable</p> <p>Add maxInput to .widget.json. <pre><code>{\n\"name\": \"MaxInputForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"maxInput\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"maxInput\": 2\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/","title":"Money","text":"<p><code>Money</code> is a component for showing and editing fields containing money</p>"},{"location":"widget/fields/field/money/money/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/money/money/#how-to-add","title":"How to add?","text":"Example <p>Option1</p> <p>One will usually use Long, Double or BigDecimal java types in DTO and Entity for storing this field type.</p> <p>Next example shows Long usage: Step1 Add Double field  to corresponding DataResponseDTO. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\nprivate Double customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> Step2 Add Double field  to corresponding BaseEntity. <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Column\nprivate Double customField;\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2\n}\n]\n}\n</code></pre></p> <p>Step3 Add to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/money/money/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/money/money/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField, \"100000.00\");\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/money/money/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\nprivate Double customField;\nprivate String customFieldColor;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2,\n\"bgColorKey\": \"customFieldColor\",\n\"currency\": \"\u20bd\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2,\n\"bgColorKey\": \"customFieldColor\",\n\"currency\": \"\u20bd\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"digits\": 2,\n\"type\": \"money\",\n\"bgColorKey\": \"customFieldColor\",\n\"currency\": \"\u20bd\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2,\n\"bgColor\": \"#edaa\",\n\"currency\": \"\u20bd\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2,\n\"bgColor\": \"#edaa\",\n\"currency\": \"\u20bd\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2,\n\"bgColor\": \"#edaa\",\n\"currency\": \"\u20bd\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/money/money/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre> Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria.</p> <p>Search uses:</p> <ul> <li><code>greaterOrEqualThan</code>(&gt;=) and <code>lessOrEqualThan</code>(&lt;=) operators.</li> <li><code>equals</code> (=) operator.</li> </ul>"},{"location":"widget/fields/field/money/money/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget By RangeEquals <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/money/money/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Info</p> <p>By default, filtration is carried out by range. If you want to turn it off, indicate <code>cxbox.widget.fields.filter-by-range-enabled-default: false</code> in meta. see more</p> <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\nprivate Double customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableFilter(MyExampleDTO_.customField);\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/money/money/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/money/money/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\" + PlatformMyExampleController.myExampleBc + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2,\n\"drillDown\": \"true\",\n\"currency\": \"\u20bd\"\n}\n]\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown</p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2,\n\"drillDown\": \"true\",\n\"currency\": \"\u20bd\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/money/money/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/money/money/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/money/money/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nif (data.getCustomField() &lt; 100000) {\nthrow new BusinessException().addPopup(LESS_100000);\n}\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Use if:</p> <p>Requires a simple fields check (javax validation)</p> <p>Add javax.validation to corresponding DataResponseDTO. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\n@DecimalMin(value = \"100000.00\", message = LESS_100000)\nprivate Double customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (dto.getCustomField() &lt; 100000) {\nentity.addField(MyExampleDTO_.customField.getName(), \"The field 'customField' cannot be less than 100 000.00\");\n}\nif (dto.getCustomField() &lt; 100000) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' cannot be less than 100 000.00\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre></p> <p><code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order.</p>"},{"location":"widget/fields/field/money/money/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/money/money/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/money/money/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided.  By default, UI sets <code>Money</code> value to 0 when user deletes it and <code>nullable</code> is not set or equals to false. See more [Additional properties-nullable]</p>"},{"location":"widget/fields/field/money/money/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/money/money/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#additional-properties","title":"Additional properties","text":""},{"location":"widget/fields/field/money/money/#nullable","title":"nullable","text":"<p> Live Sample \u00b7  GitHub</p> <p>By default, UI sets <code>Money</code> value to 0 when user deletes it. If <code>nullable</code> equals to true, then UI keeps empty value as usual</p>"},{"location":"widget/fields/field/money/money/#how-does-it-look_9","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/money/money/#how-to-add_9","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Add nullable to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"digits\": 2,\n\"type\": \"money\",\n\"nullable\": true,\n\"currency\": \"\u20bd\"\n}\n]\n}\n</code></pre></p> <p>not applicable </p> <p>Add nullable to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"digits\": 2,\n\"type\": \"money\",\n\"nullable\": true,\n\"currency\": \"\u20bd\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/money/money/#currency","title":"currency","text":"<p><code>Currency</code> allows you to add and display currency values within the interface.</p> <p>Constant currency</p> <p> Live Sample \u00b7  GitHub</p> <p>If you only need to display a fixed currency value, you can use a constant currency.</p>"},{"location":"widget/fields/field/money/money/#how-does-it-look_10","title":"How does it look?","text":"List widgetInfo widgetForm widgetAdditionalInfo widgetGroupingHierarchy widget"},{"location":"widget/fields/field/money/money/#how-to-add_10","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Add \"currency\"   to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"type\": \"List\",\n\"title\": \"List constant currency money\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2,\n\"currency\": \"\u20bd\"\n}\n]\n}\n</code></pre></p> <p>Add \"currency\"   to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"type\": \"Info\",\n\"title\": \"Info constant currency money\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2,\n\"currency\": \"\u20bd\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Add \"currency\"   to .widget.json.  <pre><code>{\n\"name\": \"MyExampleForm\",\n\"type\": \"Form\",\n\"title\": \"Form constant currency money\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"money\",\n\"digits\": 2,\n\"currency\": \"\u20bd\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multifield/multifield/","title":"Multifield","text":"<p><code>Multifield</code> is a logical block containing any number of other field types. All fields in a logical block are readonly. The typical scenario involves using a common field type (e.g., input, date) for 'main' data and a hint field type for 'secondary' data</p>"},{"location":"widget/fields/field/multifield/multifield/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multifield/multifield/#how-does-it-look","title":"How does it look?","text":"<p>Logical blocks can be shown in different styles</p> <p>1) Style 'list' is displaying each entry on its own line</p> <p>2) Style 'inline' is displaying all data on the same line</p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p> <p>Block containing with field type hint. <code>see more</code> hint</p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/multifield/multifield/#how-to-add","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Add <code>fields</code> and <code>style</code> to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom multifield Style 'List'\",\n\"key\": \"customFieldMulti\",\n\"type\": \"multifield\",\n\"style\": \"list\",\n\"fields\": [\n{\n\"title\": \"Custom Field Multi\",\n\"key\": \"customFieldMulti\",\n\"type\": \"input\"\n},\n{\n\"title\": \"New Custom Field Multi\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"input\"\n}\n]\n},\n{\n\"title\": \"Custom multifield Style 'Inline'\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"multifield\",\n\"style\": \"inline\",\n\"fields\": [\n{\n\"title\": \"Custom Field Multi\",\n\"key\": \"customFieldMulti\",\n\"type\": \"input\"\n},\n{\n\"title\": \"New Custom Field Multi\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"input\"\n}\n]\n},\n{\n\"title\": \"Custom Field Additional\",\n\"key\": \"customFieldAdditional\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom multifield hint\",\n\"key\": \"customFieldMultiHint\",\n\"type\": \"multifield\",\n\"style\": \"list\",\n\"fields\": [\n{\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Information Field\",\n\"key\": \"informationField\",\n\"type\": \"hint\",\n\"showLength\": 100\n}\n]\n}\n]\n}\n</code></pre></p> <p>Add <code>fields</code> and <code>style</code> to .widget.json.</p> <p>Multifield key use for to determine the order in which fields are displayed in the interface(\"options.layout\").</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom multifield style 'List'\",\n\"key\": \"customFieldMultiField\",\n\"type\": \"multifield\",\n\"style\": \"list\",\n\"fields\": [\n{\n\"label\": \"New Custom Field Multi\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field Multi\",\n\"key\": \"customFieldMulti\",\n\"type\": \"input\"\n}\n]\n},\n{\n\"label\": \"Custom multifield style 'Inline'\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"multifield\",\n\"style\": \"inline\",\n\"fields\": [\n{\n\"label\": \"New Custom Field Multi\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field Multi\",\n\"key\": \"customFieldMulti\",\n\"type\": \"input\"\n}\n]\n},\n{\n\"label\": \"Custom Field Additional\",\n\"key\": \"customFieldAdditional\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom multifield hint\",\n\"key\": \"customFieldMultifieldHint\",\n\"type\": \"multifield\",\n\"style\": \"list\",\n\"fields\": [\n{\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"key\": \"informationField\",\n\"type\": \"hint\",\n\"showLength\": 100\n}\n]\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldAdditionalMulti\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldMultiField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldAdditional\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldMultifieldHint\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Add <code>fields</code> and <code>style</code> to .widget.json.</p> <p>Multifield key use for to determine the order in which fields are displayed in the interface(\"options.layout\").</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom multifield\",\n\"key\": \"customFieldMulti\",\n\"type\": \"multifield\",\n\"style\": \"list\",\n\"fields\": [\n{\n\"label\": \"New Custom Field Multi\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field Multi\",\n\"key\": \"customFieldMulti\",\n\"type\": \"input\"\n}\n]\n},\n{\n\"label\": \"Custom multifield style 'Inline'\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"multifield\",\n\"style\": \"inline\",\n\"fields\": [\n{\n\"label\": \"New Custom Field Multi\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field Multi\",\n\"key\": \"customFieldMulti\",\n\"type\": \"input\"\n}\n]\n},\n{\n\"label\": \"Custom Field Additional\",\n\"key\": \"customFieldAdditional\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom multifield hint\",\n\"key\": \"customFieldMultiHint\",\n\"type\": \"multifield\",\n\"style\": \"list\",\n\"fields\": [\n{\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"key\": \"informationField\",\n\"type\": \"hint\",\n\"showLength\": 100\n}\n]\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldAdditionalMulti\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldMulti\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldAdditional\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldMultiHint\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multifield/multifield/#placeholder","title":"Placeholder","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multifield/multifield/#color","title":"Color","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multifield/multifield/#readonlyeditable","title":"Readonly/Editable","text":"<p>All fields in a logical block are readonly.</p>"},{"location":"widget/fields/field/multifield/multifield/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. Search by =</p>"},{"location":"widget/fields/field/multifield/multifield/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p>Filter not working with field type hint. <code>see more</code> hint</p>"},{"location":"widget/fields/field/multifield/multifield/#how-to-add_1","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldAdditional\")\nprivate String customFieldAdditional;\nprivate String informationField;\n@SearchParameter(name = \"customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldAdditionalMulti\")\nprivate String customFieldAdditionalMulti;\n@SearchParameter(name = \"customFieldMulti\")\nprivate String customFieldMulti;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldAdditional = entity.getCustomFieldAdditional();\nthis.informationField = entity.getInformationField();\nthis.customField = entity.getCustomField();\nthis.customFieldAdditionalMulti = entity.getCustomFieldAdditionalMulti();\nthis.customFieldMulti = entity.getCustomFieldMulti();\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>@SuppressWarnings(\"EmptyMethod\")\n@Service\npublic class MyExampleMeta extends FieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldMulti);\nfields.setEnabled(MyExampleDTO_.customFieldAdditionalMulti);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setEnabled(MyExampleDTO_.informationField);\nfields.setEnabled(MyExampleDTO_.customFieldAdditional);\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableFilter(MyExampleDTO_.customFieldMulti);\nfields.enableFilter(MyExampleDTO_.customFieldAdditionalMulti);\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableFilter(MyExampleDTO_.informationField);\nfields.enableFilter(MyExampleDTO_.customFieldAdditional);\n}\n}\n</code></pre></p> <p>Step 3  Add field for block filter in parameter <code>key</code>. </p> <p>For example, for filtering on field  \"customFieldAdditionalMulti\" -  \"key\" = \"customFieldAdditionalMulti\"</p> <pre><code>{\n\"title\": \"Custom multifield\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"multifield\",\n\"style\": \"list\",\n\"fields\": [\n{\n\"title\": \"Custom Field Multi\",\n\"key\": \"customFieldMulti\",\n\"type\": \"input\"\n},\n{\n\"title\": \"New Custom Field Multi\",\n\"key\": \"customFieldAdditionalMulti\",\n\"type\": \"input\"\n}\n]\n}\n</code></pre> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multifield/multifield/#drilldown","title":"Drilldown","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multifield/multifield/#validation","title":"Validation","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multifield/multifield/#sorting","title":"Sorting","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multifield/multifield/#required","title":"Required","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/","title":"MultipleSelect","text":"<p><code>MultipleSelect</code> is a component that allows to select multiple values from dropdown list of predefined values</p> <p>Tips</p> <p>For this field type let's talk about number of rows in popup and number of selected rows.Number of rows in popup: Use for dictionaries or slowly-growing entities, e.g. no more than 1000 values (all values are loaded in memory). Otherwise, use multivalue.Number of selected rows: same limits as for 'Number of rows in popup'</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-to-add","title":"How to add?","text":"Example <p>Step1 Create Enum. Recommend that use const key value and dynamic value for visual display. <pre><code>@Getter\n@AllArgsConstructor\npublic enum CustomFieldEnum {\nHIGH(\"High\"),\nMIDDLE(\"Middle\"),\nLOW(\"Low\");\n@JsonValue\nprivate final String value;\npublic static CustomFieldEnum getByValue(@NonNull String value) {\nreturn Arrays.stream(CustomFieldEnum.values())\n.filter(enm -&gt; Objects.equals(enm.getValue(), value))\n.findFirst()\n.orElse(null);\n}\n}\n</code></pre> Step2 Add field Custom Field to corresponding BaseEntity.</p> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Enumerated(value = EnumType.STRING)\n@CollectionTable(name = \"CUSTOM_FIELD_251\", joinColumns = @JoinColumn(name = \"MyEntity_ID\"))\n@ElementCollection(targetClass = CustomFieldEnum.class)\n@Column(name = \"VALUE\", nullable = false)\nprivate Set&lt;CustomFieldEnum&gt; customField = new HashSet&lt;&gt;();\n}\n</code></pre> <p>Step3  Add field Custom Field to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@EnumValueProvider.BaseEnum(value = CustomFieldEnum.class)\n@SearchParameter(name = \"customField\", multiFieldKey = EnumValueProvider.class, provider = MultiFieldValueProvider.class)\nprivate MultivalueField customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField().stream()\n.collect(MultivalueField.toMultivalueField(Enum::name, CustomFieldEnum::getValue));\n}\n}\n</code></pre> <p>Step4 Add fields.setConcreteValues to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setConcreteValues(MyExampleDTO_.customField, Arrays.stream(CustomFieldEnum.values())\n.map(CustomFieldEnum::getValue)\n.map(e -&gt; new SimpleDictionary(e, e))\n.toList());\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step5 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multipleSelect\"\n}\n]\n}\n</code></pre> <p>Step5 Add to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multipleSelect\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Step5 Add to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multipleSelect\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setConcreteValues(MyExampleDTO_.customField, Arrays.stream(org.demo.documentation.fields.multipleselect.basic.enums.CustomFieldEnum.values())\n.map(org.demo.documentation.fields.multipleselect.basic.enums.CustomFieldEnum::getValue)\n.map(e -&gt; new SimpleDictionary(e, e))\n.toList());\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField, \"Placeholder text\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#color","title":"Color","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-does-it-look_2","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-to-add_2","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(\ndata.getCustomField().getValues()\n.stream()\n.map(v -&gt; CustomFieldEnum.getByValue(v.getValue()))\n.collect(Collectors.toSet()));\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setConcreteValues(MyExampleDTO_.customField, Arrays.stream(CustomFieldEnum.values())\n.map(CustomFieldEnum::getValue)\n.map(e -&gt; new SimpleDictionary(e, e))\n.toList());\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setConcreteValues(MyExampleDTO_.customField, Arrays.stream(org.demo.documentation.fields.multipleselect.basic.enums.CustomFieldEnum.values())\n.map(org.demo.documentation.fields.multipleselect.basic.enums.CustomFieldEnum::getValue)\n.map(e -&gt; new SimpleDictionary(e, e))\n.toList());\n}\n</code></pre></p> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. Search uses <code>in</code> operator.</p> <p>The filter component displays a text search field and scrollbar based on the number of available filter values. (since release 2.0.13)</p> <ul> <li> <p>The search input and scrollbar appear only when the number of filterable values exceeds   7 items (7 Default count items -configurable via frontend constant).</p> </li> <li> <p>The Apply button shows a counter of selected items (e.g., <code>Apply (5)</code>).</p> </li> <li>If the selection count exceeds  7 items, it displays <code>Apply (N+)</code> (e.g., <code>Apply (9+)</code>).</li> </ul>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-does-it-look_3","title":"How does it look?","text":"List widgetInfo widgetForm widget &lt; Default count items&gt; Default count items <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-to-add_3","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@EnumValueProvider.BaseEnum(value = CustomFieldEnum.class)\n@SearchParameter(name = \"customField\", multiFieldKey = EnumValueProvider.class, provider = MultiFieldValueProvider.class)\nprivate MultivalueField customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField().stream()\n.collect(MultivalueField.toMultivalueField(Enum::name, CustomFieldEnum::getValue));\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.setConcreteFilterValues(MyExampleDTO_.customField, Arrays\n.stream(CustomFieldEnum.values())\n.map(en -&gt; new SimpleDictionary(en.name(), en.getValue()))\n.collect(Collectors.toList())\n);\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p>Configuration Default count items</p> <ul> <li>Location: <code>\\ui\\src\\constants\\filter.ts</code></li> <li> <p>Variables:</p> <ul> <li><code>checkboxFilterMaxVisibleItems</code> \u2013 Controls when scroll/search appear.</li> <li><code>checkboxFilterCounterLimit</code> \u2013 Sets the maximum number before switching to <code>+</code> notation.</li> </ul> </li> </ul> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#drilldown","title":"Drilldown","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-to-add_4","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\ndata.getCustomField().getValues()\n.stream()\n.filter(val -&gt; val.getValue().equals(CustomFieldEnum.HIGH.getValue()))\n.findFirst()\n.orElseThrow(() -&gt; new BusinessException().addPopup(\"The field  can contain 'High'\"));\nentity.setCustomField(\ndata.getCustomField().getValues()\n.stream()\n.map(v -&gt; CustomFieldEnum.getByValue(v.getValue()))\n.collect(Collectors.toSet()));\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(\ndata.getCustomField().getValues()\n.stream()\n.map(v -&gt; CustomFieldEnum.getByValue(v.getValue()))\n.collect(Collectors.toSet()));\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation)</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@NotNull(message = \"Custom message about error\")\n@EnumValueProvider.BaseEnum(value = CustomFieldEnum.class)\n@SearchParameter(name = \"customField\", multiFieldKey = EnumValueProvider.class, provider = MultiFieldValueProvider.class)\nprivate MultivalueField customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField().stream()\n.collect(MultivalueField.toMultivalueField(Enum::name, CustomFieldEnum::getValue));\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nboolean customFieldFlg = dto.getCustomField().getValues()\n.stream()\n.anyMatch(val -&gt;\nCustomFieldEnum.HIGH.getValue().equals(val.getValue()));\nboolean customFieldAdditionalFlg = dto.getCustomFieldAdditional().getValues()\n.stream()\n.anyMatch(val -&gt;\nCustomFieldEnum.HIGH.getValue().equals(val.getValue()));\nif (customFieldFlg) {\nentity.addField(\nMyExampleDTO_.customField.getName(),\n\"Custom message about error\"\n);\n}\nif  (customFieldAdditionalFlg) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"Custom message about error\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre></p> <p><code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(\ndata.getCustomField().getValues()\n.stream()\n.map(v -&gt; CustomFieldEnum.getByValue(v.getValue()))\n.collect(Collectors.toSet()));\n}\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomField(\ndata.getCustomField().getValues()\n.stream()\n.map(v -&gt; CustomFieldEnum.getByValue(v.getValue()))\n.collect(Collectors.toSet()));\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#sorting","title":"Sorting","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided.</p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/multipleSelect/multipleSelect/#how-to-add_5","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setConcreteValues(MyExampleDTO_.customField, Arrays.stream(org.demo.documentation.fields.multipleselect.basic.enums.CustomFieldEnum.values())\n.map(org.demo.documentation.fields.multipleselect.basic.enums.CustomFieldEnum::getValue)\n.map(e -&gt; new SimpleDictionary(e, e))\n.toList());\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/","title":"Multivalue","text":"<p><code>Multivalue</code> is a component that allows to select multiple values from Popup List of entities</p> <p>Tips</p> <p>For this field type we need to talk about number of rows in popup and number of selected rows.Number of rows in popup: Feel free to use this field type for large entities of any size (only one page is loaded in memory).Number of selected rows: should be &lt;1000-10000, because selected rows are stored in memory</p>"},{"location":"widget/fields/field/multivalue/multivalue/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/multivalue/multivalue/#how-to-add","title":"How to add?","text":"Example <ul> <li> <p>Step 1. AssocListPopup</p> <p>In the following example, MyEntity entity has a ManyToMany reference to the MyEntityMultivalue entity.  Link is made by id in table MyEntity_MyEntityMultivalue, e.g. MyEntity.id = MyEntity_MyEntityMultivalue.MyEntityId, MyEntityMultivalue.id = MyEntity_MyEntityMultivalue.MyEntityMultivalueId.</p> <ul> <li>Step 1.1 Create link table for ManyToMany (MyEntity_MyEntityMultivalue).</li> <li>Step 1.2 Create Entity MyEntityMultivalue.</li> <li>Step 1.3 Create DTO MyEntityMultivalueDTO.</li> <li> <p>Step 1.4 Add String <code>additional field</code>  to corresponding BaseEntity.</p> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityMultivalue extends BaseEntity {\n@Column\nprivate String customField;\n}\n</code></pre> </li> <li> <p>Step 1.5 Add String <code>additional field</code> to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityMultivalueDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\npublic MyEntityMultivalueDTO(MyEntityMultivalue entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> </li> <li> <p>Step 1.6.AssocListPopup  Create AssocListPopup to .widget.json.     <pre><code>{\n\"title\": \"myEntityAssocListPopup title\",\n\"name\": \"myEntityAssocListPopup\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityAssocListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre></p> </li> <li> <p>Step2 Add List field to corresponding BaseEntity.</p> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@JoinTable(name = \"MyEntity_MyEntity\",\njoinColumns = @JoinColumn(name = \"MyEntity_id\"),\ninverseJoinColumns = @JoinColumn(name = \"MyEntity_id\")\n)\n@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})\nprivate List&lt;MyEntityMultivalue&gt; customFieldList = new ArrayList&lt;&gt;();\n@Column\nprivate String customFieldAdditional;\n}\n</code></pre> </li> <li> <p>Step 3 Add MultivalueField field to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldList.id\", provider = LongValueProvider.class)\nprivate MultivalueField customField;\nprivate String customFieldCalc;\n@SearchParameter(name = \"customFieldAdditional\")\nprivate String customFieldAdditional;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomFieldList().stream().collect(MultivalueField.toMultivalueField(\ne -&gt; String.valueOf(e.getId()),\nMyEntityMultivalue::getCustomField\n));\nthis.customFieldCalc = StringUtils.abbreviate(entity.getCustomFieldList().stream().map(MyEntityMultivalue::getCustomField\n).collect(Collectors.joining(\",\")), 12);\nthis.customFieldAdditional = entity.getCustomFieldAdditional();\n}\n}\n</code></pre> </li> <li> <p>Step4 Add bc MyEntityMultivalueAssocListPopup to corresponding EnumBcIdentifier.</p> <pre><code>    myExampleBc(MyExampleService.class),\nmyEntityAssocListPopup(myExampleBc, MyEntityMultivalueService.class);\n</code></pre> </li> <li> <p>Step5 Add AssocListPopup widget to view.</p> </li> </ul> List widgetInfo widgetForm widget <p>Step 6 Add popupBcName and assocValueKey to .widget.json.</p> <p><code>popupBcName</code> - name bc Step 1.6.AssocListPopup</p> <p><code>assocValueKey</code> - field for opening AssocListPopup</p> <p><code>displayedKey</code> - text field usually containing contcatenated values from linked rows on List widget</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"popupBcName\": \"myEntityAssocListPopup\",\n\"assocValueKey\": \"customField\",\n\"displayedKey\": \"customFieldCalc\"\n}\n]\n}\n</code></pre> <p>Step 6 Add to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"popupBcName\": \"myEntityAssocListPopup\",\n\"assocValueKey\": \"customField\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Step 6 Add popupBcName and assocValueKey to .widget.json.</p> <p><code>popupBcName</code> - name bc Step 1.6.AssocListPopup</p> <p>`assocValueKey' - field for open AssocListPopup</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"popupBcName\": \"myEntityAssocListPopup\",\n\"assocValueKey\": \"customField\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> </li> </ul>"},{"location":"widget/fields/field/multivalue/multivalue/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField, \"Placeholder text\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityMultivalueDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\npublic MyEntityMultivalueDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"popupBcName\": \"myEntityAssocListPopup\",\n\"assocValueKey\": \"customField\",\n\"displayedKey\": \"customFieldCalc\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"popupBcName\": \"myEntityAssocListPopup\",\n\"assocValueKey\": \"customField\",\n\"bgColor\": \"#edaa\",\n\"displayedKey\": \"customFieldCalc\"\n}\n]\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomFieldAdditional(data.getCustomFieldAdditional());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.getCustomFieldList().clear();\nentity.getCustomFieldList().addAll(data.getCustomField().getValues().stream()\n.map(MultivalueFieldSingleValue::getId)\n.filter(Objects::nonNull)\n.map(Long::parseLong)\n.map(e -&gt; entityManager.getReference(MyEntityMultivalue.class, e))\n.toList());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldAdditional);\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre></p> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. Search uses in operator which compares ids in this case.</p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldList.id\", provider = LongValueProvider.class)\nprivate MultivalueField customField;\nprivate String customFieldCalc;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomFieldList().stream().collect(MultivalueField.toMultivalueField(\ne -&gt; String.valueOf(e.getId()),\nMyEntity::getCustomField\n));\nthis.customFieldCalc = StringUtils.abbreviate(entity.getCustomFieldList().stream().map(MyEntity::getCustomField\n).collect(Collectors.joining(\",\")), 12);\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/#drilldown","title":"Drilldown","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multivalue/multivalue/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-to-add_5","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\ndata.getCustomField().getValues()\n.stream()\n.filter(val -&gt; !val.getValue().matches(\"[A-Za-z]+\"))\n.findFirst()\n.orElseThrow(() -&gt; new BusinessException().addPopup(ONLY_LETTER));\nentity.getCustomFieldList().clear();\nentity.getCustomFieldList().addAll(data.getCustomField().getValues().stream()\n.map(MultivalueFieldSingleValue::getId)\n.filter(Objects::nonNull)\n.map(Long::parseLong)\n.map(e -&gt; entityManager.getReference(MyEntity.class, e))\n.toList());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.getCustomFieldList().clear();\nentity.getCustomFieldList().addAll(data.getCustomField().getValues().stream()\n.map(MultivalueFieldSingleValue::getId)\n.filter(Objects::nonNull)\n.map(Long::parseLong)\n.map(e -&gt; entityManager.getReference(MyEntity.class, e))\n.toList());\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityMultivalueDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\npublic MyEntityMultivalueDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (!String.valueOf(dto.getCustomField()).matches(\"[A-Za-z]+\")) {\nentity.addField(MyExampleDTO_.customField.getName(), \"Custom message about required field\");\n}\nif (!String.valueOf(dto.getCustomFieldAdditional()).matches(\"[A-Za-z]+\")) {\nentity.addField(MyExampleDTO_.customFieldAdditional.getName(), \"Custom message about required field\");\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre></p> <p><code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/#sorting","title":"Sorting","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multivalue/multivalue/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided. </p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-to-add_6","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre> List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalue/multivalue/#additional-properties","title":"Additional properties","text":""},{"location":"widget/fields/field/multivalue/multivalue/#primary","title":"Primary","text":"<p> Live Sample \u00b7  GitHub</p> <p>Add the option to specify the Primary value to the AssocListPopup widget.  If this value is specified, display an additional column labeled \"Primary\" that allows setting a checkbox in only one of the rows.</p> <p>Title primary field has default title <code>primary</code>.</p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> Default titleCustom title <p></p> <p></p>"},{"location":"widget/fields/field/multivalue/multivalue/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p><code>Step 1</code> Add primaryId to MyEntity. <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@JoinTable(name = \"MyEntity_MyEntity\",\njoinColumns = @JoinColumn(name = \"MyEntity_id\"),\ninverseJoinColumns = @JoinColumn(name = \"MyEntity_id\")\n)\n@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})\nprivate List&lt;MyEntity&gt; customFieldList = new ArrayList&lt;&gt;();\nprivate Long primaryId;\n}\n</code></pre> <code>Step 2</code>Add primary to corresponding Assoc .widget.json.</p> <p><code>enabled</code> - true/false  'title'- Title primary field (Optional. Default title <code>primary</code>) <pre><code>{\n\"title\": \"myEntityAssocListPopup title\",\n\"name\": \"myEntityAssocListPopup\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityAssocListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"primary\": {\n\"enabled\": true,\n\"title\": \"Title for primary field\"\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/","title":"MultivalueHover","text":"<p><code>MultivalueHover</code> is a component that allows to view multiple values on mouse hover. All fields are readonly.</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add field List to corresponding BaseEntity.</p> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@JoinTable(name = \"MyEntity_MyEntity\",\njoinColumns = @JoinColumn(name = \"MyEntity_id\"),\ninverseJoinColumns = @JoinColumn(name = \"MyEntity_id\")\n)\n@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})\nprivate List&lt;MyEntity&gt; customFieldList = new ArrayList&lt;&gt;();\n}\n</code></pre> <p>Step 2 Add field MultivalueField to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldList.id\", provider = LongValueProvider.class)\nprivate MultivalueField customField;\nprivate String customFieldCalc;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomFieldList().stream().collect(MultivalueField.toMultivalueField(\ne -&gt; String.valueOf(e.getId()),\nMyEntity::getCustomField\n));\nthis.customFieldCalc = StringUtils.abbreviate(entity.getCustomFieldList().stream().map(MyEntity::getCustomField\n).collect(Collectors.joining(\",\")), 12);\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step 3 Add to .widget.json.</p> <p><code>displayedKey</code> - text field usually containing contcatenated values from linked rows</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldCalc\"\n}\n]\n}\n</code></pre> <p>Step 3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldCalc\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step 3 Add to .widget.json.</p> <p><code>displayedKey</code> - text field usually containing contcatenated values from linked rows</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldCalc\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#placeholder","title":"Placeholder","text":"<p>not applicable </p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#how-to-add_1","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldList.id\", provider = LongValueProvider.class)\nprivate MultivalueField customField;\nprivate String customFieldCalc;\nprivate String customFieldColor;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomFieldList().stream().collect(MultivalueField.toMultivalueField(\ne -&gt; String.valueOf(e.getId()),\nMyEntity::getCustomField\n));\nthis.customFieldCalc = StringUtils.abbreviate(entity.getCustomFieldList().stream().map(MyEntity::getCustomField\n).collect(Collectors.joining(\",\")), 12);\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldCalc\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldCalc\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldCalc\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldCalc\",\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldCalc\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldCalc\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#readonlyeditable","title":"Readonly/Editable","text":"<p>All fields are readonly.</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. Search uses in operator which compares ids in this case.</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#how-to-add_2","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityDTO extends DataResponseDTO {\nprivate String customField;\npublic MyEntityDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#drilldown","title":"Drilldown","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#validation","title":"Validation","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#sorting","title":"Sorting","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multivalueHover/multivalueHover/#required","title":"Required","text":"<p>`not applicable</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/","title":"Multivalue","text":"<p><code>Multivalue</code> is a component that allows to select multiple values from Popup List of entities</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add field List to corresponding BaseEntity.</p> <pre><code>public class MyEntity extends BaseEntity {\n@Column\n@JoinTable(name = \"MyEntity_MyEntityMultivalue\",\njoinColumns = @JoinColumn(name = \"MyEntity_id\"),\ninverseJoinColumns = @JoinColumn(name = \"MyEntityMultivalue_id\")\n)\n@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})\nprivate List&lt;MyEntityMultivalue&gt; customFieldList = new ArrayList&lt;&gt;();\n}\n</code></pre> <p>Step 3 Add field MultivalueField to corresponding DataResponseDTO.</p> <pre><code>public class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldList.id\", provider = LongValueProvider.class)\nprivate MultivalueField customField;\nprivate String customFieldCalc;\npublic MyExampleDTO(MyEntity entity) {\nthis.customField = entity.getCustomFieldList().stream().collect(MultivalueField.toMultivalueField(\ne -&gt; String.valueOf(e.getId()),\nMyEntityMultivalue::getCustomField\n));\nthis.customFieldCalc =  StringUtils.abbreviate(entity.getCustomFieldList().stream().map(MyEntity::getCustomField\n).collect(Collectors.joining(\",\")), 12);\n}\n</code></pre> <p>Step4 Add bc MyEntityMultivalueAssocListPopup to corresponding EnumBcIdentifier.</p> <pre><code>public enum PlatformMyExampleController implements EnumBcIdentifier {\nmyExampleBc(MyExampleService.class), myEntityMultivalueAssocListPopup(myExampleBc, MyEntityMultivalueService.class);\n</code></pre> List widgetInfo widgetForm widget <p>Step 5 Add popupBcName and assocValueKey to .widget.json.</p> <p><code>popupBcName</code> - name bc Step 1.6.AssocListPopup</p> <p><code>assocValueKey</code> - field for opening AssocListPopup</p> <p><code>displayedKey</code> - text field usually containing contcatenated values from linked rows on List widget</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"popupBcName\": \"myEntityMultivalueAssocListPopup\",\n\"assocValueKey\": \"customField\",\n\"displayedKey\": \"customFieldCalc\"\n}\n]\n}      </code></pre> <p>Step 5 Add to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"popupBcName\": \"myEntityAssocListPopup\",\n\"assocValueKey\": \"customField\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Step 5 Add popupBcName and assocValueKey to .widget.json.</p> <p><code>popupBcName</code> - name bc Step 1.6.AssocListPopup</p> <p>`assocValueKey' - field for open AssocListPopup</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"popupBcName\": \"myEntityMultivalueAssocListPopup\",\n\"assocValueKey\": \"customField\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"widget/fields/field/multivaluero/multivaluero/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>public class MyExampleMeta extends FieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setPlaceholder(MyExampleDTO_.customField, \"Placeholder text\"));\n}\n</code></pre> List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p>Works for Form.</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. </p> <pre><code>public class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldList.id\", provider = LongValueProvider.class)\nprivate MultivalueField customField;\nprivate String customFieldColor;\nprivate String customFieldCalc;\npublic MyExampleDTO(MyEntity entity) {\nthis.customField = entity.getCustomFieldList().stream().collect(MultivalueField.toMultivalueField(\ne -&gt; String.valueOf(e.getId()),\nMyEntityMultivalue::getCustomField\n));\nthis.customFieldColor = \"#eda6a6\";\nthis.customFieldCalc =  StringUtils.abbreviate(entity.getCustomFieldList().stream().map(MyEntity::getCustomField\n).collect(Collectors.joining(\",\")), 12);\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"popupBcName\": \"myEntityAssocListPopup\",\n\"assocValueKey\": \"customField\",\n\"displayedKey\": \"customFieldCalc\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"popupBcName\": \"myEntityAssocListPopup\",\n\"assocValueKey\": \"customField\",\n\"bgColor\": \"#eda6a6\",\n\"displayedKey\": \"customFieldCalc\"\n}\n]\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-does-it-look_3","title":"How does it look?","text":"Editable List widgetEditable Info widgetEditable Form widget <p>not applicable</p> <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService.     <pre><code>protected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.getCustomFieldList().clear();\nentity.getCustomFieldList().addAll(data.getCustomField().getValues().stream()\n.map(MultivalueFieldSingleValue::getId)\n.filter(Objects::nonNull)\n.map(Long::parseLong)\n.map(e -&gt; entityManager.getReference(MyEntityMultivalue.class, e))\n.collect(Collectors.toList()));\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n</code></pre></p> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder.</p> <pre><code>public class MyExampleMeta extends FieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre> List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p>Works for Form.</p> <p>Option 1 Enabled by default.</p> <pre><code>public class MyExampleMeta extends FieldMetaBuilder&lt;MyExampleDTO&gt; {\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long id, Long parentId) {\n}\n}\n</code></pre> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p>Works for Form.</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#filtering","title":"Filtering","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#drilldown","title":"Drilldown","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-to-add_4","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirm <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService.</p> <pre><code>public class MyExampleService extends VersionAwareResponseService&lt;MyExampleDTO, MyEntity&gt; {\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nentity.setCustomFieldEntity(data.getCustomFieldId() != null\n? entityManager.getReference(MyEntityMultivalue.class, data.getCustomFieldId())\n: null);\nif (StringUtils.isNotEmpty(data.getCustomField())\n&amp;&amp; !String.valueOf(data.getCustomField()).matches(\"[A-Za-z]+\")\n) {\nthrow new BusinessException().addPopup(\"The field 'customField' can contain only letters.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}              </code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\ntry {\n//call custom function\n}\ncatch(Exception e){\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    public class MyExampleService extends VersionAwareResponseService&lt;MyExampleDTO, MyEntity&gt; {\n@Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.newAction()\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value 'customField'?\"))\n.add()\n.build();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#sorting","title":"Sorting","text":"<p>not applicable</p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided. </p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/multivaluero/multivaluero/#how-to-add_5","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder.</p> <pre><code>public class MyExampleMeta extends FieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre> List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p> <p>Works for Form.</p>"},{"location":"widget/fields/field/number/number/","title":"Number","text":"<p><code>Number</code> is a component for numbers editing. It is used to input and present numbers and automatically restricts user input to numeric values only.</p>"},{"location":"widget/fields/field/number/number/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/number/number/#how-to-add","title":"How to add?","text":"Example <p>One will usually use  Long,  Double or  BigDecimal java types in DTO and Entity for storing this field type. </p> <p>Next example shows  **Long ** usage:</p> <p>Step1  Add Long field to corresponding BaseEntity.</p> <pre><code>//numberBasic\n@Entity\n@Table(name = \"NumberBasicEntity\")\n@Getter\n@Setter\n@NoArgsConstructor\npublic class NumberBasicEntity extends BaseEntity {\n@Column\nprivate Long customField;\n}\n</code></pre> <p>Step2 Add Long field to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class NumberBasicDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\nprivate Long customField;\npublic NumberBasicDTO(NumberBasicEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"NumberBasicList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"numberBasic\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\"\n}\n]\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"NumberBasicInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"numberBasic\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"NumberBasicForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"numberBasic\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"digits\": 2\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/number/number/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/number/number/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;NumberPlaceholderDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nNumberPlaceholderDTO_.customField\n);\nfields.setRequired(\nNumberPlaceholderDTO_.customField\n);\nfields.setPlaceholder(NumberPlaceholderDTO_.customField, \"123456\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/number/number/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. The field can contain a HEX color or be null.  <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class NumberColorDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\nprivate Long customField;\nprivate String customFieldColor;\npublic NumberColorDTO(NumberColorEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"NumberColorList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"numberColor\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"NumberColorInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"numberColor\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"NumberColorForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"numberColor\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"NumberColorConstList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"numberColorConst\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"NumberColorConstInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"numberColorConst\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"NumberColorConstForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"numberColorConst\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/number/number/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;NumberBasicDTO&gt; doUpdateEntity(NumberBasicEntity entity, NumberBasicDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(NumberBasicDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;NumberBasicDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nNumberBasicDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;NumberCreateEditDTO&gt; fields,\nInnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre></p> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria.</p> <p>Search uses:</p> <ul> <li><code>greaterOrEqualThan</code>(&gt;=) and <code>lessOrEqualThan</code>(&lt;=) operators.</li> <li><code>equals</code> (=) operator.</li> </ul>"},{"location":"widget/fields/field/number/number/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget By RangeEquals <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/number/number/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Info</p> <p>By default, filtration is carried out by range. If you want to turn it off, indicate <code>cxbox.widget.fields.filter-by-range-enabled-default: false</code> in meta. see more</p> <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter)) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class NumberFiltrationDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\nprivate Long customField;\npublic NumberFiltrationDTO(NumberFiltrationEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;NumberFiltrationDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(NumberFiltrationDTO_.customField);\n}\nfields.enableFilter(NumberFiltrationDTO_.customField);\nfields.enableSort(NumberFiltrationDTO_.customField);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/number/number/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/number/number/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;NumberDrillDownDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nNumberDrillDownDTO_.customField\n);\nfields.setRequired(\nNumberDrillDownDTO_.customField\n);\nfields.setDrilldown(\nNumberDrillDownDTO_.customField,\nDrillDownType.INNER,\n\"/screen/NumberDrillDown/view/NumberDrillDownform/\" + CxboxNumberDrillDownController.numberDrillDown + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"NumberDrillDownList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"numberDrillDown\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre></p> <p>Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"NumberDrillDownInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"numberDrillDown\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/number/number/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/number/number/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/number/number/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;NumberBusinessExDTO&gt; doUpdateEntity(NumberBusinessExEntity entity, NumberBusinessExDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(NumberBusinessExDTO_.customField)) {\nif (data.getCustomField() &lt; 20000) {\nthrow new BusinessException().addPopup(LESS_20000);\n}\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;NumberRuntimeExDTO&gt; doUpdateEntity(NumberRuntimeExEntity entity, NumberRuntimeExDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(NumberRuntimeExDTO_.customField)) {\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;NumberConfirmDTO&gt; getActions() {\nreturn Actions.&lt;NumberConfirmDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Fields cannot be changed on this widget type, so \"Confirm\" is not applicable for field validation</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Use if:</p> <p>Requires a simple fields check (javax validation)</p> <p>Add javax.validation to corresponding DataResponseDTO. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\n@Min(value = 100000, message = \"The field  cannot be less than 100 000.\")\nprivate Long customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (dto.getCustomField() &lt; 100000) {\nentity.addField(MyExampleDTO_.customField.getName(), \"The field 'customField' cannot be less than 100 000.\");\n}\nif (dto.getCustomField() &lt; 100000) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' cannot be less than 100 000.\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre></p> <p><code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order.</p>"},{"location":"widget/fields/field/number/number/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/number/number/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;NumberSortingDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(NumberSortingDTO_.customField);\n}\nfields.enableSort(NumberSortingDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/number/number/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided. By default, UI sets <code>Number</code> value to 0 when user deletes it and <code>nullable</code> is not set or equals to false. See more [Additional properties-nullable]</p>"},{"location":"widget/fields/field/number/number/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/number/number/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;NumberRequiredDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nNumberRequiredDTO_.customField\n);\nfields.setRequired(\nNumberRequiredDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#additional-properties","title":"Additional properties","text":""},{"location":"widget/fields/field/number/number/#digits","title":"digits","text":"<p> Live Sample \u00b7  GitHub</p> <p>Property denotes number of digits after the decimal point. Additionally, UI will not show digits after comma if property is not set</p>"},{"location":"widget/fields/field/number/number/#how-does-it-look_9","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/number/number/#how-to-add_9","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Add digits to .widget.json. <pre><code>{\n\"name\": \"DigitsNumberList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"digitsNumber\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"digits\": 2\n}\n]\n}\n</code></pre></p> <p>Add digits to .widget.json. <pre><code>{\n\"name\": \"DigitsNumberInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"digitsNumber\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"digits\": 2\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Add digits to .widget.json. <pre><code>{\n\"name\": \"DigitsNumberForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"digitsNumber\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"digits\": 2\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/number/number/#nullable","title":"nullable","text":"<p> Live Sample \u00b7  GitHub</p> <p>By default, UI sets <code>Number</code> value to 0 when user deletes it. If <code>nullable</code> equals to true, then UI keeps empty value as usual</p>"},{"location":"widget/fields/field/number/number/#how-does-it-look_10","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/number/number/#how-to-add_10","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Add nullable to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"nullable\": true\n}\n]\n}\n</code></pre></p> <p>not applicable </p> <p>Add nullable to .widget.json.       <pre><code>{\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"number\",\n\"nullable\": true\n}\n],\n\"name\": \"MyExampleForm\",\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n},\n\"title\": \"Form title\",\n\"type\": \"Form\"\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/","title":"Percent","text":"<p><code>Percent</code> is a component for percent editing. It can be used for editing and displaying percentages</p>"},{"location":"widget/fields/field/percent/percent/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/percent/percent/#how-to-add","title":"How to add?","text":"Example <p>One will usually use Long, Double or BigDecimal java types in DTO and Entity for storing this field type.</p> <p>Next example shows Long usage:</p> <p>Step1 Add Long field  to corresponding BaseEntity. </p> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Column\nprivate Long customField;\n}\n</code></pre> <p>Step2 Add Long field  to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\nprivate Long customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\"\n}\n]\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Option2 Add Double field  to corresponding DataResponseDTO in Step1.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/percent/percent/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nMyExampleDTO_.customField\n);\nfields.setRequired(\nMyExampleDTO_.customField\n);\nfields.setPlaceholder(MyExampleDTO_.customField, \"17\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/percent/percent/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\nprivate Long customField;\nprivate String customFieldColor;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/percent/percent/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nMyExampleDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre></p> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria.</p> <p>Search uses:</p> <ul> <li><code>greaterOrEqualThan</code>(&gt;=) and <code>lessOrEqualThan</code>(&lt;=) operators.</li> <li><code>equals</code> (=) operator.</li> </ul>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget By RangeEquals <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/percent/percent/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Info</p> <p>By default, filtration is carried out by range. If you want to turn it off, indicate <code>cxbox.widget.fields.filter-by-range-enabled-default: false</code> in meta. see more</p> <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\nprivate Long customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/percent/percent/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nMyExampleDTO_.customField\n);\nfields.setRequired(\nMyExampleDTO_.customField\n);\nfields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\" + PlatformMyExampleController.myExampleBc + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/percent/percent/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/percent/percent/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\nif (data.getCustomField() &lt; 10) {\nthrow new BusinessException().addPopup(LESS_10);\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Use if:</p> <p>Requires a simple fields check (javax validation)</p> <p>Add javax.validation to corresponding DataResponseDTO. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = BigDecimalValueProvider.class)\n@Min(value = 5, message = \"The field  cannot be less than 5%.\")\nprivate Long customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (dto.getCustomField() &lt; 5) {\nentity.addField(MyExampleDTO_.customField.getName(), \"The field  cannot be less than 5%\");\n}\nif (dto.getCustomField() &lt; 5) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field  cannot be less than 5%\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre> <code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomFieldAdditional(data.getCustomFieldAdditional());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order.</p>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/percent/percent/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided.  By default, UI sets <code>Percent</code> value to 0 when user deletes it and <code>nullable</code> is not set or equals to false. See more [Additional properties-nullable]</p>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/percent/percent/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(\nMyExampleDTO_.customField\n);\nfields.setRequired(\nMyExampleDTO_.customField\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#additional-properties","title":"Additional properties","text":""},{"location":"widget/fields/field/percent/percent/#digits","title":"digits","text":"<p> Live Sample \u00b7  GitHub</p> <p>Property denotes number of digits after the decimal point. Additionally, UI will not show digits after comma if property is not set</p>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look_9","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/percent/percent/#how-to-add_9","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Add digits to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"digits\": 2,\n\"type\": \"percent\"\n}\n]\n}\n</code></pre></p> <p>Add digits to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"digits\": 2\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Add digits to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"digits\": 2\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/percent/percent/#nullable","title":"nullable","text":"<p> Live Sample \u00b7  GitHub</p> <p>By default, UI sets <code>Percent</code> value to 0 when user deletes it. If <code>nullable</code> equals to true, then UI keeps empty value as usual</p>"},{"location":"widget/fields/field/percent/percent/#how-does-it-look_10","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/percent/percent/#how-to-add_10","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Add nullable to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"nullable\": true\n}\n]\n}\n</code></pre></p> <p>not applicable </p> <p>Add nullable to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"percent\",\n\"nullable\": true\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/","title":"PickList","text":"<p><code>PickList</code> is a component that allows to select a value from Popup list of entities</p> <p>Tips</p> <p>Use if user needs to open a detailed view of related entities. Feel free to use this field type for large entities of any size (only one page is loaded in memory)</p>"},{"location":"widget/fields/field/pickList/pickList/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/pickList/pickList/#how-to-add","title":"How to add?","text":"Example <ul> <li> <p>Step 1. Popup</p> <p>In the following example, MyEntity entity has a OneToOne/ManyToOne reference to the MyEntityPick entity. Link is made by id, e.g. MyEntity.customFieldId = MyEntityPick.id. Also, is this example we will use one <code>additional field</code> MyEntityPick.customField, that will be shown on MyEntity widget</p> <ul> <li> <p>Step 1.1 Add String <code>additional field</code>  to corresponding BaseEntity.     <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityPick extends BaseEntity {\n@Column\nprivate String customField;\n}\n</code></pre></p> </li> <li> <p>Step 1.2 Add String <code>additional field</code> to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityPickDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\npublic MyEntityPickDTO(MyEntityPick entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> </li> <li> <p>Step 1.3  Create Popup List .widget.json.     <pre><code>{\n\"title\": \"myEntityPickListPopup Title\",\n\"name\": \"myEntityPickListPopup\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre></p> </li> <li> <p>Step 1.4 Add fields.setEnabled to corresponding FieldMetaBuilder.     <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyEntityPickDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nfields.enableFilter(MyEntityPickDTO_.customField);\nfields.enableSort(MyEntityPickDTO_.customField);\nfields.enableSort(MyEntityPickDTO_.id);\n}\n</code></pre></p> </li> </ul> </li> <li> <p>Step 2 Add Popup to .view.json.</p> list.view.jsonform.view.json <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"My example List\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"template\": \"DashboardView\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityPickListPopup\",\n\"position\": 20,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <pre><code>{\n\"name\": \"myexampleform\",\n\"title\": \"My Example Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityPickListPopup\",\n\"position\": 20,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> </li> <li> <p>Step3 Add MyEntityPick field to corresponding BaseEntity.     <pre><code>    @Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@JoinColumn(name = \"CUSTOM_FIELD_ID\")\n@ManyToOne\nprivate MyEntityPick customFieldEntity;\n}\n</code></pre></p> </li> <li> <p>Step4 Add two fields (for id and for <code>additional field</code>) to corresponding DataResponseDTO.     <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldEntity.customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldEntity.id\", provider = LongValueProvider.class)\nprivate Long customFieldId;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldId = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(e -&gt; e.getId())\n.orElse(null);\nthis.customField = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(e -&gt; e.getCustomField())\n.orElse(null);\n}\n}\n</code></pre></p> </li> <li> <p>Step5 Add bc myEntityPickListPopup to corresponding EnumBcIdentifier.</p> <p>Info</p> <p><code>myEntityPickListPopup</code> business component needs to be a child of the business component from which the popup window is invoked.</p> <pre><code>    myExampleBc(MyExampleService.class),\nmyEntityPickListPopup(myExampleBc,MyEntityPickPickListService.class);\n</code></pre> </li> </ul> List widgetInfo widgetForm widget <p>Step6 Add popupBcName and pickMap to .widget.json. <code>pickMap</code> - maping for field Picklist to MyEntity</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customFieldId\": \"id\",\n\"customField\": \"customField\"\n}\n}\n]\n}\n</code></pre> <p>Step6 Add popupBcName and pickMap to .widget.json. <code>pickMap</code> - maping for field Picklist to MyEntity</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customFieldId\": \"id\",\n\"customField\": \"customField\"\n}\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step6 Add popupBcName and pickMap to .widget.json. <code>pickMap</code> - maping for field Picklist to MyEntity</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n}\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/pickList/pickList/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/pickList/pickList/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldId);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField, \"Placeholder text\");\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/pickList/pickList/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldEntity.customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldEntity.id\", provider = LongValueProvider.class)\nprivate Long customFieldId;\nprivate String customFieldColor;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldId = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(e -&gt; e.getId())\n.orElse(null);\nthis.customField = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(e -&gt; e.getCustomField())\n.orElse(null);\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customFieldId\": \"id\",\n\"customField\": \"customField\"\n},\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n},\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customFieldId\": \"id\",\n\"customField\": \"customField\"\n},\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n},\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/pickList/pickList/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nentity.setCustomFieldEntity(data.getCustomFieldId() != null\n? entityManager.getReference(MyEntityPick.class, data.getCustomFieldId())\n: null);\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldId);\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre> Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. Search uses in operator which compares ids in this case.</p> <p>Tips</p> <p>Pop up widget for filtration is auto-generated based on widget for field editing (e.g. same fields, same filters and so on will be on both widgets). Optionally - separate widget for filtration can still be provided</p>"},{"location":"widget/fields/field/pickList/pickList/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/pickList/pickList/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldEntity.customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldEntity.id\", provider = LongValueProvider.class)\nprivate Long customFieldId;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldId = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(e -&gt; e.getId())\n.orElse(null);\nthis.customField = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(e -&gt; e.getCustomField())\n.orElse(null);\n}\n}\n</code></pre> Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/pickList/pickList/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/pickList/pickList/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldId);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\" + PlatformMyExampleController.myExampleBc + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customFieldId\": \"id\",\n\"customField\": \"customField\"\n},\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickListPopup\",\n\"pickMap\": {\n\"customField\": \"customField\",\n\"customFieldId\": \"id\"\n},\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/pickList/pickList/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/pickList/pickList/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (StringUtils.isNotEmpty(data.getCustomField())\n&amp;&amp; !String.valueOf(data.getCustomField()).matches(\"[A-Za-z]+\")\n) {\nthrow new BusinessException().addPopup(ONLY_LETTER);\n}\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nentity.setCustomFieldEntity(data.getCustomFieldId() != null\n? entityManager.getReference(MyEntity.class, data.getCustomFieldId())\n: null);\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nentity.setCustomFieldEntity(data.getCustomFieldId() != null\n? entityManager.getReference(MyEntity.class, data.getCustomFieldId())\n: null);\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customFieldEntity.customField\")\n@Pattern(regexp = \"[A-Za-z]+\", message = ONLY_LETTER)\nprivate String customField;\n@SearchParameter(name = \"customFieldEntity.id\", provider = LongValueProvider.class)\nprivate Long customFieldId;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldId = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(e -&gt; e.getId())\n.orElse(null);\nthis.customField = Optional.ofNullable(entity.getCustomFieldEntity())\n.map(e -&gt; e.getCustomField())\n.orElse(null);\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (!String.valueOf(dto.getCustomField()).matches(\"[A-Za-z]+\")) {\nentity.addField(MyExampleDTO_.customField.getName(), \"The field 'customField' can contain only letters.\");\n}\nif (!String.valueOf(dto.getCustomFieldAdditional()).matches(\"[A-Za-z]+\")) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' can contain only letters.\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre> <code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customFieldId)) {\nentity.setCustomFieldEntity(data.getCustomFieldId() != null\n? entityManager.getReference(MyEntityPick.class, data.getCustomFieldId())\n: null);\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/pickList/pickList/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order. Sort by value join field.</p>"},{"location":"widget/fields/field/pickList/pickList/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/pickList/pickList/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customFieldId);\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/pickList/pickList/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided. </p>"},{"location":"widget/fields/field/pickList/pickList/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/pickList/pickList/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldId);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/radio/radio/","title":"Radio","text":"<p><code>Radio</code> is a component that allows to select one of predefined values visualized as radio buttons</p>"},{"location":"widget/fields/field/radio/radio/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/radio/radio/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>Looks same as dictionary type. Differs only, when editing </p> <p>Looks same as dictionary type. Differs only, when editing in list/form widgets </p> <p></p>"},{"location":"widget/fields/field/radio/radio/#how-to-add","title":"How to add?","text":"Example <p>Step1 Create Enum. Recommend that use additional variable for visual display. <pre><code>@Getter\n@AllArgsConstructor\npublic enum CustomFieldEnum {\nHIGH(\"High\"),\nMIDDLE(\"Middle\"),\nLOW(\"Low\");\n@JsonValue\nprivate final String value;\npublic static CustomFieldEnum getByValue(@NonNull String value) {\nreturn Arrays.stream(CustomFieldEnum.values())\n.filter(enm -&gt; Objects.equals(enm.getValue(), value))\n.findFirst()\n.orElse(null);\n}\n}\n</code></pre></p> <p>Step2 Add  Custom Field Enum field to corresponding BaseEntity.</p> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Enumerated(value = EnumType.STRING)\n@Column\nprivate CustomFieldEnum customField;\n}\n</code></pre> <p>Step3 Add  Custom Field Enum field to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = EnumValueProvider.class)\nprivate CustomFieldEnum customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> <p>Step4 Add fields.setEnumValues to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnumValues(MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step5 Add to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"radio\"\n}\n]\n}\n</code></pre></p> <p>Step5 Add to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"radio\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Step5 Add to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"radio\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/radio/radio/#placeholder","title":"Placeholder","text":"<p>not applicable</p>"},{"location":"widget/fields/field/radio/radio/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/radio/radio/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/radio/radio/#how-to-add_1","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null.  <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\nprivate String customFieldColor;\n@SearchParameter(name = \"customField\", provider = EnumValueProvider.class)\nprivate CustomFieldEnum customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"radio\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"radio\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"radio\",\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"radio\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/radio/radio/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/radio/radio/#how-does-it-look_2","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/radio/radio/#how-to-add_2","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnumValues(MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnumValues(MyExampleDTO_.customField, CustomFieldEnum.values());\n}\n</code></pre></p> <p>Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/radio/radio/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. Search uses <code>in</code> operator.</p> <p>The filter component displays a text search field and scrollbar based on the number of available filter values. (since release 2.0.13)</p> <ul> <li> <p>The search input and scrollbar appear only when the number of filterable values exceeds   7 items (7 Default count items -configurable via frontend constant).</p> </li> <li> <p>The Apply button shows a counter of selected items (e.g., <code>Apply (5)</code>).</p> </li> <li>If the selection count exceeds  7 items, it displays <code>Apply (N+)</code> (e.g., <code>Apply (9+)</code>).</li> </ul>"},{"location":"widget/fields/field/radio/radio/#how-does-it-look_3","title":"How does it look?","text":"List widgetInfo widgetForm widget &lt; Default count items&gt; Default count items <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/radio/radio/#how-to-add_3","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = EnumValueProvider.class)\nprivate CustomFieldEnum customField;\n@SearchParameter(name = \"customFieldNew\", provider = EnumValueProvider.class)\nprivate CustomFieldNewEnum customFieldNew;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldNew = entity.getCustomFieldNew();\n}\n}\n</code></pre> Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (Boolean.TRUE.equals(configuration.getForceActiveEnabled())) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.setEnumFilterValues(fields, MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\nfields.setEnumFilterValues(fields, MyExampleDTO_.customFieldNew, CustomFieldNewEnum.values());\nfields.enableFilter(MyExampleDTO_.customFieldNew);\nfields.enableSort(MyExampleDTO_.customFieldNew);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p>Configuration Default count items</p> <ul> <li>Location: <code>\\ui\\src\\constants\\filter.ts</code></li> <li> <p>Variables:</p> <ul> <li><code>checkboxFilterMaxVisibleItems</code> \u2013 Controls when scroll/search appear.</li> <li><code>checkboxFilterCounterLimit</code> \u2013 Sets the maximum number before switching to <code>+</code> notation.</li> </ul> </li> </ul> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/radio/radio/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/radio/radio/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/radio/radio/#how-to-add_4","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnumValues(MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\" + PlatformMyExampleController.myExampleBc + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"radio\",\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre></p> <p>Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"radio\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/radio/radio/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/radio/radio/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable</p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/radio/radio/#how-to-add_5","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\nif (!data.getCustomField().getValue().equals(CustomFieldEnum.HIGH.getValue())) {\nthrow new BusinessException().addPopup(ONLY_HIGH);\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Use if:</p> <p>Requires a simple fields check (javax validation)</p> <p>Add javax.validation to corresponding DataResponseDTO. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = EnumValueProvider.class)\n@NotNull(message = \"Custom message about error\")\nprivate CustomFieldEnum customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (!CustomFieldEnum.HIGH.getValue().equals(dto.getCustomField().getValue())) {\nentity.addField(MyExampleDTO_.customField.getName(), \"Custom message about error\");\n}\nif (!CustomFieldEnum.HIGH.getValue().equals(dto.getCustomFieldAdditional().getValue())) {\nentity.addField(MyExampleDTO_.customFieldAdditional.getName(), \"Custom message about error\");\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre> <code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomFieldAdditional(data.getCustomFieldAdditional());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/radio/radio/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order. Lexicographic sorting is used for it.</p>"},{"location":"widget/fields/field/radio/radio/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/radio/radio/#how-to-add_6","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.setEnumFilterValues(fields, MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/radio/radio/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided.</p>"},{"location":"widget/fields/field/radio/radio/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/radio/radio/#how-to-add_7","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnumValues(MyExampleDTO_.customField, CustomFieldEnum.values());\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/","title":"suggestionPickList","text":"<p><code>suggestionPickList</code> is a component that allows you to select values from a dropdown list and display data from various external sources, such as microservices, files, and others.</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable </p> <p></p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-to-add","title":"How to add?","text":"Example <ul> <li> <p>Step 1. Create Popup</p> <p>In the following example, we use a microservice as the data source. The example entity creation  in microservices described in Microservices</p> <ul> <li>Step 1.1  Create Popup List .widget.json. We create based on an entity that accesses the microservice.     <pre><code>{\n\"name\": \"MyExampleSuggest\",\n\"title\": \"PickListPopup\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myexamplesuggection\",\n\"limit\": 20,\n\"fields\": [\n{\n\"title\": \"customFieldSuggestion\",\n\"key\": \"customFieldSuggestion\",\n\"type\": \"input\"\n},\n{\n\"title\": \"customFieldSuggestionDate\",\n\"key\": \"customFieldSuggestionDate\",\n\"type\": \"dateTime\"\n}\n]\n}\n</code></pre></li> </ul> </li> <li> <p>Step 2 Add Popup to .view.json.</p> list.view.jsonform.view.json <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"MyExample Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 1,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"ThirdLevelMenu\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleSuggest\",\n\"position\": 30,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <pre><code>{\n\"name\": \"myexampleform\",\n\"title\": \"MyExample Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleSuggest\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 1,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"ThirdLevelMenu\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> </li> <li> <p>Step3 Add bc myexamplesuggection to corresponding EnumBcIdentifier.</p> <pre><code>    myexample(MyExampleService.class),\nmyexamplesuggectioncsv(MyExampleService.class),\nmyexample(MyExampleService.class),\nmyexamplesuggection(MyExampleSuggestionService.class);\n</code></pre> </li> </ul> List widgetInfo widgetForm widget <p>Step4 Add suggestionPickList and pickMap to .widget.json.</p> <p><code>popupBcName</code> \u2014 the name of the BC (Business Component) that opens in the pop-up. Requirements 2 and 3 must be satisfied.</p> <p><code>pickMap</code>: Maps fields between the parent BC and popup(child) BC</p> <ul> <li><code>customField</code> (parent BC) &lt;- <code>customFieldSuggestion</code> (popup(child) BC).</li> <li><code>customFieldDate</code> (parent BC) &lt;- <code>customFieldSuggestionDate</code> (popup(child) BC).</li> </ul> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List Widget with suggestionPickList basic\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Date\",\n\"key\": \"customFieldDate\",\n\"type\": \"date\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"suggestionPickList\",\n\"popupBcName\": \"myexamplesuggection\",\n\"pickMap\": {\n\"customField\": \"customFieldSuggestion\"\n}\n}\n]\n}\n</code></pre> <p>not applicable</p> <p>Step4 Add suggestionPickList and pickMap to .widget.json.</p> <p><code>popupBcName</code> \u2014 the name of the BC (Business Component) that opens in the pop-up. Requirements 2 and 3 must be satisfied.</p> <p><code>pickMap</code>: Maps fields between the parent BC and popup(child) BC</p> <ul> <li><code>customField</code> (parent BC) &lt;- <code>customFieldSuggestion</code> (popup(child) BC).</li> <li><code>customFieldDate</code> (parent BC) &lt;- <code>customFieldSuggestionDate</code> (popup(child) BC).</li> </ul> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form Widget with suggestionPickList basic\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"suggestionPickList\",\n\"popupBcName\": \"myexamplesuggection\",\n\"pickMap\": {\n\"customField\": \"customFieldSuggestion\"\n}\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 24\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder. <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField,\"Placeholder text\");\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\nprivate String customField;\nprivate String customFieldDate;\nprivate String customFieldColor;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldDate = entity.getCustomFieldDate();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List Widget with suggestionPickList color\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"suggestionPickList\",\n\"popupBcName\": \"myexample\",\n\"pickMap\": {\n\"customField\": \"customFieldSuggestion\"\n},\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info Widget with suggestionPickList color\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"suggestionPickList\",\n\"popupBcName\": \"myexample\",\n\"pickMap\": {\n\"customField\": \"customFieldSuggestion\"\n},\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List Widget with suggestionPickList color\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"suggestionPickList\",\n\"popupBcName\": \"myexample\",\n\"pickMap\": {\n\"customField\": \"customFieldSuggestion\"\n},\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info Widget with suggestionPickList color\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"suggestionPickList\",\n\"popupBcName\": \"myexample\",\n\"pickMap\": {\n\"customField\": \"customFieldSuggestion\"\n},\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n}\n</code></pre> Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. Search uses in operator which compares ids in this case.</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget Dropdown listField of type suggestionPickList <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget Dropdown listField of type suggestionPickList <p>The dropdown list filtering is performed either by an external service or by the logic described in getList.</p> microservicecsv <p>see more microservices</p> <pre><code>@Service\n@RequiredArgsConstructor\npublic class MyEntityDao extends AbstractAnySourceBaseDAO&lt;MyEntityOutServiceDTO&gt; implements AnySourceBaseDAO&lt;MyEntityOutServiceDTO&gt; {\nprivate final IntegrationConfiguration integrationConfig;\nprivate final RestTemplate restTemplate;\nprivate final IntegrationURLBuilder integrationURLBuilder;\n@Override\npublic String getId(final MyEntityOutServiceDTO entity) {\nreturn entity.getId();\n}\n@Override\npublic void setId(final String id, final MyEntityOutServiceDTO entity) {\nentity.setId(id);\n}\n@Override\npublic MyEntityOutServiceDTO getByIdIgnoringFirstLevelCache(final BusinessComponent bc) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getSuggestionMicroservicesDataServerUrl() + \"/{id}\").build()\n.expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nGET, null, MyEntityOutServiceDTO.class\n).getBody();\n}\n@Override\npublic Page&lt;MyEntityOutServiceDTO&gt; getList(final BusinessComponent bc, final QueryParameters queryParameters) {\n//Page size\nString page = bc.getParameters().getParameter(\"_page\");\n//Limit\nString limit = bc.getParameters().getParameter(\"_limit\");\n//Filter\nList&lt;String&gt; filterCustomField = getFilterFieldName(queryParameters);\nOptional&lt;String&gt; filter = filterCustomField.isEmpty() ? Optional.empty() : Optional.of(filterCustomField.get(0));\n//Sorting\nList&lt;String&gt; sortCustomField = getSortFieldName(queryParameters, \"customFieldSuggestion\");\nOptional&lt;String&gt; sort = sortCustomField.isEmpty() ? Optional.empty() : Optional.of(sortCustomField.get(0));\nString urlTemplate = UriComponentsBuilder.fromHttpUrl(integrationConfig.getSuggestionMicroservicesDataServerUrl())\n.queryParam(\"number\", page)\n.queryParam(\"size\", limit)\n.queryParamIfPresent(\"filterCustomFieldSuggestion\", filter)\n.queryParamIfPresent(\"sortCustomFieldSuggestion\", sort)\n.encode()\n.toUriString();\nResponseEntity&lt;RestResponsePage&lt;MyEntityOutServiceDTO&gt;&gt; responseEntity = restTemplate.exchange(\nurlTemplate,\nHttpMethod.GET,\nnull,\nnew ParameterizedTypeReference&lt;&gt;() {\n},\nfilter\n);\nreturn responseEntity.getBody();\n}\nprivate List&lt;String&gt; getSortFieldName(QueryParameters queryParameters, String fieldName) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(\"_sort\"))\n.filter(f -&gt; f.getValue().contains(fieldName))\n.map(m -&gt; {\nString[] splitOperation = m.getKey().split(\"\\\\.\");\nreturn splitOperation[splitOperation.length - 1];\n}\n).toList();\n}\nprivate List&lt;String&gt; getFilterFieldName(QueryParameters queryParameters) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(f -&gt; f.getKey().contains(\"query\"))\n.map(Map.Entry::getValue)\n.toList();\n}\n@Override\npublic void delete(BusinessComponent bc) {\nrestTemplate.exchange(\nfromUriString(integrationConfig.getSuggestionMicroservicesDataServerUrl()  + \"/{id}\").build().expand(bc.getIdAsLong()).normalize().encode()\n.toUriString(),\nDELETE, null, Void.class\n);\n}\n@Override\npublic MyEntityOutServiceDTO create(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nentity.setId(null);\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getSuggestionMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPOST, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n@Override\npublic MyEntityOutServiceDTO update(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nreturn restTemplate.exchange(\nfromUriString(integrationConfig.getSuggestionMicroservicesDataServerUrl()).build().normalize().encode().toUriString(),\nPUT, new HttpEntity&lt;&gt;(entity), MyEntityOutServiceDTO.class\n).getBody();\n}\n}\n</code></pre> <pre><code>@Service\n@RequiredArgsConstructor\npublic class MyEntityDao extends AbstractAnySourceBaseDAO&lt;MyEntityOutServiceDTO&gt; implements AnySourceBaseDAO&lt;MyEntityOutServiceDTO&gt; {\nprivate static final String DELIMITER = \",\";\nprivate final IntegrationConfiguration integrationConfig;\nprivate final RestTemplate restTemplate;\nprivate final IntegrationURLBuilder integrationURLBuilder;\n@Override\npublic String getId(final MyEntityOutServiceDTO entity) {\nreturn entity.getId();\n}\n@Override\npublic void setId(final String id, final MyEntityOutServiceDTO entity) {\nentity.setId(id);\n}\n@Override\npublic MyEntityOutServiceDTO getByIdIgnoringFirstLevelCache(final BusinessComponent bc) {\nreturn getData().stream().filter(s -&gt; Objects.equals(s.getId(), bc.getId())).findFirst().orElse(null);\n}\n@Override\npublic Page&lt;MyEntityOutServiceDTO&gt; getList(final BusinessComponent bc, final QueryParameters queryParameters) {\nString filterCustomField = getFilterFieldName(queryParameters);\nif (filterCustomField == null) {\nreturn new PageImpl&lt;&gt;(getData());\n}\nreturn new PageImpl&lt;&gt;(getData().stream()\n.filter(f -&gt; f.getCustomField().toUpperCase().contains(filterCustomField.toUpperCase()))\n.toList());\n}\n@Override\npublic void delete(BusinessComponent bc) {\nthrow new IllegalStateException();\n}\n@Override\npublic MyEntityOutServiceDTO create(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nthrow new IllegalStateException();\n}\n@Override\npublic MyEntityOutServiceDTO update(BusinessComponent bc, MyEntityOutServiceDTO entity) {\nthrow new IllegalStateException();\n}\n@NonNull\nprivate List&lt;MyEntityOutServiceDTO&gt; getData() {\ntry {\nClassLoader classLoader = getClass().getClassLoader();\nPath pathUri = Paths.get(classLoader.getResource(\"db/data/custom/product.csv\").toURI());\nreturn Files.readAllLines(pathUri)\n.stream()\n.map(line -&gt; line.split(DELIMITER))\n.map(parts -&gt; {\nMyEntityOutServiceDTO dto = new MyEntityOutServiceDTO();\ndto.setId(parts[0]);\ndto.setCustomField(parts[1]);\nreturn dto;\n})\n.toList();\n} catch (Exception e) {\nreturn List.of();\n}\n}\nprivate String getFilterFieldName(QueryParameters queryParameters) {\nreturn queryParameters.getParameters().entrySet().stream()\n.filter(e -&gt; e.getKey().contains(\"query\"))\n.findFirst()\n.map(Map.Entry::getValue)\n.orElse(null);\n}\n}\n</code></pre> <p>For fields of type suggestionPickList, the filtering matches the configuration of the corresponding field type in the database.</p> <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableFilter(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1</p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\"\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List Widget with suggestionPickList drilldown\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"suggestionPickList\",\n\"popupBcName\": \"myexample\",\n\"pickMap\": {\n\"customField\": \"customFieldSuggestion\"\n},\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info Widget with suggestionPickList drilldown\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"suggestionPickList\",\n\"popupBcName\": \"myexample\",\n\"pickMap\": {\n\"customField\": \"customFieldSuggestion\"\n},\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-does-it-look_6","title":"How does it look?","text":"BusinessExceptionRuntimeExceptionConfirmField level validation"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\nif (StringUtils.isNotEmpty(data.getCustomField())\n&amp;&amp; !String.valueOf(data.getCustomField()).matches(\"[A-Za-z]+\")\n) {\nthrow new BusinessException().addPopup(ONLY_LETTER);\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService.</p> <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Add javax.validation to corresponding DataResponseDTO.</p> <p>Use if:</p> <p>Requires a simple fields check (javax validation) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\n@Pattern(regexp = \"[A-Za-z]+\", message = ONLY_LETTER)\nprivate String customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (!String.valueOf(dto.getCustomField()).matches(\"[A-Za-z]+\")) {\nentity.addField(MyExampleDTO_.customField.getName(), \"The field 'customField' can contain only letters.\");\n}\nif (!String.valueOf(dto.getCustomFieldAdditional()).matches(\"[A-Za-z]+\")) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' can contain only letters.\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre> <code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order. Sort by value join field.</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided.</p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/suggestionpicklist/suggestionPickList/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/","title":"Text","text":"<p><code>Text</code> is a component for text editing. It can be used for editing and displaying multi-line text.</p>"},{"location":"widget/fields/field/text/text/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/text/text/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add String field  to corresponding BaseEntity.</p> <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Column\nprivate String customField;\n}\n</code></pre> <p>Step2 Add field String to corresponding DataResponseDTO.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application.</p>"},{"location":"widget/fields/field/text/text/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/text/text/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField, \"Placeholder text\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/text/text/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null.  <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\nprivate String customFieldColor;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"text\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"text\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"name\": \"MyExampleForm\",\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n},\n\"title\": \"Form title\",\n\"type\": \"Form\"\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"text\",\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"text\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/#readonlyeditable","title":"Readonly/Editable","text":"<p><code>Readonly/Editable</code> indicates whether the field can be edited or not. It can be calculated based on business logic of application</p> <p><code>Editable</code>  Live Sample \u00b7  GitHub</p> <p><code>Readonly</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/#how-does-it-look_3","title":"How does it look?","text":"EditableReadonly List widgetInfo widgetForm widget <p>not applicable</p> <p></p> List widgetInfo widgetForm widget <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/text/text/#how-to-add_3","title":"How to add?","text":"Example EditableReadonly <p>Step1 Add mapping DTO-&gt;entity to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(org.demo.documentation.fields.text.basic.MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre> Step3 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Option 1 Enabled by default. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\n//\n}\n</code></pre> Option 2 <code>Not recommended.</code> Property fields.setDisabled() overrides the enabled field if you use after property fields.setEnabled.</p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>Works for Info.</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/#filtering","title":"Filtering","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Filtering</code> allows you to search data based on criteria. For <code>MyExample field</code> filtering is case-insensitive and retrieves records containing the specified value at any position (similar to SQL <code>Like %value%</code> ). </p>"},{"location":"widget/fields/field/text/text/#how-does-it-look_4","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/text/text/#how-to-add_4","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre> Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n}\n</code></pre></p> <p>not applicable</p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/fields/field/text/text/#how-does-it-look_5","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/text/text/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1 </p> <p><code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setDrilldown(\nMyExampleDTO_.customField,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\" + PlatformMyExampleController.myExampleBc + \"/\" + id\n);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"text\",\n\"drillDown\": \"true\"\n}\n]\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"text\",\n\"drillDown\": \"true\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>Advanced customization</p>"},{"location":"widget/fields/field/text/text/#validation","title":"Validation","text":"<p><code>Validation</code> allows you to check any business rules for user-entered value. There are types of validation:</p> <p>1) Exception:Displays a message to notify users about technical or business errors.</p> <p><code>Business Exception</code>:     Live Sample \u00b7     GitHub</p> <p><code>Runtime Exception</code>:     Live Sample \u00b7     GitHub</p> <p>2) Confirm: Presents a dialog with an optional message, requiring user confirmation or cancellation before proceeding.</p> <p> Live Sample \u00b7     GitHub</p> <p>3) Field level validation: shows error next to all fields, that validation failed for</p> <p><code>Option 1</code>:     Live Sample \u00b7     GitHub</p> <p><code>Option 2</code>:     Live Sample \u00b7     GitHub</p>"},{"location":"widget/fields/field/text/text/#how-does-it-look_6","title":"How does it look?","text":"List widgetInfo widgetForm widget BusinessExceptionRuntimeExceptionConfirmField level validation <p>not applicable </p> BusinessExceptionRuntimeExceptionConfirmField level validation <p></p> <p></p> <p></p> <p></p>"},{"location":"widget/fields/field/text/text/#how-to-add_6","title":"How to add?","text":"Example BusinessExceptionRuntimeExceptionConfirmField level validation <p><code>BusinessException</code> describes an error  within a business process.</p> <p>Add BusinessException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\nif (StringUtils.isNotEmpty(data.getCustomField())\n&amp;&amp; !String.valueOf(data.getCustomField()).matches(\"[A-Za-z]+\")\n) {\nthrow new BusinessException().addPopup(ONLY_LETTER);\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>RuntimeException</code> describes technical error  within a business process.</p> <p>Add RuntimeException to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\ntry {\n//call custom function\nthrow new Exception(\"Error\");\n} catch (Exception e) {\nthrow new RuntimeException(\"An unexpected error has occurred.\");\n}\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Add PreAction.confirm to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save\", \"save\")\n.withPreAction(PreAction.confirm(\"You want to save the value ?\"))\n)\n.build();\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> Option 1Option 2 <p>Use if:</p> <p>Requires a simple fields check (javax validation)</p> <p>Add javax.validation to corresponding DataResponseDTO. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\n@Pattern(regexp = \"[A-Za-z]+\", message = ONLY_LETTER)\nprivate String customField;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\n}\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p> <p>Create \u0441ustom service for business logic check.</p> <p>Use if:</p> <p>Business logic check required for fields</p> <p><code>Step 1</code>  Create \u0441ustom method for check. <pre><code>    private void validateFields(BusinessComponent bc, MyExampleDTO dto) {\nBusinessError.Entity entity = new BusinessError.Entity(bc);\nif (!String.valueOf(dto.getCustomField()).matches(\"[A-Za-z]+\")) {\nentity.addField(MyExampleDTO_.customField.getName(), \"The field 'customField' can contain only letters.\");\n}\nif (!String.valueOf(dto.getCustomFieldAdditional()).matches(\"[A-Za-z]+\")) {\nentity.addField(\nMyExampleDTO_.customFieldAdditional.getName(),\n\"The field 'customFieldAdditional' can contain only letters.\"\n);\n}\nif (!entity.getFields().isEmpty()) {\nthrow new BusinessException().setEntity(entity);\n}\n}\n</code></pre> <code>Step 2</code> Add \u0441ustom method for check to corresponding VersionAwareResponseService. <pre><code>    @Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data,\nBusinessComponent bc) {\nvalidateFields(bc, data);\nif (data.isFieldChanged(MyExampleDTO_.customFieldAdditional)) {\nentity.setCustomFieldAdditional(data.getCustomFieldAdditional());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/#sorting","title":"Sorting","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Sorting</code> allows you to sort data in ascending or descending order. <code>MyExample field</code> is a text field, so lexicographic sorting is used for it</p>"},{"location":"widget/fields/field/text/text/#how-does-it-look_7","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/text/text/#how-to-add_7","title":"How to add?","text":"Example List widgetInfo widgetForm widget <p>see more Sorting</p> <p>Step 1  Add fields.enableSort to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(MyExampleDTO_.customField);\n}\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/fields/field/text/text/#required","title":"Required","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Required</code> allows you to denote, that this field must have a value provided. By default, <code>Text field</code> is not required</p>"},{"location":"widget/fields/field/text/text/#how-does-it-look_8","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/text/text/#how-to-add_8","title":"How to add?","text":"Example <p>Add fields.setRequired to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre></p> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/text/text/#additional-properties","title":"Additional properties","text":""},{"location":"widget/fields/field/text/text/#support-for-truncating-long-values","title":"Support for truncating long values","text":"<p>Support for truncating long values in text fields using a frontend constant(deafult value 140). </p> <ul> <li>If the value exceeds the defined limit, it will be shortened with an ellipsis (...).</li> <li>Hovering over the ellipsis shows the full value in a tooltip.</li> </ul> <p>Restriction</p> <p>applies only in read-only mode. </p>"},{"location":"widget/fields/field/text/text/#how-does-it-look_9","title":"How does it look?","text":""},{"location":"widget/fields/field/text/text/#how-to-add_9","title":"How to add?","text":"Example <p>Change constant text_maxDisplayed . <pre><code>ui/src/components/ui/TextArea/constants.ts\n</code></pre></p>"},{"location":"widget/fields/field/time/time/","title":"Time","text":"<p><code>Time</code>  is a component for time editing. It can be used for editing and displaying time.</p>"},{"location":"widget/fields/field/time/time/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p> <p>The time type supports various formats for representing and manipulating time values. These formats include:</p> <ul> <li>24-hour clock format (hh:mm,hh: mm:ss): For example, 14:30, 14:30:00.</li> <li>12-hour clock format with AM/PM (hh:mm AM/PM,hh: mm:ss AM/PM): For example, 02:30 PM,02:30:45 PM.</li> <li> <p>The time type also supports representing hours, minutes, and seconds separately. For example:</p> <p>Hours(h): 13 (13 Hours or 1PM).</p> <p>Minutes(mm): 55 (55 minutes).</p> <p>Seconds(ss): 30 (30 seconds).</p> <p>Minutes and seconds(mm:ss) : 55:30 (55 minutes and 30 seconds).</p> </li> </ul> <p>These formats ensure that the time type can be utilized effectively in various contexts and applications, from simple time displays to complex time computations and data interchange. </p>"},{"location":"widget/fields/field/time/time/#how-does-it-look","title":"How does it look?","text":"List widgetInfo widgetForm widget"},{"location":"widget/fields/field/time/time/#how-to-add","title":"How to add?","text":"Example <p>Step1 Add field LocalDateTime to corresponding BaseEntity. <pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntity extends BaseEntity {\n@Column\nprivate LocalDateTime customField;\n@Column\nprivate LocalDateTime customFieldhmm;\n@Column\nprivate LocalDateTime customFieldh;\n@Column\nprivate LocalDateTime customFieldhmmA;\n@Column\nprivate LocalDateTime customFieldhmmssA;\n@Column\nprivate LocalDateTime customFieldmm;\n@Column\nprivate LocalDateTime customFieldmmss;\n@Column\nprivate LocalDateTime customFieldss;\n@Column\nprivate LocalDateTime customFieldhA;\n}\n</code></pre></p> <p>Step2  Add field LocalDateTime to corresponding DataResponseDTO. <pre><code>\n</code></pre></p> List widgetInfo widgetForm widget <p>Step3 Add to .widget.json.</p> <p>To set the format, add  \"format\". For example:</p> <p>\"format\": \"h:mm\"</p> <p>By default, there will be a standard format applied: \"h: mm:ss\" <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field h:mm:ss\",\n\"key\": \"customField\",\n\"type\": \"time\",\n\"format\": \"HH:mm:ss\"\n} ,\n{\n\"title\": \"Custom Field h:mm\",\n\"key\": \"customFieldhmm\",\n\"type\": \"time\",\n\"format\": \"HH:mm\"\n},\n{\n\"title\": \"Custom Fieldh\",\n\"key\": \"customFieldh\",\n\"type\": \"time\",\n\"format\": \"HH\"\n},\n{\n\"title\": \"Custom Field h:mm:ss A\",\n\"key\": \"customFieldhmmssA\",\n\"type\": \"time\",\n\"format\": \"hh:mm:ss A\"\n},\n{\n\"title\": \"Custom Field h:mm A\",\n\"key\": \"customFieldhmmA\",\n\"type\": \"time\",\n\"format\": \"hh:mm A\"\n},\n{\n\"title\": \"Custom Fieldh\",\n\"key\": \"customFieldhA\",\n\"type\": \"time\",\n\"format\": \"hh A\"\n}\n]\n}\n</code></pre></p> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field h:mm:ss\",\n\"key\": \"customField\",\n\"type\": \"time\",\n\"format\": \"HH:mm:ss\"\n} ,\n{\n\"label\": \"Custom Field h:mm\",\n\"key\": \"customFieldhmm\",\n\"type\": \"time\",\n\"format\": \"HH:mm\"\n},\n{\n\"label\": \"Custom Fieldh\",\n\"key\": \"customFieldh\",\n\"type\": \"time\",\n\"format\": \"HH\"\n},\n{\n\"label\": \"Custom Field h:mm:ss A\",\n\"key\": \"customFieldhmmssA\",\n\"type\": \"time\",\n\"format\": \"hh:mm:ss A\"\n},\n{\n\"label\": \"Custom Field h:mm A\",\n\"key\": \"customFieldhmmA\",\n\"type\": \"time\",\n\"format\": \"hh:mm A\"\n},\n{\n\"label\": \"Custom Fieldh\",\n\"key\": \"customFieldhA\",\n\"type\": \"time\",\n\"format\": \"hh A\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldh\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldhmm\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldhmmA\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldhmmssA\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldhA\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step3 Add to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field h:mm:ss\",\n\"key\": \"customField\",\n\"type\": \"time\",\n\"format\": \"HH:mm:ss\"\n} ,\n{\n\"label\": \"Custom Field h:mm\",\n\"key\": \"customFieldhmm\",\n\"type\": \"time\",\n\"format\": \"HH:mm\"\n},\n{\n\"label\": \"Custom Fieldh\",\n\"key\": \"customFieldh\",\n\"type\": \"time\",\n\"format\": \"HH\"\n},\n{\n\"label\": \"Custom Field h:mm:ss A\",\n\"key\": \"customFieldhmmssA\",\n\"type\": \"time\",\n\"format\": \"hh:mm:ss A\"\n},\n{\n\"label\": \"Custom Field h:mm A\",\n\"key\": \"customFieldhmmA\",\n\"type\": \"time\",\n\"format\": \"hh:mm A\"\n},\n{\n\"label\": \"Custom Fieldh\",\n\"key\": \"customFieldhA\",\n\"type\": \"time\",\n\"format\": \"hh A\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldh\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldhmm\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldhmmA\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldhmmssA\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldhA\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/time/time/#placeholder","title":"Placeholder","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Placeholder</code> allows you to provide a concise hint, guiding users on the expected value. This hint is displayed before any user input. It can be calculated based on business logic of application.</p>"},{"location":"widget/fields/field/time/time/#how-does-it-look_1","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p> <p></p>"},{"location":"widget/fields/field/time/time/#how-to-add_1","title":"How to add?","text":"Example <p>Add fields.setPlaceholder to corresponding FieldMetaBuilder.</p> <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setPlaceholder(MyExampleDTO_.customField, \"11:25:58\");\n}\n</code></pre> List widgetInfo widgetForm widget <p>Works for List.</p> <p>not applicable</p> <p>Works for Form.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/time/time/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field color. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/time/time/#how-does-it-look_2","title":"How does it look?","text":"List widgetInfo widgetForm widget <p>not applicable</p>"},{"location":"widget/fields/field/time/time/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. </p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\", provider = TimeValueProvider.class)\nprivate LocalDateTime customField;\nprivate String customFieldColor;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\n}\n}\n</code></pre> List widgetInfo widgetForm widget <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"time\",\n\"bgColorKey\": \"customFieldColor\"\n}\n]\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"time\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p> List widgetInfo widgetForm widget <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"time\",\n\"bgColor\": \"#edaa\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"time\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>not applicable </p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/fields/field/time/time/#drilldown","title":"Drilldown","text":"<p>not applicable</p>"},{"location":"widget/fields/field/time/time/#validation","title":"Validation","text":""},{"location":"widget/type/widget/","title":"Widgets","text":""},{"location":"widget/type/widget/#widget-types","title":"Widget Types","text":"AdditionalInfoAdditionalListAssocListPopupEmptyWidgetFilePreviewFormFormPopupGroupingHierarchyHeaderWidgetInfoListPickListPopupStatsBlock <ul> <li>AdditionalInfo widget is a component only for data viewing. Widget is always located on the left.</li> <li>AdditionalList widget is list the general information for many records. Widget is always located on the left.</li> <li>AssocListPopup widget is a popup component designed to the selection of multiple values.</li> <li>EmptyWidget widget is a component for displaying text.</li> <li>FilePreview widget is a component for file viewing. It always occupies 50% of the main screen area and stays fixed at the top while scrolling.</li> <li>Form widget is a component for data viewing and editing.</li> <li>FormPopup widget is a component for additional field checks in popup and the ability to add information inside the popup.</li> <li>GroupingHierarchy widget presents shared information across multiple records, enabling rows to be grouped by one or more specified fields.</li> <li>HeaderWidget widget is a component for displaying a header.</li> <li>Info widget is a component only for data viewing.</li> <li>List widget is list the general information for many records and present it in a way that is easily interpretable for users.</li> <li>PickListPopup widget is a component that allows the user to select a value from a Popup list of entities.</li> <li>StatsBlock widget is a tool designed to display aggregated data in a visually accessible format.</li> </ul>"},{"location":"widget/type/widget/#structure-widgetjson","title":"Structure .widget.json","text":"<pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Title Form\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"showCondition\":{},\n\"fields\": [],\n\"options\": {}\n}\n</code></pre> <ul> <li>\"name\"</li> </ul> <p>Description: This is a unique identifier for the show condition within the project.</p> <p>Type: String(required).</p> <p>Notes: This value must be unique across the project</p> <ul> <li>\"title\"</li> </ul> <p>Description: Title for widget</p> <p>Type: String(optional).</p> <ul> <li>\"type\"</li> </ul> <p>The value for this widget is required to be \"Form\",</p> <ul> <li>\"bc\"</li> </ul> <p>Description: Business Component</p> <p>Type: String(required).</p> <ul> <li>\"showCondition\"</li> </ul> <p>Description: Define the availability or visibility of the widget  dynamically. see more showCondition</p> <p>Type: String(optional).</p> <ul> <li>\"fields\"</li> </ul> <p>Description: Fields Configuration</p> <p>Type: String(required).</p> <ul> <li>\"options\"</li> </ul> <p>Description:  Defines the structure of the widget using rows and columns.</p> <p>Type: String(required).</p>"},{"location":"widget/type/additionalinfo/additionalinfo/","title":"AdditionalInfo","text":"<p><code>AdditionalInfo</code> widget is a component only for data viewing. Widget is always located on the left.</p>"},{"location":"widget/type/additionalinfo/additionalinfo/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/additionalinfo/additionalinfo/#how-does-it-look","title":"How does it look?","text":""},{"location":"widget/type/additionalinfo/additionalinfo/#how-to-add","title":"How to add?","text":"Example <p>Step1 Create file .widget.json with  type  AdditionalInfo.</p> <ul> <li>name -  static (unique within the project)</li> <li>title - (optional) </li> <li>type = \"AdditionalInfo\" (required)</li> <li>bc - (required)</li> <li>fields- (required) see  field types </li> <li>options </li> </ul> <p><pre><code>{\n\"name\": \"MyExampleAdditional\",\n\"title\": \"Additional information\",\n\"type\": \"AdditionalInfo\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field Date\",\n\"key\": \"customFieldDate\",\n\"type\": \"date\"\n},\n{\n\"label\": \"Custom Field MultivalueHover\",\n\"key\": \"customFieldMultivalueHover\",\n\"assocValueKey\": \"customField\",\n\"popupBcName\": \"myEntityMultiAssocListPopup\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldMultivalueHoverDisplayedKey\"\n},\n{\n\"label\": \"Custom Field Hint\",\n\"key\": \"customFieldHint\",\n\"type\": \"hint\"\n},\n{\n\"label\": \"Custom Field Multivalue\",\n\"key\": \"customFieldMultivalue\",\n\"type\": \"multivalue\",\n\"displayedKey\": \"customFieldMultivalueDisplayedKey\",\n\"popupBcName\": \"myEntityPickAssocListPopup\",\n\"assocValueKey\": \"customField\"\n},\n{\n\"label\": \"Custom Field Multiple Select\",\n\"key\": \"customFieldMultipleSelect\",\n\"type\": \"multipleSelect\"\n},\n{\n\"label\": \"Custom multifield style 'List'\",\n\"key\": \"customFieldMultiField\",\n\"type\": \"multifield\",\n\"style\": \"list\",\n\"fields\": [\n{\n\"label\": \"Custom Field Multi\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field Percent Multi\",\n\"key\": \"customFieldPercent\",\n\"type\": \"input\"\n}\n]\n},\n{\n\"label\": \"Custom Field Pick List\",\n\"key\": \"customFieldPickList\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickPickListPopup\",\n\"pickMap\": {\n\"customFieldPickListId\": \"id\",\n\"customFieldPickList\": \"customField\"\n}\n},\n{\n\"label\": \"Custom Field Inline Pick List\",\n\"key\": \"customFieldInlinePickList\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityPickPickListPopup\",\n\"pickMap\": {\n\"customFieldInlinePickList\": \"customField\",\n\"customFieldInlinePickListId\": \"id\"\n}\n},\n{\n\"label\": \"Custom Field DateTimeWithSeconds\",\n\"key\": \"customFieldDateTimeWithSeconds\",\n\"type\": \"dateTimeWithSeconds\"\n},\n{\n\"label\": \"Custom Field Radio\",\n\"key\": \"customFieldRadio\",\n\"type\": \"radio\"\n},\n{\n\"label\": \"Custom Field Money\",\n\"key\": \"customFieldMoney\",\n\"digits\": 2,\n\"type\": \"money\"\n},\n{\n\"label\": \"Custom Field Percent\",\n\"key\": \"customFieldPercent\",\n\"type\": \"percent\"\n},\n{\n\"label\": \"Custom Field Num\",\n\"key\": \"customFieldNum\",\n\"type\": \"number\"\n},\n{\n\"label\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Custom Field Checkbox\",\n\"key\": \"customFieldCheckbox\",\n\"type\": \"checkbox\"\n},\n{\n\"label\": \"Custom Field DateTime\",\n\"key\": \"customFieldDateTime\",\n\"type\": \"dateTime\"\n},\n{\n\"label\": \"Custom FieldText\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n},\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldDate\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldMultivalueHover\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldHint\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldMultivalue\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldMultipleSelect\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldMultiField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldPickList\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldInlinePickList\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldDateTimeWithSeconds\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldDateTime\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldCheckbox\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldDictionary\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldNum\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldPercent\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldMoney\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldRadio\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Step2 Add widget to corresponding *.view.json* .</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field Date\",\n\"key\": \"customFieldDate\",\n\"type\": \"date\"\n},\n{\n\"title\": \"Custom Field MultivalueHover\",\n\"key\": \"customFieldMultivalueHover\",\n\"assocValueKey\": \"customField\",\n\"popupBcName\": \"myEntityMultiAssocListPopup\",\n\"type\": \"multivalueHover\",\n\"displayedKey\": \"customFieldMultivalueHoverDisplayedKey\"\n},\n{\n\"title\": \"Custom Field Hint\",\n\"key\": \"customFieldHint\",\n\"type\": \"hint\"\n},\n{\n\"title\": \"Custom Field Multivalue\",\n\"key\": \"customFieldMultivalue\",\n\"type\": \"multivalue\",\n\"displayedKey\": \"customFieldMultivalueDisplayedKey\",\n\"popupBcName\": \"myEntityPickAssocListPopup\",\n\"assocValueKey\": \"customField\"\n},\n{\n\"title\": \"Custom Field Multiple Select\",\n\"key\": \"customFieldMultipleSelect\",\n\"type\": \"multipleSelect\"\n},\n{\n\"title\": \"Custom multifield style 'List'\",\n\"key\": \"customFieldMultiField\",\n\"type\": \"multifield\",\n\"style\": \"list\",\n\"fields\": [\n{\n\"title\": \"Custom Field Multi\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Percent Multi\",\n\"key\": \"customFieldPercent\",\n\"type\": \"percent\"\n}\n]\n},\n{\n\"title\": \"Custom Field Pick List\",\n\"key\": \"customFieldPickList\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickPickListPopup\",\n\"pickMap\": {\n\"customFieldPickListId\": \"id\",\n\"customFieldPickList\": \"customField\"\n}\n},\n{\n\"title\": \"Custom Field Inline Pick List\",\n\"key\": \"customFieldInlinePickList\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityPickPickListPopup\",\n\"pickMap\": {\n\"customFieldInlinePickList\": \"customField\",\n\"customFieldInlinePickListId\": \"id\"\n}\n},\n{\n\"title\": \"Custom Field DateTimeWithSeconds\",\n\"key\": \"customFieldDateTimeWithSeconds\",\n\"type\": \"dateTimeWithSeconds\"\n},\n{\n\"title\": \"Custom Field Radio\",\n\"key\": \"customFieldRadio\",\n\"type\": \"radio\"\n},\n{\n\"title\": \"Custom Field Money\",\n\"key\": \"customFieldMoney\",\n\"digits\": 2,\n\"type\": \"money\"\n},\n{\n\"title\": \"Custom Field Percent\",\n\"key\": \"customFieldPercent\",\n\"type\": \"percent\"\n},\n{\n\"title\": \"Custom Field Num\",\n\"key\": \"customFieldNum\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"Custom Field Checkbox\",\n\"key\": \"customFieldCheckbox\",\n\"type\": \"checkbox\"\n},\n{\n\"title\": \"Custom Field DateTime\",\n\"key\": \"customFieldDateTime\",\n\"type\": \"dateTime\"\n},\n{\n\"title\": \"Custom FieldText\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n]\n}\n</code></pre>"},{"location":"widget/type/additionalinfo/additionalinfo/#title","title":"Title","text":""},{"location":"widget/type/additionalinfo/additionalinfo/#title-basic","title":"Title Basic","text":""},{"location":"widget/type/additionalinfo/additionalinfo/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color is a fixed color that doesn't change. It remains the same regardless of any factors in the application. Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Calculated color can be used to change a title color dynamically. It changes depending on business logic or data in the application.</p> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/additionalinfo/additionalinfo/#how-does-it-look_1","title":"How does it look?","text":""},{"location":"widget/type/additionalinfo/additionalinfo/#how-to-add_1","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>    public MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldTextColor = \"#aeda\";\nthis.customFieldText = entity.getCustomFieldText();\nthis.customField = entity.getCustomField();\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExample\",\n\"title\": \"customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"AdditionalInfo\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExampleColorConst\",\n\"title\": \"customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"AdditionalInfo\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColor\": \"#aeda\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"widget/type/additionalinfo/additionalinfo/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this form belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/additionalinfo/additionalinfo/#show-condition","title":"Show condition","text":"<p>not applicable</p>"},{"location":"widget/type/additionalinfo/additionalinfo/#fields","title":"Fields","text":""},{"location":"widget/type/additionalinfo/additionalinfo/#options-layout","title":"Options layout","text":"<p>not applicable</p>"},{"location":"widget/type/additionalinfo/additionalinfo/#actions","title":"Actions","text":"<p><code>Actions</code> show available actions as separate buttons see Actions</p>"},{"location":"widget/type/additionallist/additionallist/","title":"AdditionalList","text":"<p><code>AdditionalList</code> widget is list the general information for many records. Widget is always located on the left.</p> <p>The widget has two modes:</p> <ul> <li> <p>Main Mode: Displays records as a list, ideal for tracking the status of business process steps. Editing is not supported.</p> </li> <li> <p>Reading Mode: Presents values in the widget's specified format for easy viewing.</p> </li> </ul> <p>Info</p> <p>AdditionalList Main Mode does not dynamically expand based on its content. If the number of columns exceeds the available space, a horizontal scrollbar appears at the bottom to accommodate the overflow.</p>"},{"location":"widget/type/additionallist/additionallist/#basic","title":"Basic","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/additionallist/additionallist/#how-does-it-look","title":"How does it look?","text":"Main ModeReading Mode"},{"location":"widget/type/additionallist/additionallist/#how-to-add","title":"How to add?","text":"Example Main ModeReading Mode <p>Step1 Create file .widget.json with type = \"AdditionalList\"</p> <p>Add existing field to a AdditionalList widget. see more Fields <pre><code>{\n\"name\": \"MyExampleAdditional\",\n\"title\": \"AdditionalList basic\",\n\"type\": \"AdditionalList\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\",\n\"mode\": \"icon\",\n\"width\": 1\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n]\n}\n}\n}\n</code></pre></p> <p>Step2 Add widget to corresponding *.view.json* .</p> <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 10,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleAdditionalInfo\",\n\"position\": 11,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleAdditional\",\n\"position\": 19,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleAdditionalRead\",\n\"position\": 20,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 22,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <p>Step1 Create file .widget.json with type = \"AdditionalInfo\"</p> <p>Add existing field to a AdditionalInfo widget. see more Fields <pre><code>{\n\"name\": \"MyExampleAdditionalInfo\",\n\"title\": \"Additional info\",\n\"type\": \"AdditionalInfo\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\",\n\"mode\": \"icon\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldDictionary\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Step2 Create file .widget.json with type = \"AdditionalList\"</p> <p>Add existing field to a AdditionalList widget. see more Fields <pre><code>{\n\"name\": \"MyExampleAdditionalRead\",\n\"title\": \"AdditionalList basic read\",\n\"type\": \"AdditionalList\",\n\"bc\": \"myexample\",\n\"fields\": [\n],\n\"options\": {\n\"read\": {\n\"widget\": \"MyExampleAdditionalInfo\"\n},\n\"actionGroups\": {\n\"include\": [\n]\n}\n}\n}\n</code></pre></p> <p>Step3 Add widget to corresponding *.view.json* .</p> <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 10,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleAdditionalInfo\",\n\"position\": 11,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleAdditional\",\n\"position\": 19,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleAdditionalRead\",\n\"position\": 20,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 22,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre>"},{"location":"widget/type/additionallist/additionallist/#title","title":"Title","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/additionallist/additionallist/#title-basic","title":"Title Basic","text":"<p><code>Title</code> for widget (optional)</p> <p>There are types of:</p> <ul> <li><code>constant title</code>: shows constant text.</li> <li><code>constant title empty</code>: if you want to visually connect widgets by  them to be placed one under another</li> </ul>"},{"location":"widget/type/additionallist/additionallist/#how-does-it-look_1","title":"How does it look?","text":"Constant titleConstant title empty Main ModeReading Mode Main ModeReading Mode"},{"location":"widget/type/additionallist/additionallist/#how-to-add_1","title":"How to add?","text":"Example Constant titleConstant title empty Main ModeReading Mode <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"name\": \"MyExampleAdditional\",\n\"title\": \"AdditionalList Main Mode\",\n\"type\": \"AdditionalList\",\n\"bc\": \"myexample\" ,\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": []\n}\n}\n}\n</code></pre></p> <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"name\": \"MyExampleAdditionalRead\",\n\"title\": \"AdditionalList Read Mode\",\n\"type\" : \"AdditionalList\",\n\"bc\": \"myexample\",\n\"fields\": [\n],\n\"options\": {\n\"read\": {\n\"widget\": \"MyExampleAdditionalInfo\"\n},\n\"actionGroups\": {\n\"include\": []\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> Main ModeReading Mode <p>Step1 Delete parameter title to .widget.json. <pre><code>{\n\"name\": \"MyExampleAdditionalEmptyTitle\",\n\"type\": \"AdditionalList\",\n\"bc\": \"myexample\" ,\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": []\n}\n}\n}\n</code></pre></p> <p>Step1 Delete parameter title to .widget.json. <pre><code>{\n\"name\": \"MyExampleAdditionalInfoEmpty\",\n\"type\": \"AdditionalInfo\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/additionallist/additionallist/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Calculated color can be used to change a title color dynamically. It changes depending on business logic or data in the application.</p> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/additionallist/additionallist/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"widget/type/additionallist/additionallist/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\nprivate String customFieldColor;\nprivate String customFieldTextColor;\n@SearchParameter(name = \"customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldText\")\nprivate String customFieldText;\n@SearchParameter(name = \"customFieldDictionary\", provider = EnumValueProvider.class)\nprivate CustomFieldDictionaryEnum customFieldDictionary;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldText = entity.getCustomFieldText();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldTextColor = \"#aeda\";\nthis.customFieldDictionary = entity.getCustomFieldDictionary();\n}\n}\n</code></pre></p> Main ModeReading Mode <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExampleAdditionalConstant\",\n\"title\": \"customField - ${customField},customFieldText - ${customFieldText} \",\n\"type\": \"AdditionalInfo\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"label\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColor\": \"#aeda\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>not applicable</p> <p> Live Sample \u00b7  GitHub</p> <p>not applicable</p>"},{"location":"widget/type/additionallist/additionallist/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this form belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/additionallist/additionallist/#show-condition","title":"Show condition","text":"<p> Live Sample \u00b7  GitHub</p> <ul> <li><code>no show condition - recommended</code>: widget always visible</li> </ul> <p> Live Sample \u00b7    GitHub</p> <ul> <li><code>show condition by current entity</code>: condition can include boolean expression depending on current entity fields. Field updates will trigger condition recalculation only on save or if field is force active</li> </ul> <p>Tips</p> <p>It is recommended not to use <code>Show condition</code> when possible, because wide usage of this feature makes application hard to support.</p>"},{"location":"widget/type/additionallist/additionallist/#how-does-it-look_3","title":"How does it look?","text":"no show conditionshow condition by current entity <p>see Basic</p> <p></p>"},{"location":"widget/type/additionallist/additionallist/#how-to-add_3","title":"How to add?","text":"Example no show conditionshow condition by current entity <p>see Basic</p> <p>Step1 Add showCondition to .widget.json. see more showCondition</p> Main ModeReading Mode <pre><code>{\n\"name\": \"MyExampleAdditional\",\n\"title\": \"AdditionalList widget show condition\",\n\"type\": \"AdditionalList\",\n\"bc\": \"myexample\",\n\"showCondition\": {\n\"bcName\": \"myexample\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCond\",\n\"value\": \"true\"\n}\n},\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": []\n}\n}\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleAdditionalRead\",\n\"title\": \"AdditionalList widget show condition\",\n\"type\" : \"AdditionalList\",\n\"bc\": \"myexample\",\n\"showCondition\": {\n\"bcName\": \"myexample\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCond\",\n\"value\": \"true\"\n}\n},\n\"fields\": [\n],\n\"options\": {\n\"read\": {\n\"widget\": \"MyExampleAdditionalInfo\"\n},\n\"actionGroups\": {\n\"include\": []\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/additionallist/additionallist/#fields","title":"Fields","text":"<p>Fields Configuration. The fields array defines the individual fields present within the form.</p> <pre><code>{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n</code></pre> <ul> <li>\"title\"</li> </ul> <p>Description:  Field Title.</p> <p>Type: String(optional).</p> <ul> <li> <p>\"key\"</p> <p>Description: Name field to corresponding DataResponseDTO.</p> <p>Type: String(required).</p> </li> <li> <p>\"type\"</p> </li> </ul> <p>Description: Field types</p> <p>Type: String(required).</p>"},{"location":"widget/type/additionallist/additionallist/#how-to-add_4","title":"How to add?","text":"Example With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing form widget     </p> Main ModeReading Mode <p>Add field to .widget.json.</p> <pre><code>   {\n\"name\": \"MyExampleAdditional\",\n\"title\": \"AdditionalList basic\",\n\"type\": \"AdditionalList\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\",\n\"mode\": \"icon\",\n\"width\": 1\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n]\n}\n}\n}\n</code></pre> <p>Add field to .widget.json for \"widget.read\" widget.</p> <pre><code>\n</code></pre>"},{"location":"widget/type/additionallist/additionallist/#options-layout","title":"Options layout","text":"<p>options.layout - no use in this type.</p>"},{"location":"widget/type/additionallist/additionallist/#actions","title":"Actions","text":"<p>not applicable</p>"},{"location":"widget/type/additionallist/additionallist/#additional-properties","title":"Additional properties","text":""},{"location":"widget/type/additionallist/additionallist/#customization-of-displayed-columns","title":"Customization of displayed columns","text":"<p> Live Sample \u00b7  GitHub</p> <p>To customize the columns displayed on a list widget, you can perform two main actions:</p> <ul> <li>Hide columns</li> <li>Swap columns</li> </ul> <p>Info</p> <p>Currently, table customization data is stored within internal tables, even when microservices are used.</p>"},{"location":"widget/type/additionallist/additionallist/#basic_1","title":"Basic","text":"<p>When customizing columns, records are inserted into the ADDITIONAL_FIELDS table. Table ADDITIONAL_FIELDS for store user-specific settings:</p> <ul> <li><code>user_id</code>:  The user ID for which the columns are being customized.</li> <li><code>view</code>: The name of the view where the columns are customized.</li> <li><code>widget</code>: The name of the widget where the columns are customized.</li> <li><code>order_fields</code>: When configuring swap columns, the field sequence will be updated, and a new comma-separated sequence of fields will be saved.</li> <li><code>added_to_additional_fields</code>: User-hidden fields.</li> <li><code>removed_from_additional_fields</code></li> </ul>"},{"location":"widget/type/additionallist/additionallist/#how-does-it-look_4","title":"How does it look?","text":"Hide columnsSwap columnsPre-hidden"},{"location":"widget/type/additionallist/additionallist/#how-to-add_5","title":"How to add?","text":"Example Hide and Swap columnsPre-hidden columns <p>Add in options parameter additional to corresponding .widget.json.</p> <pre><code>\"additional\": {\n  \"enabled\": true\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleAdditional\",\n\"title\": \"AdditionalList widget customization columns\",\n\"type\": \"AdditionalList\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"additional\": {\n\"enabled\": true\n},\n\"actionGroups\": {\n\"include\": []\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>\u0421an also set columns to be pre-hidden, meaning they will be hidden when the widget opens.</p> <p>Add in options parameter additional to corresponding .widget.json.</p> <p>Add in options parameter fields with list of hidden fields  to corresponding .widget.json.</p> <pre><code>   \"additional\": {\n      \"fields\": [\"customFieldText\"],\n      \"enabled\": true\n    }\n</code></pre> <pre><code>{\n\"name\": \"MyExampleAdditionalHidden\",\n\"title\": \"AdditionalList widget customization columns hidden\",\n\"type\": \"AdditionalList\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"additional\": {\n\"fields\": [\"customFieldText\"],\n\"enabled\": true\n},\n\"actionGroups\": {\n\"include\": []\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/additionallist/additionallist/#filtration","title":"Filtration","text":""},{"location":"widget/type/additionallist/additionallist/#basic_2","title":"Basic","text":"<p>Works only for mode basic</p> <p>see more  Fields</p>"},{"location":"widget/type/additionallist/additionallist/#fulltextsearch","title":"FullTextSearch","text":"<p>not applicable</p>"},{"location":"widget/type/additionallist/additionallist/#personal-filter-group","title":"Personal filter group","text":"<p>A user-filled filter can be saved for each individual user. see Personal filter group</p>"},{"location":"widget/type/additionallist/additionallist/#filter-group","title":"Filter group","text":"<p><code>Filter group</code> - predefined filters settings that users can use in an application. They allow users to quickly apply specific filtering criteria without having to manually input. see Filter group</p>"},{"location":"widget/type/additionallist/additionallist/#pagination","title":"Pagination","text":"<p>not applicable</p>"},{"location":"widget/type/additionallist/additionallist/#export-to-excel","title":"Export to Excel","text":"<p>Works only for mode basic </p> <p><code>Export to Excel</code> enables users to download a .xlsx file containing the table's data. see Excel</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/","title":"AssocListPopup","text":"<p><code>AssocListPopup</code> widget is a popup component designed to the selection of multiple values.</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-does-it-look","title":"How does it look?","text":"Assoc widget fieldAssoc widget button ListInfoForm <p>not applicable</p> <p>not applicable</p> <p></p> ListInfoForm <p></p> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-to-add","title":"How to add?","text":"Example Assoc widget fieldAssoc widget button ListInfoForm <p>not applicable</p> <p>not applicable</p> <p>Step1 Add field with type multivalue see more Fields</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field New\",\n\"key\": \"customFieldNew\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"multivalue\",\n\"displayedKey\": \"customFieldDisplayedKey\",\n\"popupBcName\": \"myEntityMultiAssocListPopup\",\n\"assocValueKey\": \"customField\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldNew\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step2 Add widget to corresponding *.view.json* .</p> <pre><code>{\n\"name\": \"myexampleform\",\n\"title\": \"MyExample Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"myexampleAssoc\",\n\"position\": 1,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myEntityMultiAssocListPopup\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 10,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> ListInfoForm <p>Step1 Add button <code>associate</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.associate(ast -&gt; ast\n.text(\"Popup Assoc\")\n)\n.save(sv -&gt; sv.text(\"Save\"))\n.create(crt -&gt; crt)\n.delete(dlt -&gt; dlt)\n.build();\n}\n</code></pre> Step2 Add method <code>doAssociate</code> to corresponding VersionAwareResponseService. </p> <p><code>associate</code></p> <p><pre><code>    @Override\nprotected AssociateResultDTO doAssociate(List&lt;AssociateDTO&gt; data, BusinessComponent bc) {\nList&lt;MyEntity&gt; myEntityList = addNewRecords(data, bc);\nList&lt;MyExampleDTO&gt; collect = myEntityList.stream()\n.map(e -&gt; entityToDto(bc, e))\n.toList();\nreturn new AssociateResultDTO((List) collect);\n}\n</code></pre> method <code>addNewRecords</code> <pre><code>    @SneakyThrows\nprivate List&lt;MyEntity&gt; addNewRecords(List&lt;AssociateDTO&gt; dataIds, BusinessComponent bc) {\nList&lt;MyEntity&gt; recordList = new ArrayList&lt;&gt;();\nfor (AssociateDTO item : dataIds) {\nList&lt;MyEntityMulti&gt; listMultivalue = new ArrayList&lt;&gt;();\nOptional&lt;MyEntityMulti&gt; entityChild = repositoryMulti.findById(Long.valueOf(item.getId()));\nlistMultivalue.add(entityChild.get());\nMyEntity myEntity = new MyEntity().setCustomFieldList(listMultivalue).setCustomFieldNew(entityChild.get().getCustomFieldNew());\nrecordList.add(repository.save(myEntity));\n}\nreturn recordList;\n}\n</code></pre></p> <p>Step3 Create file .widget.json with type = \"assoc\" and name = parent bc + \"Assoc\"</p> <p>Add existing field to assoc widget. see more Fields</p> <p><pre><code>{\n\"title\": \"AssocListPopup widget action button\",\n\"name\": \"myexampleAssoc\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myexampleAssoc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field New\",\n\"key\": \"customFieldNew\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre> Step4 Add a dependency on parent BC for Assoc BC for to corresponding EnumBcIdentifier</p> <pre><code>\n</code></pre> <p>Step5 Add assoc widget to corresponding *.view.json* .</p> <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"MyExample Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"widgets\": [\n{\n\"widgetName\": \"myexampleAssoc\",\n\"position\": 1,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myEntityMultiAssocListPopup\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 10,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <p>not applicable</p> <p>not applicable</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#title","title":"Title","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#title-basic","title":"Title Basic","text":"<p><code>Title</code> for widget (optional)</p> <p>There are types of:</p> <ul> <li><code>constant title</code>: shows constant text.</li> <li><code>constant title empty</code>: if you want to visually connect widgets by  them to be placed one under another</li> </ul>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-does-it-look_1","title":"How does it look?","text":"Constant titleConstant title empty"},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-to-add_1","title":"How to add?","text":"Example Constant titleConstant title empty <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"name\": \"myEntityMultiPickAssocListPopup\",\n\"title\": \"AssocListPopup with title\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityMultiPick\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p>Step1 Delete parameter title to .widget.json. <pre><code>{\n\"name\": \"myEntityMultiPickAssocEmptyListPopup\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityMultiPickEmpty\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color is a fixed color that doesn't change. It remains the same regardless of any factors in the application.</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Calculated color can be used to change a title color dynamically. It changes depending on business logic or data in the application.</p> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyEntityMultiPickDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldText\")\nprivate String customFieldText;\nprivate String customFieldColor;\nprivate String customFieldColorFieldText;\npublic MyEntityMultiPickDTO(MyEntityMulti entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldText = entity.getCustomFieldText();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldColorFieldText = \"#aeda\";\n}\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"title\": \"Field Input: ${customField}, Field Text: ${customFieldText}\",\n\"name\": \"myEntityMultiPickAssocListPopup\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityMultiPick\",\n\"fields\": [\n{\n\"title\": \"Custom Field Input\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n},\n{\n\"title\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"text\",\n\"bgColorKey\": \"customFieldColorFieldText\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"title\": \"Field Input: ${customField}, Field Text: ${customFieldText}\"  ,\n\"name\": \"myEntityMultiPickAssocListPopup\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityMultiPick\",\n\"fields\": [\n{\n\"title\": \"Custom Field Input\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"title\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"text\",\n\"bgColor\": \"#aeda\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this form belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#show-condition","title":"Show condition","text":""},{"location":"widget/type/assoclistpopup/assoclistpopup/#fields","title":"Fields","text":"<p>Fields Configuration. The fields array defines the individual fields present within the form.</p> <pre><code>{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n</code></pre> <ul> <li>\"title\"</li> </ul> <p>Description:  Field Title.</p> <p>Type: String(optional).</p> <ul> <li>\"key\"</li> </ul> <p>Description: Name field to corresponding DataResponseDTO.</p> <p>Type: String(required).</p> <ul> <li>\"type\"</li> </ul> <p>Description: Field types</p> <p>Type: String(required).</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-to-add_3","title":"How to add?","text":"Example With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing form widget     </p> <p>Add field to .widget.json.</p> <pre><code>   {\n\"title\": \"AssocListPopup title\",\n\"name\": \"myEntityMultiAssocListPopup\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityMultiAssocListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#options-layout","title":"Options layout","text":"<p>options.layout - no use in this type.</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#actions","title":"Actions","text":"<p><code>Actions</code> show available actions as separate buttons see more Actions.</p> <p>Standard Actions:</p> <ul> <li><code>Create</code>: Action to initialize the process of creating a new record</li> <li><code>Delete</code>: Remove an existing record</li> <li><code>Edit</code>: Users to update or correct information</li> <li><code>Save</code>: Action to store the data entered or modified</li> <li><code>Cancel-create</code>: Action to abort the creation of a new record, discarding any input without saving</li> </ul> <p>As for assoc widget, there are several actions.</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#create","title":"Create","text":"<p><code>Create</code> button enables you to create a new value by clicking the <code>Add</code> button. This action can be performed in three different ways, feel free to choose any, depending on your logic of application:</p> <p>There are three methods to create a record:</p> <ul> <li>Inline: You can add a line directly.</li> </ul> <p>Info</p> <p>Pagination won't function until the page is refreshed after adding records.</p> <ul> <li> <p>Inline-form: You can add data using a form widget without leaving your current view.</p> </li> <li> <p>With view: not applicable.</p> </li> </ul>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#inline","title":"Inline","text":"<p> Live Sample \u00b7  GitHub</p> <p>With <code>Line Addition</code>, a new empty row is immediately added to the top of the assoc widget when the \"Add\" button is clicked. This is a quick way to add rows without needing to input data beforehand.</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-does-it-look_3","title":"How does it look?","text":""},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-to-add_4","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyEntityMultiMultivalueDTO&gt; getActions() {\nreturn Actions.&lt;MyEntityMultiMultivalueDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre></p> <p>Step2 Add button <code>create</code> to corresponding .widget.json.  <pre><code>{\n\"name\": \"myEntityMultiAssocListPopupCreateAssocListPopup\",\n\"title\": \"AssocListPopup create inline\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityMultiAssocListPopupCreate\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"delete\",\n\"save\"\n]\n}\n}\n}\n</code></pre></p> <p>Step3 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#inline-form","title":"Inline-form","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Create with widget</code> opens an additional widget when the \"Add\" button is clicked. The form will appear on the same screen, allowing you to view both the assoc of entities and the form for adding a new row. After filling the information in and clicking \"Save\", the new row is added to the assoc.</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-does-it-look_4","title":"How does it look?","text":""},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-to-add_5","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyEntityMultiMultivalueDTO&gt; getActions() {\nreturn Actions.&lt;MyEntityMultiMultivalueDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>\n</code></pre> Step3 Create widget.json with type <code>Form</code> that appears when you click a button <pre><code>{\n\"title\": \"\",\n\"name\": \"myEntityMultiFormForPopup\",\n\"type\": \"Form\",\n\"bc\": \"myEntityMultiAssocListPopup\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n},\n\"actionGroups\": {\n\"include\": [\n\"save\",\n\"cancel-create\"\n]\n}\n}\n}\n</code></pre></p> <p>Step4 Add widget.json with type <code>Form</code> to corresponding .view.json.  <pre><code>{\n\"name\": \"myexampleinlinecreate\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleinlinecreate\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 1,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myEntityMultiFormForPopup\",\n\"position\": 1,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myEntityMultiAssocListPopup\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"ThirdLevelMenu\",\n\"position\": 4,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Step5 Add button <code>create</code> and widget with type <code>Form</code> to corresponding .widget.json.</p> <p><code>options</code>.<code>create</code>: Name widget that appears when you click a button</p> <pre><code>{\n\"title\": \"AssocListPopup widget action create Inline-form\",\n\"name\": \"myEntityMultiAssocListPopup\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityMultiAssocListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"create\": {\n\"widget\": \"myEntityMultiFormForPopup\"\n},\n\"edit\": {\n\"widget\": \"myEntityMultiFormForPopup\"\n},\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"delete\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#with-view","title":"With view","text":"<p>not applicable</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#delete","title":"Delete","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Delete</code> remove an existing record.</p> <p>Tips</p> <p>Please note that the row you are attempting to delete may be referenced by another part of the system or a parent entity. To ensure clarity, you should handle this exception and provide a explanation to the user.</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-does-it-look_5","title":"How does it look?","text":""},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-to-add_6","title":"How to add?","text":"Example <p>Step1 Add action delete to corresponding VersionAwareResponseService. </p> <p>By default, the access button is available when a record exist.</p> <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.save(sv -&gt; sv.text(\"Save\"))\n.create(crt -&gt; crt)\n.delete(dlt -&gt; dlt)\n.build();\n}\n</code></pre> <p>Step2 Add button ot group button to corresponding .widget.json.</p> <p><pre><code>{\n\"title\": \"AssocListPopup widget action save\",\n\"name\": \"myEntityMultiAssocSaveListPopup\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityMultiAssocSaveListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"save\"\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#edit","title":"Edit","text":"<p><code>Edit</code> enables you to change the field value. Just like with <code>Create</code> button, there are three ways of implementing this Action.</p> <p>There are three methods to create a record:</p> <ul> <li> <p>Inline edit: You can edit a line directly.</p> </li> <li> <p>Inline-form: You can edit data using a form widget without leaving your current view.</p> </li> <li> <p>With view: not applicable</p> </li> </ul>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#inline-edit","title":"Inline edit","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Edit Inline</code> implies inline-edit. Click twice on the value you want to change.</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-does-it-look_6","title":"How does it look?","text":""},{"location":"widget/type/assoclistpopup/assoclistpopup/#how-to-add_7","title":"How to add?","text":"Example <p>Step1 Add fields.setEnabled to corresponding FieldMetaBuilder. </p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#inline-form_1","title":"Inline-form","text":"<p>not applicable</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#with-view_1","title":"With view","text":"<p>not applicable</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#additional-properties","title":"Additional properties","text":""},{"location":"widget/type/assoclistpopup/assoclistpopup/#customization-of-displayed-columns","title":"Customization of displayed columns","text":"<p>not applicable</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#filtration","title":"Filtration","text":""},{"location":"widget/type/assoclistpopup/assoclistpopup/#basic","title":"Basic","text":"<p>see more  Fields</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#fulltextsearch","title":"FullTextSearch","text":"<p><code>FullTextSearch</code> - when the user types in the full text search input area, then widget filters the rows that match the search query. see FullTextSearch</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#personal-filter-group","title":"Personal filter group","text":"<p>not applicable</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#filter-group","title":"Filter group","text":"<p>not applicable</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#pagination","title":"Pagination","text":"<p><code>Pagination</code> is the process of dividing content into separate, discrete pages, making it easier to navigate and consume large amounts of information. see Pagination</p>"},{"location":"widget/type/assoclistpopup/assoclistpopup/#export-to-excel","title":"Export to Excel","text":"<p>not applicable</p>"},{"location":"widget/type/emptywidget/emptywidget/","title":"EmptyWidget","text":"<p><code>EmptyWidget</code> widget is a component for displaying text.</p> <ul> <li>does not support control elements (e.g., action buttons or menus) and fields.</li> </ul>"},{"location":"widget/type/emptywidget/emptywidget/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/emptywidget/emptywidget/#how-does-it-look","title":"How does it look?","text":"Empty widgetEmpty widget with other widgetEmptyWidget and emptywidget"},{"location":"widget/type/emptywidget/emptywidget/#how-to-add","title":"How to add?","text":"Example <p>Step1 Create file .widget.json. with  type = \"EmptyWidget\"</p> <pre><code>   {\n\"name\": \"myexampleEmptyWidget\",\n\"title\": \"Empty Widget\",\n\"type\": \"EmptyWidget\",\n\"bc\": \"myexample\",\n\"fields\": [\n]\n}\n</code></pre> <p>Step2 Add widget to corresponding *.view.json* .</p> <pre><code>    {\n\"name\": \"myexampleempty\",\n\"title\": \"MyExample Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleempty\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myexampleEmptyWidget\",\n\"position\": 1,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/emptywidget/emptywidget/#title","title":"Title","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/emptywidget/emptywidget/#title-basic","title":"Title Basic","text":"<p><code>Title</code> for widget.</p> <p>There are types of:</p> <ul> <li><code>constant title</code>: shows constant text. </li> <li><code>calculated title</code>: shows value provided in hidden text field, e.g. it can be calculated based on business logic of application</li> </ul>"},{"location":"widget/type/emptywidget/emptywidget/#how-does-it-look_1","title":"How does it look?","text":"Constant titleCalculated title"},{"location":"widget/type/emptywidget/emptywidget/#how-to-add_1","title":"How to add?","text":"Example Constant titleCalculated title <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"name\": \"myExampleconst\",\n\"title\": \"Empty Widget Custom Title\",\n\"type\": \"EmptyWidget\",\n\"bc\": \"myexample\",\n\"fields\": [\n]\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p> Step1 Add ${customField} for title to .widget.json.</p> <p>Dynamic data output in the title only works if these fields are displayed on or passed as the Field hidden type from other widget List widget, Form widget,Info widget.</p> <p><pre><code>{\n\"name\": \"myExample\",\n\"title\": \"Empty Widget Custom Title - value field 'Custom Field' : ${customField}\",\n\"type\": \"EmptyWidget\",\n\"bc\": \"myexample\",\n\"fields\": [\n]\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/emptywidget/emptywidget/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>Constant color*</code> is a fixed color that doesn't change. It remains the same regardless of any factors in the application.</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>Calculated color</code> can be used to change a title color dynamically. It changes depending on business logic or data in the application.</li> </ul> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/emptywidget/emptywidget/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"widget/type/emptywidget/emptywidget/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>    private String customFieldColor;\nprivate String customFieldTextColor;\n@SearchParameter(name = \"customFieldText\", provider = StringValueProvider.class)\nprivate String customFieldText;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldText = entity.getCustomFieldText();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldTextColor = \"#aeda\";\n}\n</code></pre></p> <p>Step 2 Dynamic data output in the header only works if these fields are displayed on or passedas the Field hidden type from other  widget List widget, Form widget,Info widget with the bgColorKey property.</p> <p>Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json .(List widget, Form widget,Info widget)</p> <pre><code>{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n</code></pre> <pre><code>{\n\"name\": \"myexampleForm\",\n\"title\": \"Form\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"save\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step 3 Add in <code>title</code> field with `${customField} . </p> <pre><code>{\n\"name\": \"myExampleEmptyWidget\",\n\"title\": \"Empty Widget customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"EmptyWidget\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"hidden\",\n\"bgColorKey\": \"customFieldColor\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"hidden\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Constant color in the title only works if these fields are displayed on or passedas the Field hidden type from other  widget List widget, Form widget,Info widget.</p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.(List widget, Form widget,Info widget.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"myExampleEmptyWidgetConstColor\",\n\"title\": \"Empty Widget customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"EmptyWidget\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"hidden\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"hidden\",\n\"bgColor\": \"#aeda\"\n}\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/emptywidget/emptywidget/#show-condition","title":"Show condition","text":"<p>see more showCondition</p> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>no show condition - recommended</code>: widget always visible</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>show condition by current entity</code>: condition can include boolean expression depending on current entity fields. Field updates will trigger condition recalculation only on save or if field is force active</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>show condition by parent entity</code>: condition can include boolean expression depending on parent entity. Parent field updates will trigger condition recalculation only on save or if field is force active shown on same view</li> </ul> <p>Tips</p> <p>It is recommended not to use <code>Show condition</code> when possible, because wide usage of this feature makes application hard to support.</p>"},{"location":"widget/type/emptywidget/emptywidget/#how-does-it-look_3","title":"How does it look?","text":"no show conditionshow condition by current entityshow condition by parent entity"},{"location":"widget/type/emptywidget/emptywidget/#how-to-add_3","title":"How to add?","text":"Example no show conditionshow condition by current entityshow condition by parent entity <p>see Basic  Live Sample \u00b7  GitHub</p> <p><code>showCondition</code> only works if these fields for showCondition are displayed on or passed as the Field hidden type from other widget List widget, Form widget,Info widget.</p> <p>Step1 Add showCondition to .widget.json. see more showCondition <pre><code>{\n\"name\": \"myExample\",\n\"title\": \"Empty Widget\",\n\"type\": \"EmptyWidget\",\n\"bc\": \"myexample\",\n\"showCondition\": {\n\"bcName\": \"myexample\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCondition\",\n\"value\": true\n}\n},\n\"fields\": [\n]\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p><code>showCondition</code> only works if these fields for showCondition are displayed on or passed as the Field hidden type from other widget List widget, Form widget,Info widget.</p> <p>Step1 Add showCondition to .widget.json. see more showCondition <pre><code>{\n\"name\": \"myexampleEmpty\",\n\"title\": \"Empty Widget\",\n\"type\": \"EmptyWidget\",\n\"bc\": \"myexample\",\n\"showCondition\": {\n\"bcName\": \"myexample\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCondition\",\n\"value\": true\n}\n},\n\"fields\": [\n]\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/emptywidget/emptywidget/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this emptywidget belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/emptywidget/emptywidget/#fields","title":"Fields","text":"<p>This widget type does not support fields</p>"},{"location":"widget/type/emptywidget/emptywidget/#options","title":"Options","text":"<p>This widget type does not support options</p>"},{"location":"widget/type/emptywidget/emptywidget/#standard-actions","title":"Standard Actions","text":"<p>This widget type does not support buttons</p>"},{"location":"widget/type/filepreview/filepreview/","title":"FilePreview","text":"<p><code>FilePreview</code> widget is used for file viewing. It always occupies 50% of the main screen area and is placed next to other content. The widget is fixed at the top of the screen while scrolling, ensuring the document remains visible.  </p>"},{"location":"widget/type/filepreview/filepreview/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub </p> <ul> <li>Displays only the fileUpload field type  </li> <li>Supports a new mode:inline for the fileUpload field, displaying the document directly within the page without opening a popup  </li> <li>The allocated area remains fixed even if no file is uploaded  </li> <li>The area cannot be collapsed  </li> </ul> <p>Info</p> <p>Due to its fixed position, placing other widgets directly below it on the same vertical axis is not possible.  </p>"},{"location":"widget/type/filepreview/filepreview/#how-does-it-look","title":"How does it look?","text":""},{"location":"widget/type/filepreview/filepreview/#how-to-add","title":"How to add?","text":"Example <p>Step1 Create file .widget.json with type = \"FilePreview\" Add existing field with type <code>fileUpload</code> to a <code>FilePreview</code> widget. see more Fields Add      <pre><code>    \"preview\": {\n\"enabled\": true,\n\"mode\": \"inline\"\n}\n</code></pre> <pre><code>   {\n\"name\": \"MyExampleFilePreview\",\n\"title\": \"FilePreview\",\n\"type\": \"FilePreview\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"fileUpload\",\n\"fileIdKey\": \"customFieldId\",\n\"preview\": {\n\"enabled\": true,\n\"mode\": \"inline\"\n}\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p>Step2 Add widget to corresponding *.view.json* .</p> <pre><code>    {\n\"name\": \"MyExampleform\",\n\"title\": \"MyExample Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/MyExampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleFilePreview\",\n\"position\": 10,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre>"},{"location":"widget/type/filepreview/filepreview/#title","title":"Title","text":"<p>Work in progress</p>"},{"location":"widget/type/filepreview/filepreview/#business-component","title":"Business component","text":"<p>Work in progress</p>"},{"location":"widget/type/filepreview/filepreview/#show-condition","title":"Show condition","text":"<p>Work in progress</p>"},{"location":"widget/type/filepreview/filepreview/#standard-actions","title":"Standard Actions","text":"<p>Work in progress</p>"},{"location":"widget/type/form/form/","title":"Form","text":"<p><code>Form</code> widget is a component for data viewing and editing. Usually it shows multiple fields. Also, it can show available actions.</p>"},{"location":"widget/type/form/form/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#how-does-it-look","title":"How does it look?","text":""},{"location":"widget/type/form/form/#how-to-add","title":"How to add?","text":"Example <p>Step1 Create file .widget.json. with  type = \"Form\" Add existing field to a form widget. see more Fields</p> <pre><code>   {\n\"name\": \"MyExampleForm\",\n\"title\": \"Form widget\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Step2 Add widget to corresponding *.view.json* .</p> <pre><code>    {\n\"name\": \"myexampleform\",\n\"title\": \"My Example Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 19,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleFormInfoText\",\n\"position\": 20,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 30,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#title","title":"Title","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#title-basic","title":"Title Basic","text":"<p><code>Title</code> for widget - (optional)</p> <p> </p> <p>There are types of:</p> <ul> <li><code>constant title</code>: shows constant text.</li> <li><code>constant title empty</code>: if you want to visually connect widgets by  them to be placed one under another</li> <li><code>calculated title</code>: shows value provided in hidden text field, e.g. it can be calculated based on business logic of application</li> </ul>"},{"location":"widget/type/form/form/#how-does-it-look_1","title":"How does it look?","text":"Constant titleConstant title emptyCalculated title"},{"location":"widget/type/form/form/#how-to-add_1","title":"How to add?","text":"Example Constant titleConstant title emptyCalculated title <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Constant Title\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p>Step1 Delete parameter title to .widget.json. <pre><code>{\n\"name\": \"MyExampleEmptyTitleForm\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field widget: Empty Title\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p> Step1 Add ${customField} for title to .widget.json. <pre><code>{\n\"name\": \"MyExampleFormCustomTitle\",\n\"title\": \"Custom Title - value field 'Custom Field' : ${customField}\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>Constant color*</code> is a fixed color that doesn't change. It remains the same regardless of any factors in the application.</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>Calculated color</code> can be used to change a title color dynamically. It changes depending on business logic or data in the application.</li> </ul> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/form/form/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"widget/type/form/form/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>    public MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldTextColor = \"#aeda\";\nthis.customFieldText = entity.getCustomFieldText();\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExampledynamic\",\n\"title\": \"customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExampleconst\",\n\"title\": \"customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColor\": \"#aeda\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#show-condition","title":"Show condition","text":"<p>see more showCondition</p> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>no show condition - recommended</code>: widget always visible</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>show condition by current entity</code>: condition can include boolean expression depending on current entity fields. Field updates will trigger condition recalculation only on save or if field is force active</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>show condition by parent entity</code>: condition can include boolean expression depending on parent entity. Parent field updates will trigger condition recalculation only on save or if field is force active shown on same view</li> </ul> <p>Tips</p> <p>It is recommended not to use <code>Show condition</code> when possible, because wide usage of this feature makes application hard to support.</p>"},{"location":"widget/type/form/form/#how-does-it-look_3","title":"How does it look?","text":"no show conditionshow condition by current entityshow condition by parent entity"},{"location":"widget/type/form/form/#how-to-add_3","title":"How to add?","text":"Example no show conditionshow condition by current entityshow condition by parent entity <p>see Basic  Live Sample \u00b7  GitHub</p> <p>Step1 Add showCondition to .widget.json. see more showCondition <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Show condition widget\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"showCondition\": {\n\"bcName\": \"myExampleBc\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCondition\",\n\"value\": true\n}\n},\n\"fields\": [\n{\n\"label\": \"Custom Field, bc - myExampleBc\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"create\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Add showCondition to .widget.json. see more showCondition <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"showCondition\": {\n\"bcName\": \"myExampleBc\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCondition\",\n\"value\": true\n}\n},\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"create\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this form belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/form/form/#fields","title":"Fields","text":"<p>Fields Configuration. The fields array defines the individual fields present within the form.</p> <pre><code>{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n</code></pre> <ul> <li>\"label\"</li> </ul> <p>Description:  Field Title.</p> <p>Type: String(optional).</p> <ul> <li>\"key\"</li> </ul> <p>Description: Name field to corresponding DataResponseDTO.</p> <p>Type: String(required).</p> <ul> <li>\"type\"</li> </ul> <p>Description: Field types</p> <p>Type: String(required).</p>"},{"location":"widget/type/form/form/#how-to-add_4","title":"How to add?","text":"Example With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing form widget     </p> <p>Add field to .widget.json.</p> <pre><code>   {\n\"name\": \"MyExampleForm\",\n\"title\": \"Form widget\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>see more  Fields</p>"},{"location":"widget/type/form/form/#options","title":"Options","text":"<p>The options object provides layout details for the widget.</p>"},{"location":"widget/type/form/form/#options-layout","title":"Options layout","text":"<p> Live Sample \u00b7  GitHub</p> <p>Defines the structure of the widget using rows and columns.</p> <ul> <li><code>single column layout - recommended</code>: shows each field on new row. Each field can have width from 1 to 24.</li> </ul> <p>Tips</p> <p>Use single column layout when fields are frequently hidden or rearranged. This avoids layout issues and ensures the best user experience.</p> <ul> <li><code>multi column layout</code>: shows fields in grid. Grid can contain any number of rows. Each row can contain any number of fields, until sum of fields widths in row is less than 24. Each field can have width from 1 to 24.</li> <li><code>empty</code>: only title and actions are shown. Usually used when standard buttons position needs to be changed (for example we want to show buttons under widget). One can hide buttons on widget with data. Create separate widget only with buttons and place it anywhere on view</li> </ul> <p>Tips</p> <p>It is recommended to use <code>single column</code> layout when possible, because dynamic fields hiding (add link) always works correctly in this case.</p> <p>Info</p> <p>The line has a size of 24 span, if you define fields on one line with a field width sum exceeding 24 span in total,that field and any subsequent fields will be moved to a new line . This means that each line will accommodate fields until the total width reaches 24 span, and any excess width will continue on the next line.</p> <p>For example, you have three fields with widths of 12, 8, and 10 characters, respectively. In this case, the first field and two field will fit completely on the first line as it is within the 24-character limit. However, the thirt field's width contributes to the totat.It has finally become more 24. As a result, the third field will be moved to the next line.</p>"},{"location":"widget/type/form/form/#how-does-it-look_4","title":"How does it look?","text":"Single column layout - recommendedMulti column layoutEmpty only buttons"},{"location":"widget/type/form/form/#how-to-add_5","title":"How to add?","text":"Example Single column layout - recommendedMulti column layoutEmpty only buttons <p>Step1 Create \"options\": {\"layout\": {}}.</p> <p>Step2 Add fields to \"options\": {\"layout\": {}}</p> <p>Forming rows:</p> <ul> <li>Open <code>cols</code> : \"cols\": [</li> <li>Add All fields(customField,customField2,customField3) with span from 1 to 24.</li> <li>Close <code>cols</code> : ]</li> </ul> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Single column layout - recommended\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field span 6\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field span 12\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field span 24\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 6\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 24\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Create \"options\": {\"layout\": {}}.</p> <p>Step2 Add fields to \"options\": {\"layout\": {}}.</p> <p>Forming row1 : </p> <ul> <li>Open <code>cols</code> : \"cols\": [ </li> <li>Add all feild : customField,customField2,customField3</li> <li>Check sum span &lt;= 24: customField (span = 12),customField2 = 6, customField3 = 6 : sum 24)</li> <li>Close <code>cols</code> : ]</li> </ul> <p>Forming a row2 : </p> <ul> <li>Open 'cols' : \"cols\": [ </li> <li>Add All filed(customField4)</li> <li>Check sum span &lt;= 24 (customField4 span = 12 : sum 12)</li> <li>Close 'cols' : ]</li> </ul> <pre><code>{\n\"name\": \"MyExampleEmptyTitleForm\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field widget: Empty Title\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Create \"options\": {\"layout\": {}}.</p> <p>Button \"Create\" - On default</p> <pre><code>{\n\"name\": \"MyExampleEmptyOnlyButtonsForm\",\n\"title\": \"Empty Only Buttons\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"\",\n\"key\": \"ONLY_BUTTONS_TEXT\",\n\"type\": \"hint\",\n\"showLength\": 100\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"ONLY_BUTTONS_TEXT\",\n\"span\": 24\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7 [:fontawesome-brands-gith</p>"},{"location":"widget/type/form/form/#standard-actions","title":"Standard Actions","text":"<p><code>Actions</code> show available actions as separate buttons see more Actions.</p> <p>Standard Actions:</p> <ul> <li><code>Create</code>: Action to initialize the process of creating a new record </li> <li><code>Delete</code>: Remove an existing record</li> <li><code>Edit</code>: Users to update or correct information</li> <li><code>Save</code>: Action to store the data entered or modified </li> <li><code>Cancel-create</code>: Action to abort the creation of a new record, discarding any input without saving</li> </ul>"},{"location":"widget/type/form/form/#create","title":"Create","text":"<p><code>Create</code> button enables you to create a new value by clicking the <code>Add</code> button.  </p> <p>Tips</p> <p>We advise against creating entries in the form widget.</p> <p>There are two methods to create a record:</p> <ol> <li> <p>Basic: You can add data using a standard button create without leaving your current view.</p> </li> <li> <p>With view: You can create a record by navigating to a view.</p> </li> </ol>"},{"location":"widget/type/form/form/#basic","title":"Basic","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#how-does-it-look_5","title":"How does it look?","text":""},{"location":"widget/type/form/form/#how-to-add_6","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\").available(bc -&gt; true))\n.save(sv -&gt; sv.text(\"Save\").available(bc -&gt; true))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt)\n.build();\n}\n</code></pre> Step2 Add button <code>create</code> to corresponding .widget.json.  <pre><code>{\n\"name\": \"MyExampleForm\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"save\",\n\"create\",\n\"delete\",\n\"cancel-create\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Step3 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#with-view","title":"With view","text":"<p> Live Sample \u00b7  GitHub</p> <p>With <code>Create with view</code>, clicking the \"Add\" button opens a separate view that displays only the data entry form. After completing the form and saving, the system returns to the form of entities with the new row added.</p>"},{"location":"widget/type/form/form/#how-does-it-look_6","title":"How does it look?","text":""},{"location":"widget/type/form/form/#how-to-add_7","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.action(act -&gt; act\n.action(\"cancel\", \"Cancel\")\n.invoker((bc, dto) -&gt; {\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform\"\n));\n})\n.withoutAutoSaveBefore()\n)\n.action(act -&gt; act\n.action(\"finish\", \"Save and Close\")\n.invoker((bc, data) -&gt; {\nMyEntity myEntity = repository.getReferenceById(bc.getIdAsLong());\nrepository.save(myEntity);\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform\"\n));\n}\n))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre> Step2 Add PostAction.drillDown to method doCreateEntity to corresponding VersionAwareResponseService.  <pre><code>    @Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntity entity, BusinessComponent bc) {\nrepository.save(entity);\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity))\n.setAction(PostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleformcreate/\"\n+ CxboxMyExampleController.myexample + \"/\"\n+ entity.getId()));\n}\n</code></pre> Step4 Add button <code>create</code> to corresponding .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"delete\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#delete","title":"Delete","text":"<p><code>Delete</code> remove an existing record. </p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#how-does-it-look_7","title":"How does it look?","text":""},{"location":"widget/type/form/form/#how-to-add_8","title":"How to add?","text":"Example <p>Step1 Add action delete to corresponding VersionAwareResponseService. </p> <p>By default, the access button is available when a record exist.</p> <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre> <p>Step2 Add button ot group button to corresponding .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form widget. Delete.\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"save\",\n\"create\",\n\"delete\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>For to implement a custom handler for deleting an entity, you must override <code>deleteEntity</code> method to corresponding VersionAwareResponseService.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>Edit</code> enables you to change the field value.</p>"},{"location":"widget/type/form/form/#edit","title":"Edit","text":"<p>There are two methods to edit a record:</p> <ol> <li> <p>Basic: You can edit data in your current widget.</p> </li> <li> <p>With view: You can edit a record by navigating to a view.</p> </li> </ol>"},{"location":"widget/type/form/form/#base-edit","title":"Base edit","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Edit Inline</code> implies inline-edit. Click twice on the value you want to change.</p>"},{"location":"widget/type/form/form/#how-does-it-look_8","title":"How does it look?","text":""},{"location":"widget/type/form/form/#how-to-add_9","title":"How to add?","text":"Example <p>Step1 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#with-view_1","title":"With view","text":"<p> Live Sample \u00b7  GitHub</p> <p>With <code>Edit with view</code>, you can edit the entity from a separate view that displays only the data entry form. Click on the \"Edit\" option.</p>"},{"location":"widget/type/form/form/#how-does-it-look_9","title":"How does it look?","text":""},{"location":"widget/type/form/form/#how-to-add_10","title":"How to add?","text":"Example <p>Step1 Add action edit to corresponding VersionAwareResponseService. </p> <p>Add PostAction.drillDown to method edit</p> <p><pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.save(sv -&gt; sv.text(\"Save\"))\n.action(act -&gt; act\n.action(\"cancel\", \"Cancel\")\n.invoker((bc, dto) -&gt; {\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform\"\n));\n})\n.withoutAutoSaveBefore()\n)\n.action(act -&gt; act\n.scope(ActionScope.RECORD)\n.withAutoSaveBefore()\n.action(\"edit\", \"Edit\")\n.invoker((bc, data) -&gt; new ActionResultDTO&lt;MyExampleDTO&gt;()\n.setAction(PostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleformedit/\"\n+ CxboxMyExampleController.myexample + \"/\"\n+ bc.getId()\n))))\n.action(act -&gt; act\n.action(\"finish\", \"Save and Close\")\n.invoker((bc, data) -&gt; {\nMyEntity myEntity = repository.getReferenceById(bc.getIdAsLong());\nrepository.save(myEntity);\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform\"\n));\n}\n))\n.build();\n}\n</code></pre> Step2 Add button ot group button to corresponding .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"edit\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#save","title":"Save","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Save</code> to store the data entered or modified. see information on autosave</p>"},{"location":"widget/type/form/form/#how-does-it-look_10","title":"How does it look?","text":""},{"location":"widget/type/form/form/#how-to-add_11","title":"How to add?","text":"Example <p>Step1 Add action save to corresponding VersionAwareResponseService. </p> <p><pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.save(sv -&gt; sv.text(\"Save\"))\n.build();\n}\n</code></pre> Step2 Add button ot group button to corresponding .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"Form widget.Save\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"save\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/form/form/#cancel-create","title":"Cancel-create","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Cancel-create</code> abort the creation of a new record, discarding any input without saving</p>"},{"location":"widget/type/form/form/#how-does-it-look_11","title":"How does it look?","text":""},{"location":"widget/type/form/form/#how-to-add_12","title":"How to add?","text":"Example BasicWith postActionMethod onCancel <p>Step1 Add standart action cancelCreate to corresponding VersionAwareResponseService.  The interface displays \"cancelCreate\" as the default option.</p> <p><pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.build();\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p>Step1 Add action cancel to corresponding VersionAwareResponseService with postAction. </p> <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.action(act -&gt; act\n.action(\"cancel\", \"Cancel\")\n.invoker((bc, dto) -&gt; {\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample\"\n));\n})\n.withoutAutoSaveBefore()\n)\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.action(act -&gt; act\n.action(\"finish\", \"Save and Close\")\n.invoker((bc, data) -&gt; {\nMyEntity myEntity = repository.getReferenceById(bc.getIdAsLong());\nrepository.save(myEntity);\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform\"\n));\n}\n))\n.build();\n}\n</code></pre> <p>Step2 Add button ot group button to corresponding .widget.json.</p> <p><pre><code>{\n\"name\": \"MyExampleFormCreate\",\n\"title\": \"Form\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n},\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"finish\",\n\"cancel\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p>Info</p> <p>Only for Inner Business Component see more Business Component</p> <p>Step1 Add standart action cancelCreate to corresponding VersionAwareResponseService. </p> <p><pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.action(act -&gt; act\n.action(\"finish\", \"Save and Close\")\n.invoker((bc, data) -&gt; {\nMyEntity myEntity = repository.getReferenceById(bc.getIdAsLong());\nrepository.save(myEntity);\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform\"\n));\n}\n))\n.build();\n}\n</code></pre> Step2 Add method onCancel to corresponding VersionAwareResponseService.  <pre><code>  @Override\npublic ActionResultDTO onCancel(BusinessComponent bc) {\nreturn new ActionResultDTO&lt;&gt;().setAction(PostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/\"\n));\n}\n</code></pre> Step3 Add button ot group button to corresponding .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleFormCreate\",\n\"title\": \"Form Create\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"finish\",\n\"cancel-create\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/formpopup/formpopup/","title":"FormPopup","text":"<p><code>FormPopup</code> widget is a component for additional field checks in popup and the ability to add information inside the popup.</p>"},{"location":"widget/type/formpopup/formpopup/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/formpopup/formpopup/#how-does-it-look","title":"How does it look?","text":""},{"location":"widget/type/formpopup/formpopup/#how-to-add","title":"How to add?","text":"Example since 4.0.0-M16-SNAPSHOTbefore 4.0.0-M16-SNAPSHOT <p>Add type \"FormPopup\" to BaseFieldExtractor. <pre><code>@Override\npublic List&lt;String&gt; getSupportedTypes() {\nreturn Lists.newArrayList(\n\"Funnel\",\n\"RingProgress\",\n\"DashboardList\",\n\"FormPopup\"\n);\n}\n</code></pre></p> <p>Add file \"ActionsExt\". <pre><code>@UtilityClass\npublic class ActionsExt {\npublic static PreAction confirmWithCustomWidget(@Nullable String message, @Nullable String widget, @Nullable String yesButton, @Nullable String noButton) {\nMap&lt;String, String&gt; customParameters = new HashMap&lt;&gt;();\ncustomParameters.put(\"subtype\", \"confirmWithCustomWidget\");\nif (widget != null) {\ncustomParameters.put(\"widget\", widget);\n}\nif (yesButton != null) {\ncustomParameters.put(\"yesText\", yesButton);\n}\nif (noButton != null) {\ncustomParameters.put(\"noText\", noButton);\n}\nreturn PreAction.custom(message, customParameters);\n}\n}\n</code></pre></p> <p>Step1 Add a button \"save-send\" that raises the widget Popup <pre><code>{\n\"name\": \"MyExampleFormButton\",\n\"title\": \"\",\n\"type\": \"Form\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field Required\",\n\"key\": \"customFieldRequired\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldRequired\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n},\n\"actionGroups\": {\n\"include\": [\n\"save-send\"\n]\n}\n}\n}\n</code></pre> Step2 Add widget with type FormPopup <pre><code>{\n\"name\": \"MyExampleFormpopup\",\n\"title\": \"Form widget\",\n\"type\": \"FormPopup\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field Required\",\n\"key\": \"customFieldRequired\",\n\"type\": \"input\"\n},\n{\n\"label\": \"\u0421ustom Field\",\n\"key\": \"customField\",\n\"type\": \"hint\"\n},\n{\n\"label\": \"\u0421ustom Field FA\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field InlinePicklist\",\n\"key\": \"customFieldInlinePicklist\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityInlinePicklistPick\",\n\"pickMap\": {\n\"customFieldInlinePicklist\": \"customField\",\n\"customFieldInlinePicklistId\": \"id\"\n}\n},\n{\n\"label\": \"Custom Field InlinePicklist FA\",\n\"key\": \"customFieldInlinePicklistFA\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityInlinePicklistFAPick\",\n\"pickMap\": {\n\"customFieldInlinePicklistFA\": \"customField\",\n\"customFieldInlinePicklistFAId\": \"id\"\n}\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldRequired\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldInlinePicklist\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldInlinePicklistFA\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Step3 Add widget FormPopup on view <pre><code>{\n\"name\": \"myexampleformpopup\",\n\"title\": \"My Example Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleformpopup\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityInlinePicklistFAPickPickListPopup\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myEntityInlinePicklistPickPickListPopup\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleFormPopupInfoText\",\n\"position\": 20,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleFormpopup\",\n\"position\": 40,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleFormButton\",\n\"position\": 50,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> Step4 Add withPreAction with action confirmWithWidget</p> <p>Params: </p> <p><code>PreAction.confirmWithWidget(\"myWidget\", cf -&gt; cf .title(\"Approve?\") //or withoutTitle() .yesText(\"Yes\") .noText(\"Cancel\"))</code></p> <p>myWidget \u2013 widget name of any *FormPopup.widget.json</p> <pre><code>@SuppressWarnings(\"java:S\")\n@RequiredArgsConstructor\n@Service\npublic class MyExampleService extends VersionAwareResponseService&lt;MyExampleDTO, MyEntity&gt; {\nprivate final MyEntityRepository repository;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleMeta&gt; meta = MyExampleMeta.class;\n@Autowired\nprivate EntityManager entityManager;\n@Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntity entity, BusinessComponent bc) {\nrepository.save(entity);\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyEntity entity, MyExampleDTO data, BusinessComponent bc) {\nif (data.isFieldChanged(MyExampleDTO_.customFieldInlinePicklistFAId)) {\nentity.setCustomFieldInlinePicklistFAEntity(data.getCustomFieldInlinePicklistFAId() != null\n? entityManager.getReference(MyEntityInlinePicklistFA.class, data.getCustomFieldInlinePicklistFAId())\n: null);\n}\nsetIfChanged(data, MyExampleDTO_.customFieldRequired, entity::setCustomFieldRequired);\nsetIfChanged(data, MyExampleDTO_.customFieldRequired, entity::setCustomFieldRequired);\nif (data.isFieldChanged(MyExampleDTO_.customFieldInlinePicklistId)) {\nentity.setCustomFieldInlinePicklistEntity(data.getCustomFieldInlinePicklistId() != null\n? entityManager.getReference(MyEntityInlinePicklist.class, data.getCustomFieldInlinePicklistId())\n: null);\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nif (data.isFieldChanged(MyExampleDTO_.customField)) {\nentity.setCustomField(data.getCustomField());\n}\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.action(act -&gt; act\n.action(\"save-send\", \"Save and send on approval\")\n.withPreAction(PreAction.confirmWithWidget(\"MyExampleFormpopup\", cfw -&gt; cfw))\n)\n.create(crt -&gt; crt.text(\"Create\"))\n.build();\n}\n}\n</code></pre>"},{"location":"widget/type/formpopup/formpopup/#title","title":"Title","text":""},{"location":"widget/type/formpopup/formpopup/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color is a fixed color that doesn't change. It remains the same regardless of any factors in the application.</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Calculated color can be used to change a title color dynamically. It changes depending on business logic or data in the application.</p> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/formpopup/formpopup/#how-does-it-look_1","title":"How does it look?","text":""},{"location":"widget/type/formpopup/formpopup/#how-to-add_1","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>    public MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldTextColor = \"#aeda\";\nthis.customFieldText = entity.getCustomFieldText();\nthis.customField = entity.getCustomField();\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExampleFormPopup\",\n\"title\": \"customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"FormPopup\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n},\n{\n\"label\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExampleFormPopupColorConst\",\n\"title\": \"customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"FormPopup\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"label\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColor\": \"#aeda\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"widget/type/formpopup/formpopup/#show-condition","title":"Show condition","text":"<p>not applicable</p>"},{"location":"widget/type/formpopup/formpopup/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this form belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/formpopup/formpopup/#fields","title":"Fields","text":"<p>Fields Configuration. The fields array defines the individual fields present within the form.</p> <pre><code>{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n</code></pre> <ul> <li>\"label\"</li> </ul> <p>Description:  Field Title.</p> <p>Type: String(optional).</p> <ul> <li>\"key\"</li> </ul> <p>Description: Name field to corresponding DataResponseDTO.</p> <p>Type: String(required).</p> <ul> <li>\"type\"</li> </ul> <p>Description: Field types</p> <p>Type: String(required).</p>"},{"location":"widget/type/formpopup/formpopup/#how-to-add_2","title":"How to add?","text":"Example With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing form widget</p> <pre><code>![addfield.gif](addfield.gif)\n</code></pre> <p>Add field to .widget.json.</p> <pre><code>   {\n\"name\": \"MyExampleFormpopup\",\n\"title\": \"Form widget\",\n\"type\": \"FormPopup\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field Required\",\n\"key\": \"customFieldRequired\",\n\"type\": \"input\"\n},\n{\n\"label\": \"\u0421ustom Field\",\n\"key\": \"customField\",\n\"type\": \"hint\"\n},\n{\n\"label\": \"\u0421ustom Field FA\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field InlinePicklist\",\n\"key\": \"customFieldInlinePicklist\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityInlinePicklistPick\",\n\"pickMap\": {\n\"customFieldInlinePicklist\": \"customField\",\n\"customFieldInlinePicklistId\": \"id\"\n}\n},\n{\n\"label\": \"Custom Field InlinePicklist FA\",\n\"key\": \"customFieldInlinePicklistFA\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityInlinePicklistFAPick\",\n\"pickMap\": {\n\"customFieldInlinePicklistFA\": \"customField\",\n\"customFieldInlinePicklistFAId\": \"id\"\n}\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldRequired\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldInlinePicklist\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldInlinePicklistFA\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"widget/type/formpopup/formpopup/#options-layout","title":"Options layout","text":"<p>not applicable</p>"},{"location":"widget/type/formpopup/formpopup/#actions","title":"Actions","text":"<p><code>Actions</code> show available actions as separate buttons see Actions</p>"},{"location":"widget/type/formpopup/formpopup/#additional-properties","title":"Additional properties","text":""},{"location":"widget/type/formpopup/formpopup/#widget-size","title":"Widget size","text":"<p> Live Sample \u00b7  GitHub</p> <p>Widget size features:</p> <ul> <li> <p>The parameter determines the width of the pop-up based on the visible area (viewport) rather than the full screen width.</p> <ul> <li> <p>If the view includes additional widgets, the area allocated to these widgets is set to 24.</p> </li> <li> <p>If the view lacks additional widgets, the area without them is also set to 24.</p> </li> </ul> </li> <li> <p>The pop-up's width cannot extend across the entire screen.</p> </li> <li> <p>The pop-up is always centered on the screen.</p> </li> </ul>"},{"location":"widget/type/formpopup/formpopup/#how-does-it-look_2","title":"How does it look?","text":"view gridWidth 6 - recommendedview gridWidth 12view gridWidth 24"},{"location":"widget/type/formpopup/formpopup/#how-to-add_3","title":"How to add?","text":"Example gridWidth24 - recommendedgridWidth12gridWidth6 <p>Change gridWidth = 24  to corresponding view <pre><code>{\n\"name\": \"myexampleform\",\n\"title\": \"MyExample Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleFormpopup\",\n\"position\": 7,\n\"gridWidth\": 24\n},{\n\"widgetName\": \"MyExampleFormpopup\",\n\"position\": 8,\n\"gridWidth\": 12\n},{\n\"widgetName\": \"MyExampleFormpopup\",\n\"position\": 9,\n\"gridWidth\": 6\n},\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Change gridWidth = 12  to corresponding view <pre><code>{\n\"name\": \"myexampleform\",\n\"title\": \"MyExample Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleFormpopup\",\n\"position\": 7,\n\"gridWidth\": 24\n},{\n\"widgetName\": \"MyExampleFormpopup\",\n\"position\": 8,\n\"gridWidth\": 12\n},{\n\"widgetName\": \"MyExampleFormpopup\",\n\"position\": 9,\n\"gridWidth\": 6\n},\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Change gridWidth = 6  to corresponding view <pre><code>{\n\"name\": \"myexampleform\",\n\"title\": \"MyExample Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleform\",\n\"widgets\": [\n{\n\"widgetName\": \"MyExampleFormpopup\",\n\"position\": 7,\n\"gridWidth\": 24\n},{\n\"widgetName\": \"MyExampleFormpopup\",\n\"position\": 8,\n\"gridWidth\": 12\n},{\n\"widgetName\": \"MyExampleFormpopup\",\n\"position\": 9,\n\"gridWidth\": 6\n},\n{\n\"widgetName\": \"MyExampleForm\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/","title":"GroupingHierarchy","text":"<p><code>GroupingHierarchy</code>  widget presents shared information across multiple records, enabling rows to be grouped by one or more specified fields.</p> <p>The availability of this function depends on the type:</p> <p>This function is available for: MultivalueHover, Hint, Multivalue, MultipleSelect, Inline, PickList, Radio, Money, Number, Dictionary, DateTimeWithSeconds, Date, Checkbox, DateTime, Text, FileUpload.</p> <p>See more field types</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Grouping Hierarchy</code> mode features :</p> <ul> <li> <p>All data should be sourced from the backend (e.g., with a backend page size set to 1000),      grouping is handled in-memory on the front end.</p> <p>If the backend indicates that the total line count exceeds the page size, the widget will switch to List mode, and the mode-switching icon will be highlighted in red.  Hovering over the icon will display the message <code>Warning!Rows were fetched from backend - limit for Grouping Hierarhical mode is ...(1000). Only GroupingHierarchy mode is available.</code> see more Default limit page</p> </li> <li> <p>The number of nesting levels is unlimited.</p> </li> <li> <p>Fields containing either a single element or no elements are displayed in their expanded form by default.The line is expanded by default if the expanded branch occupies the same amount of space as it does when collapsed.</p> </li> <li> <p>This widget is essentially a List widget with an added \"grouping\" feature, allowing users to toggle between a standard table view and a \"grouping hierarchy\" view.</p> </li> </ul>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look","title":"How does it look?","text":"BasicGroupinghierarhy to List"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add","title":"How to add?","text":"Example <p>Step1 Create file .widget.json with type = \"GroupingHierarchy\"</p> <p>Add parameter groupingHierarchy with field for grouping. Fields keys from Fields widget block separated with comma. Field order is not important and will be taken from Fields block.</p> <pre><code> \"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n</code></pre> <p>Add existing field to a GroupingHierarchy widget. see more Fields <pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy (GH) widget basic\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre></p> <p>Step2 Add widget to corresponding *.view.json* .</p> <pre><code>{\n\"name\": \"myexamplegh\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplegh\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 19,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleGH\",\n\"position\": 20,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleGHTwoColumn\",\n\"position\": 29,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <p>Step3 Add bc to BC_PROPERTIES.csv. see more Default limit page</p> <pre><code>ID;BC;PAGE_LIMIT;SORT;FILTER\n1;'myexample';1000;NULL;'\"\"'\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#title","title":"Title","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#title-basic","title":"Title Basic","text":"<p><code>Title</code> for widget (optional)</p> <p>There are types of:</p> <ul> <li><code>constant title</code>: shows constant text.</li> <li><code>constant title empty</code>: if you want to visually connect widgets by  them to be placed one under another</li> </ul>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_1","title":"How does it look?","text":"Constant titleConstant title empty"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_1","title":"How to add?","text":"Example Constant titleConstant title empty <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy const title\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p>Step1 Delete parameter title to .widget.json. <pre><code>{\n\"name\": \"MyExampleEmptyTitle\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field widget: Empty Title\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Dictionary widget: Empty Title\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color is a fixed color that doesn't change. It remains the same regardless of any factors in the application.</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Calculated color can be used to change a title color dynamically. It changes depending on business logic or data in the application.</p> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\nprivate String customFieldColor;\nprivate String customFieldDictionaryColor;\nprivate String customField;\n@SearchParameter(name = \"customFieldDictionary\", provider = EnumValueProvider.class)\nprivate CustomFieldDictionaryEnum customFieldDictionary;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldDictionary = entity.getCustomFieldDictionary();\nthis.customFieldDictionaryColor = entity.getCustomFieldDictionary() == CustomFieldDictionaryEnum.HIGH ? \"#ec\" :\n(entity.getCustomFieldDictionary() == CustomFieldDictionaryEnum.LOW ? \"#5af\" :\n(entity.getCustomFieldDictionary() == CustomFieldDictionaryEnum.MIDDLE ? \"#cba\" : \"\")\n);\nthis.customFieldColor = entity.getCustomFieldDictionary() == CustomFieldDictionaryEnum.HIGH ? \"#edaa\" :\n(entity.getCustomFieldDictionary() == CustomFieldDictionaryEnum.LOW ? \"#beda\" :\n(entity.getCustomFieldDictionary() == CustomFieldDictionaryEnum.MIDDLE ? \"#ffeb\" : \"\")\n);\n}\n}\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"GroupingHierarchy (GH) widget color: ${customField}, customFieldDictionary: ${customFieldDictionary}\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\",\n\"bgColorKey\": \"customFieldDictionaryColor\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExampleColorConstList\",\n\"title\": \"GroupingHierarchy (GH) widget color const customField: ${customField}, customFieldDictionary: ${customFieldDictionary}\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\",\n\"bgColor\": \"#4480cb\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this form belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#show-condition","title":"Show condition","text":"<p> Live Sample \u00b7  GitHub</p> <ul> <li><code>no show condition - recommended</code>: widget always visible</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>show condition by current entity</code>: condition can include boolean expression depending on current entity fields. Field updates will trigger condition recalculation only on save or if field is force active</li> </ul> <p>Tips</p> <p>It is recommended not to use <code>Show condition</code> when possible, because wide usage of this feature makes application hard to support.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_3","title":"How does it look?","text":"no show conditionshow condition by current entity"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_3","title":"How to add?","text":"Example no show conditionshow condition by current entity <p>see Basic</p> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Add showCondition to .widget.json. see more showCondition <pre><code>{\n\"name\": \"MyExampleshowcond\",\n\"title\": \"Show condition widget\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"showCondition\": {\n\"bcName\": \"myexample\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCond\",\n\"value\": \"true\"\n}\n},\n\"fields\": [\n{\n\"label\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"Custom Field, bc - myExampleBc\",\n\"key\": \"customField\",\n\"type\": \"number\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#fields","title":"Fields","text":"<p>Fields Configuration. The fields array defines the individual fields present within the form.</p> <pre><code>{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n</code></pre> <ul> <li>\"label\"</li> </ul> <p>Description:  Field Title.</p> <p>Type: String(optional).</p> <ul> <li> <p>\"key\"</p> <p>Description: Name field to corresponding DataResponseDTO.</p> <p>Type: String(required).</p> </li> <li> <p>\"type\"</p> </li> </ul> <p>Description: Field types</p> <p>Type: String(required).</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_4","title":"How to add?","text":"Example With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing form widget     </p> <p>Add field to .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy (GH) widget basic\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#options-layout","title":"Options layout","text":"<p>options.layout - no use in this type.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#actions","title":"Actions","text":"<p><code>Actions</code> show available actions as separate buttons see more Actions.</p> <p>As for GroupingHierarchy widget, there are several actions. </p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#create","title":"Create","text":"<p><code>Create</code> button enables you to create a new value by clicking the <code>Add</code> button. This action can be performed in three different ways, feel free to choose any, depending on your logic of application:   </p> <p>There are three methods to create a record:</p> <ol> <li>Inline: You can add a line directly.</li> </ol> <p>Info</p> <p>Pagination won't function until the page is refreshed after adding records.</p> <ol> <li> <p>Inline-form: You can add data using a form widget without leaving your current view.</p> </li> <li> <p>With view: You can create a record by navigating to a view.</p> </li> </ol>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#inline","title":"Inline","text":"<p> Live Sample \u00b7  GitHub</p> <p>With <code>Line Addition</code>, a new empty row is immediately added to the top of the GroupingHierarchy widget when the \"Add\" button is clicked. This is a quick way to add rows without needing to input data beforehand.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_4","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_5","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre> Step2 Add button <code>create</code> to corresponding .widget.json.  <pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy (GH) widget action create basic\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> Step3 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldText);\nfields.setEnabled(MyExampleDTO_.customFieldDictionary);\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#inline-form","title":"Inline-form","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Create with widget</code> opens an additional widget when the \"Add\" button is clicked. The form will appear on the same screen, allowing you to view both the GroupingHierarchy of entities and the form for adding a new row.  After filling the information in and clicking \"Save\", the new row is added to the GroupingHierarchy. </p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_5","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_6","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldText);\nfields.setEnabled(MyExampleDTO_.customFieldDictionary);\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>Step3 Create widget.json with type <code>Form</code> that appears when you click a button <pre><code>{\n\"title\": \"\",\n\"name\": \"myEntityCreateForm\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldDictionary\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n},\n\"actionGroups\": {\n\"include\": [\n\"save\",\n\"cancel-create\"\n]\n}\n}\n}\n</code></pre></p> <p>Step4 Add widget.json with type <code>Form</code> to corresponding .view.json.  <pre><code>{\n\"name\": \"myexamplegh\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplegh\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityCreateForm\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 10,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleGH\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Step5 Add button <code>create</code> and widget with type <code>Form</code> to corresponding .widget.json.</p> <p><code>options</code>.<code>create</code>: Name widget that appears when you click a button</p> <pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy \u0441reate with widget\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"create\": {\n\"widget\": \"myEntityCreateForm\"\n},\n\"edit\": {\n\"widget\": \"myEntityCreateForm\"\n},\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"delete\"\n]\n},\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#with-view","title":"With view","text":"<p> Live Sample \u00b7  GitHub</p> <p>With <code>Create with view</code>, clicking the \"Add\" button opens a separate view that displays only the data entry form. After completing the form and saving, the system returns to the GroupingHierarchy of entities with the new row added. </p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_6","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_7","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.action(act -&gt; act\n.action(\"finish\", \"Save and Close\")\n.invoker((bc, dto) -&gt; {\nMyEntity myEntity = repository.getReferenceById(bc.getIdAsLong());\nrepository.save(myEntity);\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexamplegh\"\n));\n})\n)\n.build();\n}\n</code></pre> Step2 Add PostAction.drillDown to method doCreateEntity to corresponding VersionAwareResponseService.  <pre><code>    @Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntity entity, BusinessComponent bc) {\nrepository.save(entity);\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity))\n.setAction(PostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\"\n+ CxboxMyExampleController.myexample + \"/\"\n+ entity.getId()));\n}\n</code></pre> Step4 Add button <code>create</code> to corresponding .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy (GH) widget action create with view\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#edit","title":"Edit","text":"<p><code>Edit</code> enables you to change the field value. Just like with <code>Create</code> button, there are three ways of implementing this Action. </p> <p>There are three methods to create a record:</p> <ol> <li> <p>Inline edit: You can edit a line directly.</p> </li> <li> <p>Inline-form: You can edit data using a form widget without leaving your current view.</p> </li> <li> <p>With view: You can edit a record by navigating to a view.</p> </li> </ol>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#inline-edit","title":"Inline edit","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Edit Inline</code> implies inline-edit. Click twice on the value you want to change.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_7","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_8","title":"How to add?","text":"Example <p>Step1 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldDictionary);\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#inline-form_1","title":"Inline-form","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Edit with widget</code> opens an additional widget when clicking on the Edit option from a three-dot menu. </p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_8","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_9","title":"How to add?","text":"Example <p>Step1 Add button <code>edit</code> to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre></p> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldDictionary);\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>Step2  Create widget.json with type <code>Form</code> that appears when you click a button <pre><code>{\n\"title\": \"\",\n\"name\": \"myEntityEditForm\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldDictionary\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n},\n\"actionGroups\": {\n\"include\": [\n\"save\",\n\"cancel-create\"\n]\n}\n}\n}\n</code></pre></p> <p>Step4 Add widget.json with type <code>Form</code> to corresponding .view.json.  <pre><code>{\n\"name\": \"myexamplegh\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplegh\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityEditForm\",\n\"position\": 9,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 10,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleGH\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Step5 Add button <code>edit</code> and widget with type <code>Form</code> to corresponding .widget.json.</p> <p><code>options</code>.<code>edit</code>: Name widget that appears when you click a button</p> <pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"create\": {\n\"widget\": \"myEntityEditForm\"\n},\n\"edit\": {\n\"widget\": \"myEntityEditForm\"\n},\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"delete\"\n]\n},\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#with-view_1","title":"With view","text":"<p> Live Sample \u00b7  GitHub</p> <p>With <code>Edit with view</code>, you can edit the entity from a separate view that displays only the data entry form. Click on the \"Edit\" option in the three-dot menu.  </p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_9","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_10","title":"How to add?","text":"Example <p>Step1 Add action edit to corresponding VersionAwareResponseService. </p> <p>Add PostAction.drillDown to method edit</p> <p><pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.action(act -&gt; act\n.action(\"finish\", \"Save and Close\")\n.invoker((bc, dto) -&gt; {\nMyEntity myEntity = repository.getReferenceById(bc.getIdAsLong());\nrepository.save(myEntity);\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexamplegh\"\n));\n})\n)\n.build();\n}\n</code></pre> Step2 Add button ot group button to corresponding .widget.json.</p> <p><pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"create\": {\n\"widget\": \"myEntityEditForm\"\n},\n\"edit\": {\n\"widget\": \"myEntityEditForm\"\n},\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"delete\"\n]\n},\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#additional-properties","title":"Additional properties","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#customization-of-displayed-columns","title":"Customization of displayed columns","text":"<p> Live Sample \u00b7  GitHub</p> <p>To customize the columns displayed on a list widget, you can perform two main actions:</p> <ul> <li>Hide columns</li> <li>Swap columns</li> </ul> <p>Info</p> <p>Currently, table customization data is stored within internal tables, even when microservices are used.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#basic","title":"Basic","text":"<p>When customizing columns, records are inserted into the ADDITIONAL_FIELDS table. Table ADDITIONAL_FIELDS for store user-specific settings:</p> <ul> <li><code>user_id</code>:  The user ID for which the columns are being customized.</li> <li><code>view</code>: The name of the view where the columns are customized.</li> <li><code>widget</code>: The name of the widget where the columns are customized.</li> <li><code>order_fields</code>: When configuring swap columns, the field sequence will be updated, and a new comma-separated sequence of fields will be saved.</li> <li><code>added_to_additional_fields</code>: User-hidden fields.</li> <li><code>removed_from_additional_fields</code></li> </ul> <p>Info</p> <p>The columns used for grouping cannot be hidden or rearranged. They are always displayed at the start of the widget, following the order defined in the main Fields section. This restriction also applies when switching to \"Table\" mode, ensuring the grouping columns remain prominently displayed.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_10","title":"How does it look?","text":"Hide columnsSwap columnsPre-hidden"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_11","title":"How to add?","text":"Example Hide and Swap columnsPre-hidden columns <p>Add in options parameter additional to corresponding .widget.json.</p> <pre><code>\"additional\": {\n  \"enabled\": true\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"additional\": {\n\"enabled\": true\n},\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>\u0421an also set columns to be pre-hidden, meaning they will be hidden when the widget opens.</p> <p>Add in options parameter additional to corresponding .widget.json.</p> <p>Add in options parameter fields with list of hidden fields  to corresponding .widget.json.</p> <pre><code>   \"additional\": {\n      \"fields\": [\"customFieldPercent\", \"customFieldRadio\"],\n      \"enabled\": true\n    }\n</code></pre> <pre><code>{\n\"name\": \"MyExampleGHHiddenFields\",\n\"title\": \"GroupingHierarchy widget customization columns hidden fields\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"Custom Field Input\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Percent\",\n\"key\": \"customFieldPercent\",\n\"type\": \"percent\"\n},\n{\n\"title\": \"Custom Field Radio\",\n\"key\": \"customFieldRadio\",\n\"type\": \"radio\"\n}\n],\n\"options\": {\n\"additional\": {\n\"fields\": [\n\"customFieldPercent\",\n\"customFieldRadio\"\n],\n\"enabled\": true\n},\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#handling-old-records","title":"Handling Old Records","text":"<p><code>Delete fields with widget</code></p> <p>When fields stored in the additional settings table are deleted from the widget, the functionality will continue to work correctly by ignoring these old fields.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#fulltextsearch","title":"FullTextSearch","text":"<p><code>FullTextSearch</code> - when the user types in the full text search input area, then widget filters the rows that match the search query. see FullTextSearch</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#pagination","title":"Pagination","text":"<p>Pagination in the \"Grouping Hierarchy\" mode is not functioning. It only works when switched to \"Table\" mode.</p> <p>see Pagination</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#sorting","title":"Sorting","text":"<p>All queries always start with sorting by grouping columns, followed by user-specified sorting</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_11","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#collapse-all-button","title":"Collapse all button","text":"<p>Added a button with the ability to collapse all</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_12","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_12","title":"How to add?","text":"<p>By default</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#counter","title":"Counter","text":"<p><code>Counter</code> tracks the number of nested elements at each level of a tree.</p> <p>It operates in three modes:</p> <ul> <li>none (default): The counter is not displayed.</li> <li>collapsed: The counter appears only for grouping fields in their collapsed state. It disappears when the grouping field is expanded.</li> <li>always: The counter is shown regardless of the grouping field's state, both when collapsed and expanded.</li> </ul>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_13","title":"How does it look?","text":"alwayscollapsednone"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_13","title":"How to add?","text":"Example alwayscollapsednone <p>Add in groupingHierarchy counterMode to corresponding .widget.json.</p> <pre><code>\"groupingHierarchy\": {\n  \"counterMode\": \"always\",\n  \"fields\": [\n\n  ]\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleGHAlways\",\n\"title\": \"GroupingHierarchy (GH) widget counter always\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"counterMode\": \"always\",\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Add in groupingHierarchy counterMode to corresponding .widget.json.</p> <pre><code>\"groupingHierarchy\": {\n  \"counterMode\": \"collapsed\",\n  \"fields\": [\n\n  ]\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleGHCollapsed\",\n\"title\": \"GroupingHierarchy (GH) widget counter collapsed\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"counterMode\": \"collapsed\",\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>On default or add in groupingHierarchy counterMode to corresponding .widget.json.</p> <pre><code>\"groupingHierarchy\": {\n  \"counterMode\": \"none\",\n  \"fields\": [\n\n  ]\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy (GH) widget counter none\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"counterMode\": \"none\",\n\"fields\": [\n\"customFieldDictionary\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#quick-transition-to-unallocated-rows","title":"Quick Transition to \"Unallocated Rows\"","text":"<p>After mass loading, grouping columns are populated by editing individual rows.  Once a row is updated, the user is automatically \"transferred\" to the same row within the hierarchy.</p> <p>To enable quick navigation back to unallocated records, a \"floating\" icon is displayed above the table on the right.  Clicking this icon takes the user directly to the unallocated rows. If no unallocated rows are present, the icon remains hidden.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_14","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_14","title":"How to add?","text":"<p>By default</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#default-groupinghierarchy","title":"Default GroupingHierarchy","text":"<p>This function can be used to display the grouping structure in advance, even when no data is available. The number of nesting levels is unlimited.</p> <p><code>Level 1</code>  Live Sample \u00b7  GitHub</p> <p><code>Level 2</code>  Live Sample \u00b7  GitHub</p> <p><code>Level 3</code>  Live Sample \u00b7  GitHub</p> <p><code>Level 4</code>  Live Sample \u00b7  GitHub</p> <p><code>Level 5</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_15","title":"How does it look?","text":"Level 1Level 2Level 3Level 4Level 5"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_15","title":"How to add?","text":"Example Level 1,2,3,4Level &gt;=5 <p><code>Step 1</code> Add  groupingHierarchy to corresponding .widget.json.</p> <p><pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy level four\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Level 1\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Level 2\",\n\"key\": \"customFieldDictionaryLevelTwo\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Level 3\",\n\"key\": \"customFieldDictionaryLevelThree\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Level 4\",\n\"key\": \"customFieldDictionaryLevelFour\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\",\n\"customFieldDictionaryLevelTwo\",\n\"customFieldDictionaryLevelThree\",\n\"customFieldDictionaryLevelFour\"\n]\n}\n}\n}\n</code></pre> <code>Step 2</code> Add  defaultGroupingHierarchy to corresponding <code>buildIndependentMeta</code> FieldMetaBuilder.</p> <p>defaultGroupingHierarchy()</p> <p><pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nfields.setEnumFilterValues(\nfields,\nMyExampleDTO_.customFieldDictionaryLevelFour,\nCustomFieldDictionaryLevelFourEnum.values()\n);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryLevelFour);\nfields.setEnumFilterValues(\nfields,\nMyExampleDTO_.customFieldDictionaryLevelThree,\nCustomFieldDictionaryLevelThreeEnum.values()\n);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryLevelThree);\nfields.setEnumFilterValues(\nfields,\nMyExampleDTO_.customFieldDictionaryLevelTwo,\nCustomFieldDictionaryLevelTwoEnum.values()\n);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryLevelTwo);\nfields.setEnumFilterValues(fields, MyExampleDTO_.customFieldDictionary, CustomFieldDictionaryEnum.values());\nfields.enableFilter(MyExampleDTO_.customFieldDictionary);\nfields.defaultGroupingHierarchy(\nMyExampleDTO_.customFieldDictionary,\nMyExampleDTO_.customFieldDictionaryLevelTwo,\nMyExampleDTO_.customFieldDictionaryLevelThree,\nMyExampleDTO_.customFieldDictionaryLevelFour,\nlvl -&gt; lvl\n.add(\nCustomFieldDictionaryEnum.LEVEL_1_HIGH,\nlvl -&gt; lvl\n.add(\nCustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE,\nlvl -&gt; lvl\n.add(\nCustomFieldDictionaryLevelThreeEnum.LEVEL_3_MIDDLE,\nlvl -&gt; lvl.add(CustomFieldDictionaryLevelFourEnum.LEVEL_4_HIGH)\n)\n)\n)\n.add(\nCustomFieldDictionaryEnum.LEVEL_1_MIDDLE,\nlvl -&gt; lvl\n.add(\nCustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE,\nlvl -&gt; lvl\n.add(CustomFieldDictionaryLevelThreeEnum.LEVEL_3_MIDDLE)\n)\n)\n);\n}\n</code></pre> <code>Level 1</code>  Live Sample \u00b7  GitHub</p> <p><code>Level 2</code>  Live Sample \u00b7  GitHub</p> <p><code>Level 3</code>  Live Sample \u00b7  GitHub</p> <p><code>Level 4</code>  Live Sample \u00b7  GitHub</p> <p><code>Step 1</code> Add  groupingHierarchy to corresponding .widget.json.</p> <p><pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy level five\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Level 1\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Level 2\",\n\"key\": \"customFieldDictionaryLevelTwo\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Level 3\",\n\"key\": \"customFieldDictionaryLevelThree\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Level 4\",\n\"key\": \"customFieldDictionaryLevelFour\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Level 5\",\n\"key\": \"customFieldDictionaryLevelFive\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\",\n\"customFieldDictionaryLevelTwo\",\n\"customFieldDictionaryLevelThree\",\n\"customFieldDictionaryLevelFour\",\n\"customFieldDictionaryLevelFive\"\n]\n}\n}\n}\n</code></pre> <code>Step 2</code> Add  defaultGroupingHierarchy to corresponding <code>buildIndependentMeta</code> FieldMetaBuilder.</p> <p>defaultGroupingHierarchy()</p> <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong parentId) {\nfields.setEnumFilterValues(\nfields,\nMyExampleDTO_.customFieldDictionaryLevelFive,\nCustomFieldDictionaryLevelFiveEnum.values()\n);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryLevelFive);\nfields.setEnumFilterValues(\nfields,\nMyExampleDTO_.customFieldDictionaryLevelFour,\nCustomFieldDictionaryLevelFourEnum.values()\n);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryLevelFour);\nfields.setEnumFilterValues(\nfields,\nMyExampleDTO_.customFieldDictionaryLevelThree,\nCustomFieldDictionaryLevelThreeEnum.values()\n);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryLevelThree);\nfields.setEnumFilterValues(\nfields,\nMyExampleDTO_.customFieldDictionaryLevelTwo,\nCustomFieldDictionaryLevelTwoEnum.values()\n);\nfields.enableFilter(MyExampleDTO_.customFieldDictionaryLevelTwo);\nfields.setEnumFilterValues(fields, MyExampleDTO_.customFieldDictionary, CustomFieldDictionaryEnum.values());\nfields.enableFilter(MyExampleDTO_.customFieldDictionary);\nfields.enableSort(MyExampleDTO_.customFieldDictionaryLevelTwo);\nfields.defaultGroupingHierarchy(\nList.of(\nMyExampleDTO_.customFieldDictionary,\nMyExampleDTO_.customFieldDictionaryLevelTwo,\nMyExampleDTO_.customFieldDictionaryLevelThree,\nMyExampleDTO_.customFieldDictionaryLevelFour,\nMyExampleDTO_.customFieldDictionaryLevelFive\n),\nnew Hierarchy&lt;Object, Hierarchy&lt;Object, Hierarchy&lt;Object, Hierarchy&lt;Object, Hierarchy&lt;Object, ?&gt;&gt;&gt;&gt;&gt;()\n.add(\nCustomFieldDictionaryEnum.LEVEL_1_HIGH,\nlvl -&gt; lvl.add(\nCustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE,\nlvl -&gt; lvl.add(\nCustomFieldDictionaryLevelThreeEnum.LEVEL_3_MIDDLE,\nlvl -&gt; lvl.add(\nCustomFieldDictionaryLevelFourEnum.LEVEL_4_MIDDLE,\nlvl -&gt; lvl.add(\nCustomFieldDictionaryLevelFiveEnum.LEVEL_5_HIGH)))\n)\n)\n.add(\nCustomFieldDictionaryEnum.LEVEL_1_MIDDLE,\nlvl -&gt; lvl.add(\nCustomFieldDictionaryLevelTwoEnum.LEVEL_2_MIDDLE,\nlvl -&gt; lvl.add(CustomFieldDictionaryLevelThreeEnum.LEVEL_3_MIDDLE)\n)\n)\n);\n}\n</code></pre> <p><code>Level 5</code>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#default-groupinghierarchy-default-expanded","title":"Default GroupingHierarchy. Default Expanded","text":"<p> Live Sample \u00b7  GitHub</p> <p>only Default GroupingHierarchy</p> <p>The defaultExpanded parameter determines whether a group in the hierarchy is expanded or collapsed by default.</p> <ul> <li>true:   The group is expanded by default, regardless of the number of elements nested in it. All levels are fully visible immediately.</li> <li>false:   Collapsed when the group contains more than one element.</li> <li>null or missing:   Default (same as false)</li> </ul>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_16","title":"How does it look?","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_16","title":"How to add?","text":"Example <p>Add in groupingHierarchy addWithCfg to corresponding FieldMetaBuilder.</p> <p>Add defaultExpanded to corresponding addWithCfg.</p> <pre><code>.addWithCfg(\n            CustomFieldDictionaryEnum.LEVEL_1_HIGH,\n            cfg -&gt; cfg.defaultExpanded(true),\n</code></pre> <pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy default GH\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Level 1\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Level 2\",\n\"key\": \"customFieldDictionaryLevelTwo\",\n\"type\": \"dictionary\"\n},\n{\n\"label\": \"Level 3\",\n\"key\": \"customFieldDictionaryLevelThree\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\",\n\"customFieldDictionaryLevelTwo\",\n\"customFieldDictionaryLevelThree\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#group-display-mode","title":"Group Display Mode","text":"<p>The <code>groupMode</code> setting (<code>\"aggregate\"</code> / <code>\"compact\"</code>) is not explicitly defined in the metadata. If either the <code>aggFields</code> or <code>aggLevels</code> parameter is specified, the value of <code>groupMode</code> is automatically set to <code>\"aggregate\"</code>.</p> <p>By default, the value of <code>groupMode</code> is <code>\"compact\"</code>.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_17","title":"How does it look?","text":"<code>groupMode: compact</code> (default mode)<code>groupMode: aggregate</code>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#compact","title":"compact","text":"<p>By default, the <code>compact</code> mode is used. If the <code>groupMode</code> parameter is not specified, this mode is applied automatically.</p> <p>In this mode, the contents of a group (e.g., rows within a \u201cfolder\u201d) are displayed on the same row as the group header.</p> <p>This layout provides a clean and compact visual structure.</p> <p><code>Inline Editing</code></p> <p>Inline editing of rows is supported.</p> <p>When enabled, clicking on a row will activate edit mode for the entire row, including group header rows.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#aggregate","title":"aggregate","text":"<p>This mode is used when aggregated values (e.g., sum, max, min) need to be displayed at the group level.</p> <p>Compact display is not possible in this mode because the group header row is used to show aggregate values.</p> <ul> <li>The aggregate row is shown directly at the grouping field level, regardless of whether the group is expanded or collapsed.</li> <li>If a group does not contain any data rows, no aggregate values are displayed.</li> <li>The contents of the group start from the next row</li> <li>A grand total row for the entire table is displayed at the very bottom.</li> </ul> <p><code>Inline Editing</code></p> <p>Inline editing is not available  for group headers in <code>aggregate</code> mode.</p> <p>This is because those rows are dedicated to displaying aggregate information.</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#data-aggregation","title":"Data Aggregation","text":"<p>You can enable aggregation mode to calculate summary values for groups and for the entire table.</p> <p>Supports 4 standard functions:</p> <p> Live Sample \u00b7  GitHub</p> <p><code>sum</code> \u2014 calculates the total sum of the values in the column.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>min</code> \u2014 finds the minimum value in the column.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>max</code> \u2014 finds the maximum value in the column.</p> <p> Live Sample \u00b7  GitHub</p> <p><code>avg</code> \u2014 calculates the average value of the column.</p> <p>UI behavior</p> <p>The table has some special display behavior. See Group Mode = aggregate for details.</p> <p>Appearance customization You can adjust the color and transparency of aggregate rows in the settings.</p> <pre><code>..\\src\\components\\widgets\\Table\\groupingHierarchy\\constants\\index.ts\n</code></pre> <p>Info</p> <p>All fields used for aggregation must be present in the interface. They can be either visible or hidden.</p> <p>Attention</p> <p>Field cannot be both a grouping field and an aggregated field</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-does-it-look_18","title":"How does it look?","text":"summinmaxavg"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#how-to-add_17","title":"How to add?","text":"Example <p>aggFields (array of objects)</p> <p>Description: Defines which columns will be aggregated and how their values will be calculated.</p> <p>Each aggFields object contains:</p> <ul> <li> <p>fieldKey \u2014 the column whose values will be aggregated.</p> </li> <li> <p>func \u2014 the aggregation function. Supported values:</p> <p>sum \u2014 calculates the total sum,</p> <p>min \u2014 the minimum value,</p> <p>max \u2014 the maximum value,</p> <p>avg \u2014 the average value.</p> </li> <li> <p>description (optional) \u2014 a text description of the aggregation, displayed in the UI.</p> </li> </ul> <pre><code>\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n],\n\"aggFields\": [ // array of aggFields objects\n{\n\"fieldKey\": \"customField\", //  the column whose values will be aggregated and displayed above it.\n\"func\": \"sum\", // aggregation function: sum/min/max/avg\n\"description\": \"My sum\" // OPTIONAL. Description for UI\n}\n]\n}\n}\n</code></pre> summinmaxavg <pre><code>{\n\"name\": \"MyExampleSumGH\",\n\"title\": \"GroupingHierarchy (GH) widget aggregate `sum`, Sum above the same column\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Type of property\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"Insurance amount\",\n\"key\": \"customFieldNumber\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Description\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n],\n\"aggFields\": [\n{\n\"fieldKey\": \"customFieldNumber\",\n\"func\": \"sum\"\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <pre><code>{\n\"name\": \"MyExampleMinGH\",\n\"title\": \"GroupingHierarchy (GH) widget aggregate `min`\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Type of property\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"Insurance amount\",\n\"key\": \"customFieldNumber\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Description\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n],\n\"aggFields\": [\n{\n\"fieldKey\": \"customFieldNumber\",\n\"func\": \"min\"\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p><pre><code>{\n\"name\": \"MyExampleMaxGH\",\n\"title\": \"GroupingHierarchy (GH) widget aggregate `max`\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Type of property\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"Insurance amount\",\n\"key\": \"customFieldNumber\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Description\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n],\n\"aggFields\": [\n{\n\"fieldKey\": \"customFieldNumber\",\n\"func\": \"max\"\n}\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <pre><code>{\n\"name\": \"MyExampleAvgGH\",\n\"title\": \"GroupingHierarchy (GH) widget aggregate `avg`\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Type of property\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"Insurance amount\",\n\"key\": \"customFieldNumber\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Description\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n],\n\"aggFields\": [\n{\n\"fieldKey\": \"customFieldNumber\",\n\"func\": \"avg\"\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#options","title":"Options","text":""},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#aggregated-values-in-different-columns","title":"Aggregated values in different columns","text":"<p>Options for displaying aggregated values:</p> <p> Live Sample \u00b7  GitHub</p> <ul> <li>Above the same column \u2014 show the aggregated value directly above the column that is being aggregated.</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li>Above another column \u2014 show the aggregated value above a different column of your choice.</li> </ul> <p>\ud83d\udca1 You can also display aggregations for multiple fields either above the same column or above another column.</p> <p>How does it look?</p> Above the same columnAbove another column <p></p> <p></p> <p>You can also define custom aggregation functions (see Custom).</p> <p>How to add?</p> Example Above the same columnAbove another column and aggregations for multiple fields <p>aggFields (array of objects)</p> <p>Description: Defines which columns will be aggregated and how their values will be calculated.</p> <p>Each aggFields object contains:</p> <ul> <li> <p>fieldKey \u2014 the column whose values will be aggregated.</p> </li> <li> <p>func \u2014 the aggregation function. Supported values:</p> <p>sum \u2014 calculates the total sum,</p> <p>min \u2014 the minimum value,</p> <p>max \u2014 the maximum value,</p> <p>avg \u2014 the average value.</p> </li> </ul> <pre><code>\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n],\n\"aggFields\": [ // array of aggFields objects\n{\n\"fieldKey\": \"customField\", //  the column whose values will be aggregated and displayed above it.\n\"func\": \"sum\" // aggregation function: sum/min/max/avg\n}\n]\n}\n}\n</code></pre> <p>Added <code>aggFields</code> to corresponding widget.json.</p> <pre><code>{\n\"name\": \"MyExampleSumGH\",\n\"title\": \"GroupingHierarchy (GH) widget aggregate `sum`, Sum above the same column\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Type of property\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"Insurance amount\",\n\"key\": \"customFieldNumber\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Description\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n],\n\"aggFields\": [\n{\n\"fieldKey\": \"customFieldNumber\",\n\"func\": \"sum\"\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>aggFields (array of objects)</p> <p>Description: Defines which columns will be aggregated and how their values will be calculated.</p> <p>Each aggFields object contains:</p> <ul> <li> <p>fieldKey \u2014 the column whose values will be aggregated.</p> </li> <li> <p>func \u2014 the aggregation function. Supported values:</p> <p>sum \u2014 calculates the total sum,</p> <p>min \u2014 the minimum value,</p> <p>max \u2014 the maximum value,</p> <p>avg \u2014 the average value.</p> </li> <li> <p>argFieldKeys (optional) \u2014 list of column names whose values will be aggregated.You can also aggregate multiple fields at once by listing them here.</p> </li> <li> <p>description (optional) \u2014 a text description of the aggregation, displayed in the UI.</p> </li> </ul> <pre><code>\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n],\n\"aggFields\": [ // array of aggFields objects\n{\n\"fieldKey\": \"customField\", // the column above which the aggregated value will be displayed.\n\"func\": \"sum\", // aggregation function: sum/min/max/avg\n\"argFieldKeys\": [\"customFieldNumber\"], // OPTIONAL. If you need to display an aggregated value not above the column being aggregated,or if you need to aggregate multiple fields at once, list the column names separated by commas.\n\"description\": \"Sum field customFieldNumber\" // OPTIONAL. Description for UI\n}\n]\n}\n}\n</code></pre> <p>Added <code>aggFields</code> to corresponding widget.json.</p> <p><pre><code>{\n\"name\": \"MyExampleSumGHForOptionalParameter\",\n\"title\": \"GroupingHierarchy (GH) widget aggregate `sum`. Sum above the other column\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Type of property\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"Insurance amount\",\n\"key\": \"customFieldNumber\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Description\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"customFieldDictionary\"\n],\n\"aggFields\": [\n{\n\"fieldKey\": \"customField\",\n\"func\": \"sum\",\n\"argFieldKeys\": [\"customFieldNumber\"],\n\"description\": \"Sum field customFieldNumber\"\n}\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#aggregated-total","title":"Aggregated Total","text":"<p> Live Sample \u00b7  GitHub</p> <p>You can enable or hide the grand total row (aggregation).</p> <p>By default, if aggregation is enabled, the Total row is displayed automatically.</p> <p>Grand Total Row Rule</p> <p>If the table contains no data rows, the grand total row is not displayed. As soon as at least one data row appears, the grand total row becomes visible.</p> <p>How does it look?</p> Without totalWith total <p></p> <p></p> <p>How to add?</p> Example <p>To remove the Total row, use the aggLevels parameter.</p> <p>It defines which fields are aggregated at each grouping level using the aggFields tag.</p> <ul> <li>The level number is specified with the level parameter.</li> <li>Levels are numbered starting from 1 and match the order of fields in groupingHierarchy.fields.</li> <li>If you set level = 0, aggregated values will be shown in a separate Total row.</li> <li> <p>If level 0 is not defined, the Total row will not appear.</p> <pre><code> \"options\": {\n    \"groupingHierarchy\": {\n      \"fields\": [\n        \"location\",\n        \"object\"\n      ],\n      \"aggLevels\": [\n        {\n          \"level\": 1,\n          \"aggFields\": [\n            {\n              \"fieldKey\": \"insuranceValue\",\n              \"func\": \"sum\",\n              \"argFieldKeys\": [\n                \"annualPremium\"\n              ],\n              \"description\": \"sum fields `Annual Premium`\"\n            }\n          ]\n        },\n        {\n          \"level\": 2,\n          \"aggFields\": [\n            {\n              \"fieldKey\": \"insuranceAmount\",\n              \"func\": \"sum\",\n              \"argFieldKeys\": [\n                \"insuranceAmount\"\n              ]\n            }\n          ]\n        }\n      ]\n    }\n</code></pre> <pre><code>{\n\"name\": \"MyExampleAggLevelsWithoutCountGH\",\n\"title\": \"GroupingHierarchy (GH) widget aggregate level\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Location\",\n\"key\": \"location\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Object\",\n\"key\": \"object\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Insurance value\",\n\"key\": \"insuranceValue\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Insured amount\",\n\"key\": \"insuranceAmount\",\n\"digits\": 2,\n\"type\": \"number\"\n},\n{\n\"title\": \"Net annual rate\",\n\"key\": \"netAnnualRate\",\n\"digits\": 2,\n\"type\": \"number\"\n},\n{\n\"title\": \"Acquisition\",\n\"key\": \"acquisition\",\n\"digits\": 2,\n\"type\": \"number\"\n},\n{\n\"title\": \"Gross annual rate\",\n\"key\": \"grossAnnualRate\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Annual premium\",\n\"key\": \"annualPremium\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Underinsurance percentage\",\n\"key\": \"underinsurancePercentage\",\n\"type\": \"number\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"location\",\n\"object\"\n],\n\"aggLevels\": [\n{\n\"level\": 1,\n\"aggFields\": [\n{\n\"fieldKey\": \"insuranceValue\",\n\"func\": \"sum\",\n\"argFieldKeys\": [\n\"annualPremium\"\n],\n\"description\": \"sum fields `Annual Premium`\"\n}\n]\n},\n{\n\"level\": 2,\n\"aggFields\": [\n{\n\"fieldKey\": \"insuranceAmount\",\n\"func\": \"sum\",\n\"argFieldKeys\": [\n\"insuranceAmount\"\n]\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> </li> </ul>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#aggregated-values-in-different-levels","title":"Aggregated values in different levels","text":"<p> Live Sample \u00b7  GitHub</p> <p>Apply different aggregation standard functions at grouping levels and total level.</p> <p>How does it look?</p> <p></p> <p>How to add?</p> Example <p>The aggLevels parameter defines which fields are aggregated at each grouping level using the aggFields tag.</p> <p>level \u2014 specifies the level number.</p> <p>Levels are numbered starting from 1 and correspond to the order of fields in groupingHierarchy.fields.</p> <p>You can specify the level where aggregation is required, and the aggregated data will be displayed at that level.</p> <ul> <li>aggFields (array of objects)</li> </ul> <p>Description: Defines which columns will be aggregated and how their values will be calculated.</p> <p>Each aggFields object contains:</p> <ul> <li> <p>fieldKey \u2014 the column whose values will be aggregated.</p> </li> <li> <p>func \u2014 the aggregation function. Supported values:</p> <p>sum \u2014 calculates the total sum,</p> <p>min \u2014 the minimum value,</p> <p>max \u2014 the maximum value,</p> <p>avg \u2014 the average value.</p> </li> <li> <p>argFieldKeys (optional) \u2014 list of column names whose values will be aggregated.You can also aggregate multiple fields at once by listing them here.</p> </li> <li> <p>description (optional) \u2014 a text description of the aggregation, displayed in the UI. </p> <pre><code> \"options\": {\n    \"groupingHierarchy\": {\n      \"fields\": [\n        \"location\",\n        \"object\"\n      ],\n      \"aggLevels\": [\n        {\n          \"level\": 0,\n          \"aggFields\": [\n            {\n              \"fieldKey\": \"insuranceValue\",\n              \"func\": \"sum\",\n              \"argFieldKeys\": [\n                \"insuranceValue\"\n              ],\n              \"description\": \"sum fields `Insured amount`\"\n            }\n          ]\n        },\n        {\n          \"level\": 1,\n          \"aggFields\": [\n            {\n              \"fieldKey\": \"insuranceValue\", // the column above which the aggregated value will be displayed.\n              \"func\": \"sum\",  // aggregation function: sum/min/max/avg\n              \"argFieldKeys\": [ // OPTIONAL. If you need to display an aggregated value not above the column being aggregated,or if you need to aggregate multiple fields at once, list the column names separated by commas.\n                \"annualPremium\"\n              ],\n              \"description\": \"sum fields `Annual Premium`\" // OPTIONAL. Description for UI\n            }\n          ]\n        },\n        {\n          \"level\": 2,\n          \"aggFields\": [\n            {\n              \"fieldKey\": \"insuranceAmount\",\n              \"func\": \"sum\",\n              \"argFieldKeys\": [\n                \"insuranceAmount\"\n              ]\n            }\n          ]\n        }\n      ]\n    }\n</code></pre> <pre><code>{\n\"name\": \"MyExampleAggLevelsGH\",\n\"title\": \"GroupingHierarchy (GH) widget aggregate level\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Location\",\n\"key\": \"location\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Object\",\n\"key\": \"object\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Insurance value\",\n\"key\": \"insuranceValue\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Insured amount\",\n\"key\": \"insuranceAmount\",\n\"digits\": 2,\n\"type\": \"number\"\n},\n{\n\"title\": \"Net annual rate\",\n\"key\": \"netAnnualRate\",\n\"digits\": 2,\n\"type\": \"number\"\n},\n{\n\"title\": \"Acquisition\",\n\"key\": \"acquisition\",\n\"digits\": 2,\n\"type\": \"number\"\n},\n{\n\"title\": \"Gross annual rate\",\n\"key\": \"grossAnnualRate\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Annual premium\",\n\"key\": \"annualPremium\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Underinsurance percentage\",\n\"key\": \"underinsurancePercentage\",\n\"type\": \"number\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"location\",\n\"object\"\n],\n\"aggLevels\": [\n{\n\"level\": 0,\n\"aggFields\": [\n{\n\"fieldKey\": \"insuranceValue\",\n\"func\": \"sum\",\n\"argFieldKeys\": [\n\"insuranceValue\"\n],\n\"description\": \"sum fields `Insured amount`\"\n}\n]\n},\n{\n\"level\": 1,\n\"aggFields\": [\n{\n\"fieldKey\": \"insuranceValue\",\n\"func\": \"sum\",\n\"argFieldKeys\": [\n\"annualPremium\"\n],\n\"description\": \"sum fields `Annual Premium`\"\n}\n]\n},\n{\n\"level\": 2,\n\"aggFields\": [\n{\n\"fieldKey\": \"insuranceAmount\",\n\"func\": \"sum\",\n\"argFieldKeys\": [\n\"insuranceAmount\"\n]\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> </li> </ul>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#custom-functions","title":"Custom functions","text":"<p> Live Sample \u00b7  GitHub</p> <p>Custom functions \u2014 define your own aggregation rules when standard ones are not enough.</p> <p>How does it look?</p> <p></p> <p>How to add?</p> Example <p>The aggLevels parameter defines which fields are aggregated at each grouping level using the aggFields tag.</p> <p>level \u2014 specifies the level number.</p> <p>Levels are numbered starting from 1 and correspond to the order of fields in groupingHierarchy.fields.</p> <p>You can specify the level where aggregation is required, and the aggregated data will be displayed at that level.</p> <ul> <li>aggFields (array of objects)</li> </ul> <p>Description: Defines which columns will be aggregated and how their values will be calculated.</p> <p>Each aggFields object contains:</p> <ul> <li> <p>fieldKey \u2014 the column whose values will be aggregated.</p> </li> <li> <p>func \u2014 min</p> </li> <li> <p>argFieldKeys (optional) \u2014 list of column names whose values will be aggregated.You can also aggregate multiple fields at once by listing them here.</p> </li> <li> <p>description (optional) \u2014 a text description of the aggregation, displayed in the UI. </p> <pre><code> \"options\": {\n    \"groupingHierarchy\": {\n      \"fields\": [\n        \"location\",\n        \"object\"\n      ],\n      \"aggLevels\": [\n        {\n          \"level\": 0,\n          \"aggFields\": [\n            {\n              \"fieldKey\": \"insuranceValue\",\n              \"func\": \"sum\",\n              \"argFieldKeys\": [\n                \"insuranceValue\"\n              ],\n              \"description\": \"sum fields `Insured amount`\"\n            }\n          ]\n        },\n        {\n          \"level\": 1,\n          \"aggFields\": [\n            {\n              \"fieldKey\": \"insuranceValue\", // the column above which the aggregated value will be displayed.\n              \"func\": \"sum\",  // aggregation function: sum/min/max/avg\n              \"argFieldKeys\": [ // OPTIONAL. If you need to display an aggregated value not above the column being aggregated,or if you need to aggregate multiple fields at once, list the column names separated by commas.\n                \"annualPremium\"\n              ],\n              \"description\": \"sum fields `Annual Premium`\" // OPTIONAL. Description for UI\n            }\n          ]\n        },\n        {\n          \"level\": 2,\n          \"aggFields\": [\n            {\n              \"fieldKey\": \"insuranceAmount\",\n              \"func\": \"sum\",\n              \"argFieldKeys\": [\n                \"insuranceAmount\"\n              ]\n            }\n          ]\n        }\n      ]\n    }\n</code></pre> <p><pre><code>{\n\"name\": \"MyExampleGH\",\n\"title\": \"GroupingHierarchy (GH) widget custom functional\",\n\"type\": \"GroupingHierarchy\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Location\",\n\"key\": \"location\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Object\",\n\"key\": \"object\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Insurance value\",\n\"key\": \"insuranceValue\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Insured amount\",\n\"key\": \"insuranceAmount\",\n\"digits\": 2,\n\"type\": \"number\"\n},\n{\n\"title\": \"Percent Insurance Amount\",\n\"key\": \"percentInsuranceAmount\",\n\"digits\": 2,\n\"type\": \"hidden\"\n}\n],\n\"options\": {\n\"groupingHierarchy\": {\n\"fields\": [\n\"object\"\n],\n\"aggLevels\": [\n{\n\"level\": 0,\n\"aggFields\": [\n{\n\"fieldKey\": \"insuranceAmount\",\n\"func\": \"sum\"\n}\n]\n},\n{\n\"level\": 1,\n\"aggFields\": [\n{\n\"fieldKey\": \"insuranceAmount\",\n\"func\": \"min\",\n\"argFieldKeys\": [\n\"percentInsuranceAmount\"\n],\n\"description\": \"%\"\n}\n]\n}\n]\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> </li> </ul>"},{"location":"widget/type/groupinghierarchy/groupinghierarchy/#multi-upload-files","title":"Multi-upload files","text":"<p>We have implemented multi-file upload. You can use a dedicated drag-and-drop zone or a standard button to select your files.</p> <p>see more Multi-upload files</p>"},{"location":"widget/type/headerwidget/headerwidget/","title":"HeaderWidget","text":"<p><code>HeaderWidget</code> widget is a component for displaying a header.</p> <ul> <li>does not support control elements (e.g., action buttons or menus).</li> <li>used to highlight or emphasize a specific context on the current screen.</li> </ul>"},{"location":"widget/type/headerwidget/headerwidget/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/headerwidget/headerwidget/#how-does-it-look","title":"How does it look?","text":"Header widgetHeader widget with other widget"},{"location":"widget/type/headerwidget/headerwidget/#how-to-add","title":"How to add?","text":"Example <p>Step1 Create file .widget.json. with  type = \"HeaderWidget\"</p> <pre><code>   {\n\"name\": \"myExampleHeaderWidget\",\n\"title\": \"Header Widget\",\n\"type\": \"HeaderWidget\",\n\"bc\": \"myexample\",\n\"fields\": []\n}\n</code></pre> <p>Step2 Add widget to corresponding *.view.json* .</p> <pre><code>    {\n\"name\": \"myexample\",\n\"title\": \"MyExample Form\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexample\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 1,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myExampleHeaderWidget\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myExampleForm\",\n\"position\": 3,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/headerwidget/headerwidget/#title","title":"Title","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/headerwidget/headerwidget/#title-basic","title":"Title Basic","text":"<p><code>Title</code> for widget.</p> <p>There are types of:</p> <ul> <li><code>constant title</code>: shows constant text. </li> <li><code>calculated title</code>: shows value provided in hidden text field, e.g. it can be calculated based on business logic of application</li> </ul>"},{"location":"widget/type/headerwidget/headerwidget/#how-does-it-look_1","title":"How does it look?","text":"Constant titleCalculated title"},{"location":"widget/type/headerwidget/headerwidget/#how-to-add_1","title":"How to add?","text":"Example Constant titleCalculated title <p>Step1 Add name for title to .widget.json.  <pre><code>{\n\"name\": \"myExampleconst\",\n\"title\": \"Header Widget Custom Title\",\n\"type\": \"HeaderWidget\",\n\"bc\": \"myexample\",\n\"fields\": [\n]\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p> Step1 Add ${customField} for title to .widget.json. Add <code>customField</code> with type <code>hidden</code>  to corresponding *.widget.json* . </p> <p>Info</p> <p>To ensure a field value is received by the frontend and displayed in the header, it must be specified within the <code>fields</code> array.</p> <p><pre><code>{\n\"name\": \"myExample\",\n\"title\": \"Header Widget Custom Title - value field 'Custom Field' : ${customField}\",\n\"type\": \"HeaderWidget\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"hidden\"\n}\n]\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/headerwidget/headerwidget/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>Constant color*</code> is a fixed color that doesn't change. It remains the same regardless of any factors in the application.</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>Calculated color</code> can be used to change a title color dynamically. It changes depending on business logic or data in the application.</li> </ul> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/headerwidget/headerwidget/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"widget/type/headerwidget/headerwidget/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>    private String customFieldColor;\nprivate String customFieldTextColor;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldText = entity.getCustomFieldText();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldTextColor = \"#aeda\";\n}\n</code></pre></p> <p>Step 2 Dynamic data output in the header only works if these fields are displayed on or passedas the Field hidden type from other  widget List widget, Form widget,Info widget with the bgColorKey property.</p> <p>Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json .(List widget, Form widget,Info widget)</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n</code></pre> <pre><code>{\n\"name\": \"myExampleForm\",\n\"title\": \"Form\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"save\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]}}\n}\n</code></pre> <p>Step 3 Add in <code>title</code> field with <code>${customField} . Add field to the</code>fields` array.</p> <pre><code>{\n\"name\": \"myExampleHeaderWidget\",\n\"title\": \"Header Widget customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"HeaderWidget\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customFieldColor\",\n\"type\": \"hidden\"\n},\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"hidden\",\n\"bgColorKey\": \"customFieldColor\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"hidden\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <p>Info</p> <p>To ensure a field value is received by the frontend and displayed in the header, it must be specified within the <code>fields</code> array.</p> <pre><code>{\n\"name\": \"myExampleHeaderWidgetConstColor\",\n\"title\": \"Header Widget customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"HeaderWidget\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"hidden\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"hidden\",\n\"bgColor\": \"#aeda\"\n}\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/headerwidget/headerwidget/#show-condition","title":"Show condition","text":"<p>see more showCondition</p> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>no show condition - recommended</code>: widget always visible</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>show condition by current entity</code>: condition can include boolean expression depending on current entity fields. Field updates will trigger condition recalculation only on save or if field is force active</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li><code>show condition by parent entity</code>: condition can include boolean expression depending on parent entity. Parent field updates will trigger condition recalculation only on save or if field is force active shown on same view</li> </ul> <p>Tips</p> <p>It is recommended not to use <code>Show condition</code> when possible, because wide usage of this feature makes application hard to support.</p>"},{"location":"widget/type/headerwidget/headerwidget/#how-does-it-look_3","title":"How does it look?","text":"no show conditionshow condition by current entityshow condition by parent entity"},{"location":"widget/type/headerwidget/headerwidget/#how-to-add_3","title":"How to add?","text":"Example no show conditionshow condition by current entityshow condition by parent entity <p>see Basic  Live Sample \u00b7  GitHub</p> <p>Step1 Add showCondition to .widget.json. see more showCondition <pre><code>{\n\"name\": \"myExample\",\n\"title\": \"Header Widget\",\n\"type\": \"HeaderWidget\",\n\"bc\": \"myexample\",\n\"showCondition\": {\n\"bcName\": \"myexample\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCondition\",\n\"value\": true\n}\n},\n\"fields\": [\n]\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Add showCondition to .widget.json. see more showCondition <pre><code>{\n\"name\": \"myExample\",\n\"title\": \"Header Widget\",\n\"type\": \"HeaderWidget\",\n\"bc\": \"myexample\",\n\"showCondition\": {\n\"bcName\": \"myexample\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCondition\",\n\"value\": true\n}\n},\n\"fields\": [\n]\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/headerwidget/headerwidget/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this headerwidget belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/headerwidget/headerwidget/#fields","title":"Fields","text":"<p>This array is usually empty.</p> <p>However, if you need to use field values for displaying data (for example, to dynamically generate a header based on a field value see Title Color ), you should add the required field with the Field hidden type \u2014 this way the frontend will be able to retrieve its value.</p> <pre><code>{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"hidden\"\n}\n</code></pre> <ul> <li>\"label\"</li> </ul> <p>Description:  Field Title.</p> <p>Type: String(optional).</p> <ul> <li>\"key\"</li> </ul> <p>Description: Name field to corresponding DataResponseDTO.</p> <p>Type: String(required).</p> <ul> <li>\"type\"</li> </ul> <p>Description: Field hidden</p> <p>Type: hidden.</p>"},{"location":"widget/type/headerwidget/headerwidget/#how-to-add_4","title":"How to add?","text":"Example With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing headerwidget widget     </p> <p>Add field to .widget.json.</p> <pre><code>\"name\": \"myexampleHeader\",\n\"title\": \"Header Widget\",\n\"type\": \"HeaderWidget\",\n\"bc\": \"myexample\",\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"hidden\"\n}\n</code></pre> <p>see more  Fields</p>"},{"location":"widget/type/headerwidget/headerwidget/#options","title":"Options","text":"<p>This widget type does not support options</p>"},{"location":"widget/type/headerwidget/headerwidget/#standard-actions","title":"Standard Actions","text":"<p>This widget type does not support buttons</p>"},{"location":"widget/type/info/info/","title":"Info","text":"<p><code>Info</code> widget is a component only for data viewing.</p>"},{"location":"widget/type/info/info/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/info/info/#how-does-it-look","title":"How does it look?","text":""},{"location":"widget/type/info/info/#how-to-add","title":"How to add?","text":"Example <p>Step1 Create file .widget.json. with type = \"Info\"</p> <p><pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info widget Default\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> Step2 Add widget to corresponding *.view.json* .</p> <pre><code>{\n\"name\": \"myexampleinfo\",\n\"title\": \"MyExample Info\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexampleinfo\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 0,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleInfoTextInfo\",\n\"position\": 2,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleInfoLeft\",\n\"position\": 10,\n\"gridWidth\": 8\n},\n{\n\"widgetName\": \"MyExampleInfoTop\",\n\"position\": 10,\n\"gridWidth\": 8\n},\n{\n\"widgetName\": \"MyExampleInfo\",\n\"position\": 10,\n\"gridWidth\": 8\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/info/info/#title","title":"Title","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/info/info/#title-basic","title":"Title Basic","text":"<p>Title - (optional)</p> <p> </p> <p>There are types of:</p> <ul> <li><code>constant title</code>: shows constant text.</li> <li><code>constant title empty</code>: if you want to visually connect widgets by  them to be placed one under another</li> <li><code>calculated title</code>: shows value provided in hidden text field, e.g. it can be calculated based on business logic of application</li> </ul>"},{"location":"widget/type/info/info/#how-does-it-look_1","title":"How does it look?","text":"Constant titleConstant title emptyCalculated title"},{"location":"widget/type/info/info/#how-to-add_1","title":"How to add?","text":"Example Constant titleConstant title emptyCalculated title <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Delete parameter title to .widget.json. <pre><code>{\n\"name\": \"MyExampleEmptyTitle\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field widget: Empty Title\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 24\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p> Step1 Add ${customField} for title to .widget.json. <pre><code>{\n\"name\": \"MyExampleCustomTitle\",\n\"title\": \"Custom Title - value field 'Custom Field' : ${customField}\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/info/info/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color is a fixed color that doesn't change. It remains the same regardless of any factors in the application.</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Calculated color can be used to change a title color dynamically. It changes depending on business logic or data in the application.</p> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/info/info/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"widget/type/info/info/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>    public MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldTextColor = \"#aeda\";\nthis.customFieldText = entity.getCustomFieldText();\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExample\",\n\"title\": \"customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExampleColorConst\",\n\"title\": \"customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColor\": \"#aeda\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/info/info/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this form belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/info/info/#show-condition","title":"Show condition","text":"<p>The <code>showCondition</code> is used to define the availability or visibility of the widget dynamically. The <code>showCondition</code> in configuration represents the condition under which the widge will be made visible to the user. It controls whether the form appears on the user interface based on the value of a specific field in another or currentbusiness component.</p> <p> Live Sample \u00b7    GitHub</p> <ul> <li><code>no show condition - recommended</code>: widget always visible</li> </ul> <p> Live Sample \u00b7    GitHub</p> <ul> <li><code>show condition by current entity</code>: condition can include boolean expression depending on current entity fields. Field updates will trigger condition recalculation only on save or if field is force active</li> </ul> <p> Live Sample \u00b7    GitHub</p> <ul> <li><code>show condition by parent entity</code>: condition can include boolean expression depending on parent entity. Parent field updates will trigger condition recalculation only on save or if field is force active shown on same view</li> </ul> <p>Tips</p> <p>It is recommended not to use <code>Show condition</code> when possible, because wide usage of this feature makes application hard to support.</p>"},{"location":"widget/type/info/info/#how-does-it-look_3","title":"How does it look?","text":"no show conditionshow condition by current entityshow condition by parent entity"},{"location":"widget/type/info/info/#how-to-add_3","title":"How to add?","text":"Example no show conditionshow condition by current entityshow condition by parent entity <p>see Basic</p> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Add showCondition to .widget.json. see more showCondition <pre><code>{\n\"name\": \"MyExample\",\n\"title\": \"Show condition widget\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"showCondition\": {\n\"bcName\": \"myExampleBc\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCond\",\n\"value\": \"true\"\n}\n},\n\"fields\": [\n{\n\"label\": \"Custom Field, bc - myExampleBc\",\n\"key\": \"customField\",\n\"type\": \"number\"\n},\n{\n\"label\": \"customFieldShowCond, bc - myExampleBc\",\n\"key\": \"customFieldShowCond\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 24\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldShowCond\",\n\"span\": 24\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Add showCondition to .widget.json. see more showCondition <pre><code>{\n\"name\": \"MyExample\",\n\"title\": \"Child Entity\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"showCondition\": {\n\"bcName\": \"myExampleBc\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCondition\",\n\"value\": true\n}\n},\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 24\n}\n]\n}\n]\n}\n}\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/info/info/#fields","title":"Fields","text":"<p>Fields Configuration. The fields array defines the individual fields present within the form.</p> <pre><code>{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n</code></pre> <ul> <li>\"label\"</li> </ul> <p>Description:  Field Title.</p> <p>Type: String(optional).</p> <ul> <li>\"key\"</li> </ul> <p>Description: Name field to corresponding DataResponseDTO.</p> <p>Type: String(required).</p> <ul> <li>\"type\"</li> </ul> <p>Description: Field types</p> <p>Type: String(required).</p>"},{"location":"widget/type/info/info/#how-to-add_4","title":"How to add?","text":"Example With pluginOther <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing form widget     </p> <p>Add field to .widget.json.</p> <pre><code>   {\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info widget Default\",\n\"type\": \"Info\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n},\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p>see more  Fields</p>"},{"location":"widget/type/info/info/#options-layout","title":"Options layout","text":"<p> Live Sample \u00b7  GitHub</p> <ul> <li> <p><code>single column layout - recommended</code>: shows each field on new row. Each field can have width from 1 to 24.</p> <p>Tips</p> <p>Use single column layout when fields are frequently hidden or rearranged. This avoids layout issues and ensures the best user experience.</p> </li> <li> <p><code>multi column layout</code>: shows fields in grid. Grid can contain any number of rows. Each row can contain any number of fields, until sum of fields widths in row is less than 24. Each field can have width from 1 to 24.</p> </li> <li><code>empty</code>: only title and actions are shown. Usually used when standard buttons position needs to be changed (for example we want to show buttons under widget). One can hide buttons on widget with data. Create separate widget only with buttons and place it anywhere on view</li> </ul> <p>Tips</p> <p>It is recommended to use <code>single column</code> layout when possible, because dynamic fields hiding (add link) always works correctly in this case.</p> <p>Info</p> <p>The line has a size of 24 span, if you define fields on one line with a field width sum exceeding 24 span in total,that field and any subsequent fields will be moved to a new line . This means that each line will accommodate fields until the total width reaches 24 span, and any excess width will continue on the next line.</p> <p>For example, you have three fields with widths of 12, 8, and 10 characters, respectively. In this case, the first field and two field will fit completely on the first line as it is within the 24-character limit. However, the thirt field's width contributes to the totat.It has finally become more 24. As a result, the third field will be moved to the next line.</p>"},{"location":"widget/type/info/info/#how-does-it-look_4","title":"How does it look?","text":"Single column layout - recommendedMulti column layoutEmpty only buttons"},{"location":"widget/type/info/info/#how-to-add_5","title":"How to add?","text":"Example Single column layout - recommendedMulti column layoutEmpty only buttons <p>Step1 Create \"options\": {\"layout\": {}}.</p> <p>Step2 Add fields to \"options\": {\"layout\": {}}</p> <p>Forming rows:</p> <ul> <li>Open <code>cols</code> : \"cols\": [</li> <li>Add All fields(customField,customField2,customField3) with span from 1 to 24.</li> <li>Close <code>cols</code> : ]</li> </ul> <pre><code>{\n\"name\": \"MyExampleInfo\",\n\"title\": \"Info title\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Custom Field span 6\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field span 12\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field span 24\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 6\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 24\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Create \"options\": {\"layout\": {}}.</p> <p>Step2 Add fields to \"options\": {\"layout\": {}}.</p> <p>Forming row1 : </p> <ul> <li>Open <code>cols</code> : \"cols\": [ </li> <li>Add all feild : customField,customField2,customField3</li> <li>Check sum span &lt;= 24: customField (span = 12),customField2 = 6, customField3 = 6 : sum 24)</li> <li>Close <code>cols</code> : ]</li> </ul> <p>Forming a row2 : </p> <ul> <li>Open 'cols' : \"cols\": [ </li> <li>Add All filed(customField4)</li> <li>Check sum span &lt;= 24 (customField4 span = 12 : sum 12)</li> <li>Close 'cols' : ]</li> </ul> <pre><code>{\n\"name\": \"MyExampleMultiColumnDefault\",\n\"title\": \"Multi column layout default\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"Field 5 span 12 row\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Field span 12 row\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Field  span 12 row\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Field  span 6 row\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Field  span 6 row\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n},\n{\n\"fieldKey\": \"customField\",\n\"span\": 6\n},\n{\n\"fieldKey\": \"customField\",\n\"span\": 6\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n},\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Create \"options\": {\"layout\": {}}.</p> <p>Button \"Create\" - On default</p> <pre><code>{\n\"name\": \"MyExampleEmptyOnlyButtons\",\n\"title\": \"Empty Only Buttons\",\n\"type\": \"Info\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"label\": \"\",\n\"key\": \"ONLY_BUTTONS_TEXT\",\n\"type\": \"hint\",\n\"showLength\": 100\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"ONLY_BUTTONS_TEXT\",\n\"span\": 24\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/info/info/#actions","title":"Actions","text":"<p>This widget type does not support buttons</p>"},{"location":"widget/type/list/list/","title":"List","text":"<p><code>List</code> widget is list the general information for many records and present it in a way that is easily interpretable for users.</p>"},{"location":"widget/type/list/list/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#how-does-it-look","title":"How does it look?","text":""},{"location":"widget/type/list/list/#how-to-add","title":"How to add?","text":"Example <p>Step1 Create file .widget.json with type = \"List\" Add existing field to a list widget. see more Fields <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n]\n}\n</code></pre></p> <p>Step2 Add widget to corresponding *.view.json* .</p> <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 10,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre>"},{"location":"widget/type/list/list/#title","title":"Title","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#title-basic","title":"Title Basic","text":"<p><code>Title</code> for widget (optional)</p> <p> </p> <p>There are types of:</p> <ul> <li><code>constant title</code>: shows constant text.</li> <li><code>constant title empty</code>: if you want to visually connect widgets by  them to be placed one under another</li> </ul>"},{"location":"widget/type/list/list/#how-does-it-look_1","title":"How does it look?","text":"Constant titleConstant title empty"},{"location":"widget/type/list/list/#how-to-add_1","title":"How to add?","text":"Example Constant titleConstant title empty <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"Constant Title\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n]\n}\n</code></pre>  Live Sample \u00b7  GitHub</p> <p>Step1 Delete parameter title to .widget.json. <pre><code>{\n\"name\": \"MyExampleEmptyTitle\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field widget: Empty Title\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n]\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color is a fixed color that doesn't change. It remains the same regardless of any factors in the application.</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Calculated color can be used to change a title color dynamically. It changes depending on business logic or data in the application.</p> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/list/list/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"widget/type/list/list/#how-to-add_2","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>    public MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldText = entity.getCustomFieldText();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldTextColor = \"#aeda\";\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExample\",\n\"title\": \"customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldColor\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColorKey\": \"customFieldTextColor\"\n}\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"MyExampleColorConst\",\n\"title\": \"customField: ${customField},  customFieldText: ${customFieldText}\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Color\",\n\"key\": \"customField\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"input\",\n\"bgColor\": \"#aeda\"\n}\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this form belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/list/list/#show-condition","title":"Show condition","text":"<p> Live Sample \u00b7  GitHub</p> <ul> <li><code>no show condition - recommended</code>: widget always visible</li> </ul> <p> Live Sample \u00b7    GitHub</p> <ul> <li><code>show condition by current entity</code>: condition can include boolean expression depending on current entity fields. Field updates will trigger condition recalculation only on save or if field is force active</li> </ul> <p>Tips</p> <p>It is recommended not to use <code>Show condition</code> when possible, because wide usage of this feature makes application hard to support.</p>"},{"location":"widget/type/list/list/#how-does-it-look_3","title":"How does it look?","text":"no show conditionshow condition by current entity"},{"location":"widget/type/list/list/#how-to-add_3","title":"How to add?","text":"Example no show conditionshow condition by current entity <p>see Basic</p> <p>Step1 Add showCondition to .widget.json. see more showCondition <pre><code>{\n\"name\": \"MyExample\",\n\"title\": \"Show condition widget\",\n\"type\": \"List\",\n\"bc\": \"myExampleBc\",\n\"showCondition\": {\n\"bcName\": \"myExampleBc\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCond\",\n\"value\": \"true\"\n}\n},\n\"fields\": [\n{\n\"title\": \"Custom Field, bc - myExampleBc\",\n\"key\": \"customField\",\n\"type\": \"number\"\n}\n]\n}\n</code></pre></p>"},{"location":"widget/type/list/list/#fields","title":"Fields","text":"<p>Fields Configuration. The fields array defines the individual fields present within the form.</p> <pre><code>{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n</code></pre> <ul> <li>\"title\"</li> </ul> <p>Description:  Field Title.</p> <p>Type: String(optional).</p> <ul> <li> <p>\"key\"</p> <p>Description: Name field to corresponding DataResponseDTO.</p> <p>Type: String(required).</p> </li> <li> <p>\"type\"</p> </li> </ul> <p>Description: Field types</p> <p>Type: String(required).</p>"},{"location":"widget/type/list/list/#how-to-add_4","title":"How to add?","text":"Example With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing form widget     </p> <p>Add field to .widget.json.</p> <pre><code>   {\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n]\n}\n</code></pre>"},{"location":"widget/type/list/list/#options-layout","title":"Options layout","text":"<p>options.layout - no use in this type.</p>"},{"location":"widget/type/list/list/#actions","title":"Actions","text":"<p><code>Actions</code> show available actions as separate buttons see more Actions.</p> <p>As for List widget, there are several actions. </p>"},{"location":"widget/type/list/list/#create","title":"Create","text":"<p><code>Create</code> button enables you to create a new value by clicking the <code>Add</code> button. This action can be performed in three different ways, feel free to choose any, depending on your logic of application:   </p> <p>There are three methods to create a record:</p> <ul> <li>Inline: You can add a line directly.</li> </ul> <p>Info</p> <p>Pagination won't function until the page is refreshed after adding records.</p> <ul> <li> <p>Inline-form: You can add data using a form widget without leaving your current view.</p> </li> <li> <p>With view: You can create a record by navigating to a view.</p> </li> </ul>"},{"location":"widget/type/list/list/#inline","title":"Inline","text":"<p> Live Sample \u00b7  GitHub</p> <p>With <code>Line Addition</code>, a new empty row is immediately added to the top of the list widget when the \"Add\" button is clicked. This is a quick way to add rows without needing to input data beforehand.</p>"},{"location":"widget/type/list/list/#how-does-it-look_4","title":"How does it look?","text":""},{"location":"widget/type/list/list/#how-to-add_5","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.save(sv -&gt; sv.text(\"Save\"))\n.create(crt -&gt; crt)\n.delete(dlt -&gt; dlt)\n.build();\n}\n</code></pre> Step2 Add button <code>create</code> to corresponding .widget.json.  <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\":\"Custom Field text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"delete\",\n\"save\"\n]\n}\n}\n}\n</code></pre> Step3 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldText);\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#inline-form","title":"Inline-form","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Create with widget</code> opens an additional widget when the \"Add\" button is clicked. The form will appear on the same screen, allowing you to view both the list of entities and the form for adding a new row.  After filling the information in and clicking \"Save\", the new row is added to the List. </p>"},{"location":"widget/type/list/list/#how-does-it-look_5","title":"How does it look?","text":""},{"location":"widget/type/list/list/#how-to-add_6","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldText);\nfields.setEnabled(MyExampleDTO_.customField);\nfields.setRequired(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>Step3 Create widget.json with type <code>Form</code> that appears when you click a button <pre><code>{\n\"title\": \"\",\n\"name\": \"myEntityCreateForm\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n},\n\"actionGroups\": {\n\"include\": [\n\"save\",\n\"cancel-create\"\n]\n}\n}\n}\n</code></pre></p> <p>Step4 Add widget.json with type <code>Form</code> to corresponding .view.json.  <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityCreateForm\",\n\"position\": 5,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Step5 Add button <code>create</code> and widget with type <code>Form</code> to corresponding .widget.json.</p> <p><code>options</code>.<code>create</code>: Name widget that appears when you click a button</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"create\": {\n\"widget\": \"myEntityCreateForm\"\n},\n\"edit\": {\n\"widget\": \"myEntityCreateForm\"\n},\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"delete\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#with-view","title":"With view","text":"<p> Live Sample \u00b7  GitHub</p> <p>With <code>Create with view</code>, clicking the \"Add\" button opens a separate view that displays only the data entry form. After completing the form and saving, the system returns to the list of entities with the new row added. </p>"},{"location":"widget/type/list/list/#how-does-it-look_6","title":"How does it look?","text":""},{"location":"widget/type/list/list/#how-to-add_7","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.action(act -&gt; act\n.action(\"finish\", \"Save and Close\")\n.invoker((bc, dto) -&gt; {\nMyEntity myEntity = repository.getReferenceById(bc.getIdAsLong());\nrepository.save(myEntity);\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexamplelist\"\n));\n})\n)\n.build();\n}\n</code></pre> Step2 Add PostAction.drillDown to method doCreateEntity to corresponding VersionAwareResponseService.  <pre><code>    @Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyEntity entity, BusinessComponent bc) {\nrepository.save(entity);\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity))\n.setAction(PostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleform/\"\n+ CxboxMyExampleController.myexample + \"/\"\n+ entity.getId()));\n}\n</code></pre> Step4 Add button <code>create</code> to corresponding .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"create\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#edit","title":"Edit","text":"<p><code>Edit</code> enables you to change the field value. Just like with <code>Create</code> button, there are three ways of implementing this Action. </p> <p>There are three methods to create a record:</p> <ul> <li> <p>Inline edit: You can edit a line directly.</p> </li> <li> <p>Inline-form: You can edit data using a form widget without leaving your current view.</p> </li> <li> <p>With view: You can edit a record by navigating to a view.</p> </li> </ul>"},{"location":"widget/type/list/list/#inline-edit","title":"Inline edit","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Edit Inline</code> implies inline-edit. Click twice on the value you want to change.</p>"},{"location":"widget/type/list/list/#how-does-it-look_7","title":"How does it look?","text":""},{"location":"widget/type/list/list/#how-to-add_8","title":"How to add?","text":"Example <p>Step1 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldText);\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#inline-form_1","title":"Inline-form","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Edit with widget</code> opens an additional widget when clicking on the Edit option from a three-dot menu. </p>"},{"location":"widget/type/list/list/#how-does-it-look_8","title":"How does it look?","text":""},{"location":"widget/type/list/list/#how-to-add_9","title":"How to add?","text":"Example <p>Step1 Add button <code>edit</code> to corresponding VersionAwareResponseService. <pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.save(sv -&gt; sv.text(\"Save\"))\n.action(act -&gt; act\n.action(\"edit\", \"Edit\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.build();\n}\n}\n</code></pre></p> <p>Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyExampleDTO_.customFieldText);\nfields.setEnabled(MyExampleDTO_.customField);\n}\n</code></pre></p> <p>Step2  Create widget.json with type <code>Form</code> that appears when you click a button <pre><code>{\n\"title\": \"\",\n\"name\": \"myEntityEditForm\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"label\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldText\",\n\"span\": 12\n}\n]\n},\n{\n\"cols\": [\n{\n\"fieldKey\": \"customField\",\n\"span\": 12\n}\n]\n}\n]\n},\n\"actionGroups\": {\n\"include\": [\n\"save\",\n\"cancel-create\"\n]\n}\n}\n}\n</code></pre></p> <p>Step4 Add widget.json with type <code>Form</code> to corresponding .view.json.  <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityEditForm\",\n\"position\": 10,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Step5 Add button <code>edit</code> and widget with type <code>Form</code> to corresponding .widget.json.</p> <p><code>options</code>.<code>edit</code>: Name widget that appears when you click a button</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"edit\": {\n\"widget\": \"myEntityEditForm\"\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#with-view_1","title":"With view","text":"<p> Live Sample \u00b7  GitHub</p> <p>With <code>Edit with view</code>, you can edit the entity from a separate view that displays only the data entry form. Click on the \"Edit\" option in the three-dot menu.  </p>"},{"location":"widget/type/list/list/#how-does-it-look_9","title":"How does it look?","text":""},{"location":"widget/type/list/list/#how-to-add_10","title":"How to add?","text":"Example <p>Step1 Add action edit to corresponding VersionAwareResponseService. </p> <p>Add PostAction.drillDown to method edit</p> <p><pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.action(act -&gt; act\n.action(\"finish\", \"Save and Close\")\n.invoker((bc, dto) -&gt; {\nMyEntity myEntity = repository.getReferenceById(bc.getIdAsLong());\nrepository.save(myEntity);\nreturn new ActionResultDTO&lt;MyExampleDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexamplelist\"\n));\n})\n)\n.build();\n}\n</code></pre> Step2 Add button ot group button to corresponding .widget.json.</p> <p><pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"edit\": {\n\"widget\": \"myEntityEditForm\"\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#additional-properties","title":"Additional properties","text":""},{"location":"widget/type/list/list/#customization-of-displayed-columns","title":"Customization of displayed columns","text":"<p> Live Sample \u00b7  GitHub</p> <p>To customize the columns displayed on a list widget, you can perform two main actions:</p> <ul> <li>Hide columns</li> <li>Swap columns</li> </ul> <p>Info</p> <p>Currently, table customization data is stored within internal tables, even when microservices are used.</p>"},{"location":"widget/type/list/list/#basic","title":"Basic","text":"<p>When customizing columns, records are inserted into the ADDITIONAL_FIELDS table. Table ADDITIONAL_FIELDS for store user-specific settings:</p> <ul> <li><code>user_id</code>:  The user ID for which the columns are being customized. </li> <li><code>view</code>: The name of the view where the columns are customized.</li> <li><code>widget</code>: The name of the widget where the columns are customized.</li> <li><code>order_fields</code>: When configuring swap columns, the field sequence will be updated, and a new comma-separated sequence of fields will be saved.</li> <li><code>added_to_additional_fields</code>: User-hidden fields.</li> <li><code>removed_from_additional_fields</code> </li> </ul>"},{"location":"widget/type/list/list/#how-does-it-look_10","title":"How does it look?","text":"Hide columnsSwap columnsPre-hidden"},{"location":"widget/type/list/list/#how-to-add_11","title":"How to add?","text":"Example Hide and Swap columnsPre-hidden columns <p>Add in options parameter additional to corresponding .widget.json.</p> <pre><code>\"additional\": {\n  \"enabled\": true\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List widget customization columns\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Input\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Percent\",\n\"key\": \"customFieldPercent\",\n\"type\": \"percent\"\n},\n{\n\"title\": \"Custom Field Radio\",\n\"key\": \"customFieldRadio\",\n\"type\": \"radio\"\n}\n],\n\"options\": {\n\"additional\": {\n\"enabled\": true\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>\u0421an also set columns to be pre-hidden, meaning they will be hidden when the widget opens.</p> <p>Add in options parameter additional to corresponding .widget.json.</p> <p>Add in options parameter fields with list of hidden fields  to corresponding .widget.json.</p> <pre><code>   \"additional\": {\n      \"fields\": [\"customFieldPercent\", \"customFieldRadio\"],\n      \"enabled\": true\n    }\n</code></pre> <pre><code>{\n\"name\": \"MyExampleListHiddenFields\",\n\"title\": \"List widget customization columns hidden fields\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Input\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Percent\",\n\"key\": \"customFieldPercent\",\n\"type\": \"percent\"\n},\n{\n\"title\": \"Custom Field Radio\",\n\"key\": \"customFieldRadio\",\n\"type\": \"radio\"\n}\n],\n\"options\": {\n\"additional\": {\n\"fields\": [\"customFieldPercent\", \"customFieldRadio\"],\n\"enabled\": true\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/list/list/#handling-old-records","title":"Handling Old Records","text":"<p><code>Delete fields with widget</code></p> <p>When fields stored in the additional settings table are deleted from the widget, the functionality will continue to work correctly by ignoring these old fields.</p>"},{"location":"widget/type/list/list/#filtration","title":"Filtration","text":""},{"location":"widget/type/list/list/#basic_1","title":"Basic","text":"<p>see more  Fields</p>"},{"location":"widget/type/list/list/#fulltextsearch","title":"FullTextSearch","text":"<p><code>FullTextSearch</code> - when the user types in the full text search input area, then widget filters the rows that match the search query. see FullTextSearch</p>"},{"location":"widget/type/list/list/#personal-filter-group","title":"Personal filter group","text":"<p>A user-filled filter can be saved for each individual user. see Personal filter group</p>"},{"location":"widget/type/list/list/#filter-group","title":"Filter group","text":"<p><code>Filter group</code> - predefined filters settings that users can use in an application. They allow users to quickly apply specific filtering criteria without having to manually input. see Filter group</p>"},{"location":"widget/type/list/list/#pagination","title":"Pagination","text":"<p><code>Pagination</code> is the process of dividing content into separate, discrete pages, making it easier to navigate and consume large amounts of information. see Pagination</p>"},{"location":"widget/type/list/list/#export-to-excel","title":"Export to Excel","text":"<p><code>Export to Excel</code> enables users to download a .xlsx file containing the table's data. see Excel</p>"},{"location":"widget/type/list/list/#multi-upload-files","title":"Multi-upload files","text":"<p>We have implemented multi-file upload. You can use a dedicated drag-and-drop zone or a standard button to select your files.</p> <p>see more Multi-upload files</p>"},{"location":"widget/type/picklistpopup/picklistpopup/","title":"PickListPopup","text":"<p><code>PickListPopup</code> is a component that allows the user to select a value from a Popup list of entities.</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#basics","title":"Basics","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#how-does-it-look","title":"How does it look?","text":"Example <p>Step1 Add field with type pickList or type inline-pickList  see more Fields</p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"PickListPopup widget basic List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Inline Pick List\",\n\"key\": \"customFieldInlinePickList\",\n\"type\": \"inline-pickList\",\n\"popupBcName\": \"myEntityPickPick\",\n\"pickMap\": {\n\"customFieldInlinePickList\": \"customField\",\n\"customFieldInlinePickListId\": \"id\"\n}\n},\n{\n\"title\": \"Custom Field Pick List\",\n\"key\": \"customFieldPickList\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickPick\",\n\"pickMap\": {\n\"customFieldPickListId\": \"id\",\n\"customFieldPickList\": \"customField\"\n}\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"save\"\n]\n}\n}\n}\n</code></pre> <p>Step2 Add widget and popup widget to corresponding *.view.json* .</p> <pre><code>{\n\"name\": \"myexamplelist\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplelist\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityPickPickPickListPopup\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myEntityPickPickPickListPopup\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 10,\n\"gridWidth\": 12\n},\n{\n\"widgetName\": \"MyExampleList\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#title","title":"Title","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#title-basic","title":"Title Basic","text":"<p>There are 3 types of titles for a Picklist Popup:</p> <ul> <li><code>constant title</code>: displays a fixed piece of text which cannot be changed. </li> <li><code>constant title empty</code>: shows no text.</li> <li><code>calculated title</code>: displays a dynamic piece of text, meaning it can change based on business logic or data in the application.</li> </ul>"},{"location":"widget/type/picklistpopup/picklistpopup/#how-does-it-look_1","title":"How does it look?","text":"Constant titleConstant title emptyCalculated title"},{"location":"widget/type/picklistpopup/picklistpopup/#how-to-add","title":"How to add?","text":"Example Constant titleConstant title emptyCalculated title <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"title\": \"Constant Title\",\n\"name\": \"myEntityPickPickListPopup\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickPickListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field Pick\",\n\"key\": \"customFieldPick\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre></p> <p>Step1 Delete parameter title to .widget.json. <pre><code>{\n\"name\": \"myEntityPickPickListPopup\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickPickListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field Pick\",\n\"key\": \"customFieldPick\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre></p> <p> Step1 Add ${customField} for title to .widget.json. <pre><code>{\n\"title\": \"customFieldPick: ${customFieldPick}\",\n\"name\": \"myEntityPickPickListPopup\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickPickListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field Pick\",\n\"key\": \"customFieldPick\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"save\"\n]\n}\n}\n}\n</code></pre></p>"},{"location":"widget/type/picklistpopup/picklistpopup/#title-color","title":"Title Color","text":"<p><code>Title Color</code> allows you to specify a color for a title. It can be constant or calculated.</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color is a fixed color that doesn't change. It remains the same regardless of any factors in the application. Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Calculated color can be used to change a title color dynamically. It changes depending on business logic or data in the application.</p> <p>Info</p> <p>Title colorization is applicable to the following fields: date, dateTime, dateTimeWithSeconds, number, money, percent, time, input, text, dictionary, radio, checkbox, multivalue, multivalueHover.</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"widget/type/picklistpopup/picklistpopup/#how-to-add_1","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null. <pre><code>    public MyEntityPickDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldColor = \"#edaa\";\nthis.customFieldColorFieldText = \"#aeda\";\n</code></pre></p> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code> and  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"myEntityPickListPopupColorConst\",\n\"title\": \"FieldInput:${customFieldColorInputConst}, FieldText: ${customFieldColorTextConst}\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickListPopupColorConst\",\n\"fields\": [\n{\n\"title\": \"Color Input\",\n\"key\": \"customFieldColorInputConst\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"title\": \"Color Text\",\n\"key\": \"customFieldColorTextConst\",\n\"type\": \"text\",\n\"bgColor\": \"#aeda\"\n}\n]\n}\n</code></pre> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json.</p> <p>Add in <code>title</code> field with <code>${customField}</code> </p> <pre><code>{\n\"name\": \"myEntityPickListPopupColorConst\",\n\"title\": \"FieldInput:${customFieldColorInputConst}, FieldText: ${customFieldColorTextConst}\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickListPopupColorConst\",\n\"fields\": [\n{\n\"title\": \"Color Input\",\n\"key\": \"customFieldColorInputConst\",\n\"type\": \"input\",\n\"bgColor\": \"#edaa\"\n},\n{\n\"title\": \"Color Text\",\n\"key\": \"customFieldColorTextConst\",\n\"type\": \"text\",\n\"bgColor\": \"#aeda\"\n}\n]\n}\n</code></pre>"},{"location":"widget/type/picklistpopup/picklistpopup/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this form belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#show-condition","title":"Show condition","text":""},{"location":"widget/type/picklistpopup/picklistpopup/#fields","title":"Fields","text":"<p>Fields Configuration. The fields array defines the individual fields present within the form.</p> <pre><code>{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n</code></pre> <ul> <li>\"title\"</li> </ul> <p>Description:  Field Title.</p> <p>Type: String(optional).</p> <ul> <li>\"key\"</li> </ul> <p>Description: Name field to corresponding DataResponseDTO.</p> <p>Type: String(required).</p> <ul> <li>\"type\"</li> </ul> <p>Description: Field types</p> <p>Type: String(required).</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#how-to-add_2","title":"How to add?","text":"Example With plugin(recommended)Example of writing code <p>Step 1 Download plugin     download Intellij Plugin</p> <p>Step 2 Add existing field to an existing form widget     </p> <p>Add field to .widget.json.</p> <pre><code>   {\n\"name\": \"myEntityPickPickPickListPopup\",\n\"title\": \"PickListPopup widget basic\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickPick\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n]\n}\n</code></pre>"},{"location":"widget/type/picklistpopup/picklistpopup/#options-layout","title":"Options layout","text":"<p>options.layout - no use in this type.</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#standard-actions","title":"Standard Actions","text":"<p><code>Actions</code> show available actions as separate buttons see more Actions.</p> <p>Standard Actions:</p> <ul> <li><code>Create</code>: Action to initialize the process of creating a new record</li> <li><code>Delete</code> - not applicable</li> <li><code>Edit</code>  -  not applicable</li> <li><code>Save</code>: Action to store the data entered or modified</li> <li><code>Cancel-create</code>: Action to abort the creation of a new record, discarding any input without saving</li> </ul>"},{"location":"widget/type/picklistpopup/picklistpopup/#create","title":"Create","text":"<p><code>Create</code> button enables you to create a new value by clicking the <code>Add</code> button. This action can be performed in three different ways, feel free to choose any, depending on your logic of application:</p> <p>There are three methods to create a record:</p> <ul> <li>Inline: You can add a line directly.</li> </ul> <p>Info</p> <p>Pagination won't function until the page is refreshed after adding records.</p> <ul> <li> <p>Inline-form: You can add data using a form widget without leaving your current view.</p> </li> <li> <p>With view: not applicable.</p> </li> </ul>"},{"location":"widget/type/picklistpopup/picklistpopup/#inline","title":"Inline","text":"<p> Live Sample \u00b7  GitHub</p> <p>With <code>Line Addition</code>, a new empty row is immediately added to the top of the assoc widget when the \"Add\" button is clicked. This is a quick way to add rows without needing to input data beforehand.</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#how-does-it-look_3","title":"How does it look?","text":""},{"location":"widget/type/picklistpopup/picklistpopup/#how-to-add_3","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    public Actions&lt;MyEntityInlinePickPickDTO&gt; getActions() {\nreturn Actions.&lt;MyEntityInlinePickPickDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre></p> <p>Step2 Add button <code>create</code> to corresponding .widget.json.  <pre><code>{\n\"title\": \"PickListPopup create\",\n\"name\": \"myEntityInlinePickPickListPopup\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityInlinePickPickListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field Pick\",\n\"key\": \"customFieldPick\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"delete\",\n\"save\"\n]\n}\n}\n}\n</code></pre></p> <p>Step3 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyEntityInlinePickPickDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyEntityInlinePickPickDTO_.id);\nfields.setEnabled(MyEntityInlinePickPickDTO_.customFieldPick);\n}\n</code></pre></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#inline-form","title":"Inline-form","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Create with widget</code> opens an additional widget when the \"Add\" button is clicked. The form will appear on the same screen, allowing you to view both the assoc of entities and the form for adding a new row. After filling the information in and clicking \"Save\", the new row is added to the assoc.</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#how-does-it-look_4","title":"How does it look?","text":""},{"location":"widget/type/picklistpopup/picklistpopup/#how-to-add_4","title":"How to add?","text":"Example <p>Step1 Add button <code>create</code> to corresponding VersionAwareResponseService.  <pre><code>    public Actions&lt;MyEntityInlinePickPickDTO&gt; getActions() {\nreturn Actions.&lt;MyEntityInlinePickPickDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre> Step2 Add fields.setEnabled to corresponding FieldMetaBuilder. <pre><code>    public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyEntityInlinePickPickDTO&gt; fields, InnerBcDescription bcDescription,\nLong id, Long parentId) {\nfields.setEnabled(MyEntityInlinePickPickDTO_.id);\nfields.setEnabled(MyEntityInlinePickPickDTO_.customFieldPick);\n}\n</code></pre> Step3 Create widget.json with type <code>Form</code> that appears when you click a button <pre><code>{\n\"title\": \"\",\n\"name\": \"myEntityInlinePickListForm\",\n\"type\": \"Form\",\n\"bc\": \"myEntityInlinePickPickListPopup\",\n\"fields\": [\n{\n\"label\": \"Custom Field Pick\",\n\"key\": \"customFieldPick\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldPick\",\n\"span\": 12\n}\n]\n}\n]\n},\n\"actionGroups\": {\n\"include\": [\n\"save\",\n\"cancel-create\"\n]\n}\n}\n}\n</code></pre></p> <p>Step4 Add widget.json with type <code>Form</code> to corresponding .view.json.  <pre><code>{\n\"name\": \"myexamplelistinlineform\",\n\"title\": \"MyExample List\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/myexamplelistinlineform\",\n\"widgets\": [\n{\n\"widgetName\": \"myEntityPickPickListPopupForm\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myEntityInlinePickListForm\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myEntityPickPickListPopup\",\n\"position\": 1,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"myEntityInlinePickPickListPopup\",\n\"position\": 2,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 5,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"ThirdLevelMenu\",\n\"position\": 7,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleListInlineForm\", \"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Step5 Add button <code>create</code> and widget with type <code>Form</code> to corresponding .widget.json.</p> <p><code>options</code>.<code>create</code>: Name widget that appears when you click a button</p> <pre><code>{\n\"title\": \"PickListPopup create\",\n\"name\": \"myEntityInlinePickPickListPopup\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityInlinePickPickListPopup\",\n\"fields\": [\n{\n\"title\": \"Custom Field Pick\",\n\"key\": \"customFieldPick\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"create\": {\n\"widget\": \"myEntityInlinePickListForm\"\n},\n\"edit\": {\n\"widget\": \"myEntityInlinePickListForm\"\n},\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"delete\"\n]\n}\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#with-view","title":"With view","text":"<p>not applicable</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#delete","title":"Delete","text":"<p>not applicable</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#edit","title":"Edit","text":"<p>not applicable</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#save","title":"Save","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Save</code> to store the data entered or modified. see information on autosave</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#how-does-it-look_5","title":"How does it look?","text":""},{"location":"widget/type/picklistpopup/picklistpopup/#how-to-add_5","title":"How to add?","text":"Example <p>Step1 Add action save to corresponding VersionAwareResponseService. </p> <p><pre><code>    @Override\npublic Actions&lt;MyExampleDTO&gt; getActions() {\nreturn Actions.&lt;MyExampleDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre> Step2 Add button ot group button to corresponding .widget.json.</p> <pre><code>{\n\"name\": \"MyExampleForm\",\n\"title\": \"PickListPopup widget action save\",\n\"type\": \"Form\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"label\": \"Custom Field Pick List\",\n\"key\": \"customFieldPickList\",\n\"type\": \"pickList\",\n\"popupBcName\": \"myEntityPickPick\",\n\"pickMap\": {\n\"customFieldPickList\": \"customField\",\n\"customFieldPickListId\": \"id\"\n}\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"save\"\n]\n},\n\"layout\": {\n\"rows\": [\n{\n\"cols\": [\n{\n\"fieldKey\": \"customFieldPickList\",\n\"span\": 12\n}\n]\n}\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#cancel-create","title":"Cancel-create","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>Cancel-create</code> abort the creation of a new record, discarding any input without saving</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#how-does-it-look_6","title":"How does it look?","text":"BasicWith drilldown"},{"location":"widget/type/picklistpopup/picklistpopup/#how-to-add_6","title":"How to add?","text":"Example BasicWith postActionMethod onCancel <p>Step1 Add standart action cancelCreate to corresponding VersionAwareResponseService.  The interface displays \"cancelCreate\" as the default option.</p> <p><pre><code>    @Override\npublic Actions&lt;MyEntityPickPickDTO&gt; getActions() {\nreturn Actions.&lt;MyEntityPickPickDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.build();\n}\n</code></pre> Step2 Add action cancel-create to corresponding PickListPopup. </p> <pre><code>{\n\"name\": \"myEntityPickPickPickListPopup\",\n\"title\": \"Action cancel-create\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickPick\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"save\",\n\"cancel-create\",\n\"create\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Step1 Add action cancel to corresponding VersionAwareResponseService with postAction. </p> <pre><code>    @Override\npublic Actions&lt;MyEntityPickPostActionPickDTO&gt; getActions() {\nreturn Actions.&lt;MyEntityPickPostActionPickDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.action(act -&gt; act\n.action(\"cancel\", \"Cancel\")\n.invoker((bc, dto) -&gt; {\nreturn new ActionResultDTO&lt;MyEntityPickPostActionPickDTO&gt;().setAction(\nPostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleinlinecreatelist\"\n));\n})\n.withoutAutoSaveBefore()\n)\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre> <p>Step2 Add button ot group button to corresponding .widget.json.</p> <pre><code>{\n\"name\": \"myEntityPickPostActionPickPickListPopup\",\n\"title\": \"Action cancel-create PostAction\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickPostActionPick\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"cancel\",\n\"create\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p> <p>Info</p> <p>Only for Inner Business Component see more Business Component</p> <p>Step1 Add standart action cancelCreate to corresponding VersionAwareResponseService. </p> <p><pre><code>    @Override\npublic Actions&lt;MyEntityPickOnCancelPickDTO&gt; getActions() {\nreturn Actions.&lt;MyEntityPickOnCancelPickDTO&gt;builder()\n.create(crt -&gt; crt.text(\"Add\"))\n.save(sv -&gt; sv.text(\"Save\"))\n.cancelCreate(ccr -&gt; ccr.text(\"Cancel\").available(bc -&gt; true))\n.delete(dlt -&gt; dlt.text(\"Delete\"))\n.build();\n}\n</code></pre> Step2 Add method onCancel to corresponding VersionAwareResponseService.  <pre><code>    @Override\npublic ActionResultDTO onCancel(BusinessComponent bc) {\nreturn new ActionResultDTO&lt;&gt;().setAction(PostAction.drillDown(\nDrillDownType.INNER,\n\"/screen/myexample/view/myexampleinlinecreatelist\"\n));\n}\n</code></pre> Step3 Add button ot group button to corresponding .widget.json.</p> <pre><code>{\n\"name\": \"myEntityPickOnCancelPickPickListPopup\",\n\"title\": \"Action cancel-create OnCancel\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickOnCancelPick\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"id\",\n\"key\": \"id\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": [\n\"cancel-create\",\n\"create\"\n]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#additional-properties","title":"Additional properties","text":""},{"location":"widget/type/picklistpopup/picklistpopup/#customization-of-displayed-columns","title":"Customization of displayed columns","text":"<p>not applicable</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#filtration","title":"Filtration","text":""},{"location":"widget/type/picklistpopup/picklistpopup/#basic","title":"Basic","text":"<p>see more  Fields</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#fulltextsearch","title":"FullTextSearch","text":"<p><code>FullTextSearch</code> - when the user types in the full text search input area, then widget filters the rows that match the search query. see FullTextSearch</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#personal-filter-group","title":"Personal filter group","text":"<p>not applicable</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#filter-group","title":"Filter group","text":"<p>not applicable</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#pagination","title":"Pagination","text":"<p><code>Pagination</code> is the process of dividing content into separate, discrete pages, making it easier to navigate and consume large amounts of information. see Pagination</p>"},{"location":"widget/type/picklistpopup/picklistpopup/#export-to-excel","title":"Export to Excel","text":"<p>not applicable</p>"},{"location":"widget/type/property/bullupload/bulkupload/","title":"Multi-upload files","text":"<p> Live Sample  GitHub</p> <p>We have implemented multi-file upload. You can use a dedicated drag-and-drop zone or a standard button to select your files.</p> <p>This feature supports the following types:</p> <ul> <li>List widget</li> <li>GroupingHierarchy widget</li> </ul> <p>This feature supports only field fileUpload</p> <p>The interface supports three distinct modes for displaying the bulk file upload functionality, allowing for flexible user experience configuration:</p> <ol> <li>Combined Mode (Button + Multi-upload)  Live Sample  GitHub</li> </ol> <p>This mode displays both a button to trigger the upload dialog and a drag-and-drop widget, giving the user maximum choice in how they initiate the upload.</p> <ol> <li>Button-Only Mode (Button)  Live Sample  GitHub</li> </ol> <p>This mode is designed to display only a button. Clicking it opens the operating system's standard file selection dialog for bulk uploading files.</p> <ol> <li>Widget-Only Mode (Multi-upload files) This mode displays only the interactive drag-and-drop upload widget, without a separate button.</li> </ol> <p> Live Sample  GitHub</p>"},{"location":"widget/type/property/bullupload/bulkupload/#how-does-it-look","title":"How does it look?","text":"Combined Mode (Button + Multi-upload)Button-Only Mode (Button)Widget-Only Mode (Multi-upload files) <p>There are five main colors used for the progress bar and icon:</p> <ul> <li>light gray \u2014 empty progress bar</li> <li>blue \u2014 upload in progress</li> <li>green \u2014 upload completed successfully</li> <li>red \u2014 an error occurred</li> <li>dark gray \u2014 file skipped and will not be uploaded (the reason can be viewed by hovering over the progress row)</li> </ul> light graybluegreenreddark gray <p></p> <p></p> <p></p> <p></p> <p></p> <p>Uploaded:</p> <ul> <li>If all files are uploaded successfully, the progress notification automatically disappears after 2 seconds.</li> <li>If some files are skipped, the notification remains visible until it is closed manually or the user navigates to another screen. Information about successfully uploaded files still disappears after 2 seconds.</li> <li>When hovering over a notification, it will not disappear until the mouse is moved away (successful notifications also remain visible in this case)</li> <li>Limitation: When navigating to another screen, the notification is hidden and the upload is canceled</li> </ul> <p>Button</p> <p>A file can be added not only through the standard selection dialog but also by dragging and dropping it onto the upload button.</p> <p></p> <p>Info</p> <p>For fields of type fileUpload, there is an option to cancel the upload: if a new file is added while the previous one is still uploading, the previous upload is canceled.</p>"},{"location":"widget/type/property/bullupload/bulkupload/#how-to-add","title":"How to add?","text":"Example Button And Multi-upload filesMulti-upload filesButton <p><code>Step1</code>  Add actionKey associate to corresponding .widget.json.</p> <pre><code>      {\n\"actionKey\": \"associate\",\n\"fieldKey\": \"customFieldFile\",\n\"mode\": \"default-and-file-upload-dnd\"\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleAllList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field File\",\n\"key\": \"customFieldFile\",\n\"type\": \"fileUpload\",\n\"fileIdKey\": \"customFieldFileId\"\n}\n],\n\"options\": {\n\"buttons\": [\n{\n\"actionKey\": \"associate\",\n\"fieldKey\": \"customFieldFile\",\n\"mode\": \"default-and-file-upload-dnd\"\n}\n],\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"associate\",\n\"delete\",\n\"save\"\n]\n}\n}\n}\n</code></pre> <p><code>Step1</code>  Add actionKey associate to corresponding .widget.json.</p> <pre><code>      {\n\"actionKey\": \"associate\",\n\"fieldKey\": \"customFieldFile\",\n\"mode\": \"file-upload-dnd\"\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleFileList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field File\",\n\"key\": \"customFieldFile\",\n\"type\": \"fileUpload\",\n\"fileIdKey\": \"customFieldFileId\"\n}\n],\n\"options\": {\n\"buttons\": [\n{\n\"actionKey\": \"associate\",\n\"fieldKey\": \"customFieldFile\",\n\"mode\": \"file-upload-dnd\"\n}\n],\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"associate\",\n\"delete\",\n\"save\"\n]\n}\n}\n}\n</code></pre> <p><code>Step1</code>  Add actionKey associate to corresponding .widget.json.</p> <pre><code>      {\n\"actionKey\": \"associate\",\n\"fieldKey\": \"customFieldFile\",\n\"mode\": \"default\"\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleDefaultList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field File\",\n\"key\": \"customFieldFile\",\n\"type\": \"fileUpload\",\n\"fileIdKey\": \"customFieldFileId\"\n}\n],\n\"options\": {\n\"buttons\": [\n{\n\"actionKey\": \"associate\",\n\"fieldKey\": \"customFieldFile\",\n\"mode\": \"default\"\n}\n],\n\"actionGroups\": {\n\"include\": [\n\"create\",\n\"associate\",\n\"delete\",\n\"save\"\n]\n}\n}\n}\n</code></pre> <p><code>Step2</code>  Add setFileAccept to corresponding FieldMetaBuilder.     <pre><code>    fields.setFileAccept(MyExampleDTO_.customFieldFile, List.of(\".png\",\".pdf\",\".jpg\",\".jpeg\"));\n</code></pre></p> <pre><code>```json\n\n```\n</code></pre> <p><code>Step3</code>  Add associate to corresponding ResponseService.</p> <pre><code>```java\n    .associate(ast -&gt; ast\n    .withCustomParameter(Map.of(\"subtype\", \"multiFileUpload\"))\n    .text(\"Add Files\"))\n```\n\n```json\n\n```\n</code></pre> <p><code>Step3.1</code>  Add doAssociate to corresponding ResponseService.      In this service, it is necessary to describe what happens to the files during multiple upload, as well as how and with which properties they are stored.</p> <pre><code>```json\n\n```\n</code></pre> <p><code>Step3.2</code>  Add function fileUpload to corresponding ResponseService.</p> <pre><code>```json\n\n```\n</code></pre>"},{"location":"widget/type/property/defaultlimitpage/defaultlimitpage/","title":"Default page limit","text":"<p>This function is available for: </p> <ul> <li>List,</li> <li>PickListPopup widget</li> <li>AssocListPopup widget</li> </ul> <p>The page limit can be configured in two ways: </p> <ul> <li>Only current business component </li> <li>At the application level</li> </ul>"},{"location":"widget/type/property/defaultlimitpage/defaultlimitpage/#how-does-it-look","title":"How does it look?","text":"ListPickListPopupAssocListPopup"},{"location":"widget/type/property/defaultlimitpage/defaultlimitpage/#only-current-business-component","title":"Only current business component","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/property/defaultlimitpage/defaultlimitpage/#how-to-add","title":"How to add?","text":"Example <p>Add  business component in BC_PROPERTIES TABLE</p> <p>BC - name business component   PAGE_LIMIT - limit page default</p> <pre><code>ID;BC;PAGE_LIMIT;SORT;FILTER\n27;'myexample358';2;NULL;'\"\"'\n</code></pre>"},{"location":"widget/type/property/defaultlimitpage/defaultlimitpage/#at-the-application-level","title":"At the application level","text":""},{"location":"widget/type/property/defaultlimitpage/defaultlimitpage/#how-to-add_1","title":"How to add?","text":"<p> Live Sample \u00b7  GitHub</p> Example <p>Add <code>bc-default-page-limit</code> in application.yml  </p> <pre><code>  cxbox:\n     meta:\n         bc-default-page-limit: 5\n</code></pre>"},{"location":"widget/type/property/export/excel/excel/","title":"Export to Excel","text":"<p><code>Export to Excel</code> enables users to download a .xlsx file containing the table's data.</p> <p>This function is available:</p> <ul> <li>for widgets: List,only mode basic AdditionalList,GroupingHierarchy.</li> <li>for fields: Hint, Multivalue, Inline, Pick List,Radio, Money, Percent, Number, Dictionary, Date Time With Seconds, Date, Checkbox, Date Time, Text, Input. See more field types</li> </ul> <p>The export functionality is accessible via the gear icon and supports the following types:</p> <p> Live Sample \u00b7  GitHub</p> <ul> <li>Inner source. Exports data retrieved directly from the database.</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li>Any source. Exports data obtained from microservices or other external sources.</li> </ul> <p> Live Sample \u00b7  GitHub</p> <ul> <li>Filtration. Exports only the filtered data based on the user's applied filters.</li> </ul>"},{"location":"widget/type/property/export/excel/excel/#basic","title":"Basic","text":"<p>The Export function includes two parameters:</p> <ul> <li>Enabled -  true/false</li> <li>Title: None/Custom Name  If the parameter is not specified, a default title is generated with the format: <code>List + current date</code>.</li> </ul> <p>Example: <code>List 05-12-2024.xlsx</code> A custom title can be provided if needed.</p>"},{"location":"widget/type/property/export/excel/excel/#how-does-it-look","title":"How does it look?","text":"Inner sourceAny sourceFiltration"},{"location":"widget/type/property/export/excel/excel/#how-to-add","title":"How to add?","text":"Example <p>Add <code>export</code> to corresponding widget.json.</p> <p><pre><code>\"export\": {\n  \"enabled\": true,\n  \"title\": \"Custom Name\"\n}\n</code></pre> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List property Excel inner source - List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Percent\",\n\"key\": \"customFieldPercent\",\n\"type\": \"percent\"\n},\n{\n\"title\": \"Custom Field Number\",\n\"key\": \"customFieldNumber\",\n\"type\": \"number\"\n},\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n}\n],\n\"options\": {\n\"export\": {\n\"enabled\": true,\n\"title\": \"Custom Name\"\n}\n}\n}\n</code></pre></p> <ul> <li> <p>\"Inner source\"      Live Sample \u00b7      GitHub</p> </li> <li> <p>\"Any source\"      Live Sample \u00b7      GitHub</p> </li> <li> <p>\"Filtration\"      Live Sample \u00b7      GitHub</p> </li> </ul>"},{"location":"widget/type/property/filtration/filtration/","title":"Filtration","text":"<ul> <li>by fields</li> <li>by fulltextsearch </li> <li>by personal filter group</li> <li>by filter group</li> </ul>"},{"location":"widget/type/property/filtration/filtration/#by-fields","title":"by fields","text":"<p>The availability or unavailability of filtering operations for each field type see Fields.</p> <p>Each field type requires a distinct filtering operation sent by the frontend. Here are the standard field types with their respective filtering methods see SearchOperation for filtering.</p> <p>This function is available:</p> <ul> <li>List widget </li> <li>AdditionalList widget </li> <li>GroupingHierarchy widget </li> <li>AssocListPopup widget</li> <li>PickListPopup widget</li> </ul>"},{"location":"widget/type/property/filtration/filtration/#by-fulltextsearch","title":"by fulltextsearch","text":"<p><code>FullTextSearch</code> - when the user types in the full text search input area, then widget filters the rows that match the search query (search criteria is configurable and will usually check if at least one column has corresponding value). This feature makes it easier for users to quickly find the information they are looking for within a List widget.</p> <p>This function is available:</p> <ul> <li>List widget (   Live Sample  GitHub )</li> <li>AssocListPopup widget (   Live Sample  GitHub )</li> <li>PickListPopup widget ( Live Sample  GitHub ) </li> </ul>"},{"location":"widget/type/property/filtration/filtration/#how-does-it-look","title":"How does it look?","text":"List widgetAssocListPopup widgetPickListPopup widget"},{"location":"widget/type/property/filtration/filtration/#how-to-add","title":"How to add?","text":"Example <p><code>Step 1</code> Add extension file FullTextSearchExt.java <pre><code>import java.util.Optional;\nimport jakarta.persistence.criteria.CriteriaBuilder;\nimport jakarta.persistence.criteria.Path;\nimport jakarta.persistence.criteria.Predicate;\nimport lombok.NonNull;\nimport lombok.experimental.UtilityClass;\nimport org.apache.commons.lang3.StringUtils;\nimport org.cxbox.core.crudma.bc.BusinessComponent;\n@UtilityClass\npublic class FullTextSearchExt {\n@NonNull\npublic static Optional&lt;String&gt; getFullTextSearchFilterParam(BusinessComponent bc) {\nreturn Optional.ofNullable(bc.getParameters().getParameter(\"_fullTextSearch\"));\n}\npublic static Predicate likeIgnoreCase(String value, CriteriaBuilder cb, Path&lt;String&gt; path) {\nreturn cb.like(cb.lower(path), StringUtils.lowerCase(\"%\" + value + \"%\"));\n}\n}\n</code></pre></p> List widgetAssocListPopup widgetPickListPopup widget <p><code>Step 2</code> Add specifications for fulltextsearch fields to corresponding JpaRepository.  <pre><code>@Repository\npublic interface MyEntityRepository extends JpaRepository&lt;MyEntity, Long&gt;, JpaSpecificationExecutor&lt;MyEntity&gt; {\ndefault Specification&lt;MyEntity&gt; getFullTextSearchSpecification(String value) {\nreturn getAddressLikeIgnoreCaseSpecification(value)\n.or(getFullNameLikeIgnoreCaseSpecification(value)\n.or(getCustomFieldLikeIgnoreCaseSpecification(value)));\n}\ndefault Specification&lt;MyEntity&gt; getFullNameLikeIgnoreCaseSpecification(String value) {\nreturn (root, query, cb) -&gt; FullTextSearchExt.likeIgnoreCase(value, cb, root.get(MyEntity_.fullName));\n}\ndefault Specification&lt;MyEntity&gt; getAddressLikeIgnoreCaseSpecification(String value) {\nreturn (root, query, cb) -&gt; FullTextSearchExt.likeIgnoreCase(value, cb, root.get(MyEntity_.address));\n}\ndefault Specification&lt;MyEntity&gt; getCustomFieldLikeIgnoreCaseSpecification(String value) {\nreturn (root, query, cb) -&gt; FullTextSearchExt.likeIgnoreCase(value, cb, root.get(MyEntity_.customField));\n}\n}\n</code></pre></p> <p><code>Step 4</code> Add getSpecification to corresponding VersionAwareResponseService.  <pre><code>    @Override\nprotected Specification&lt;MyEntity&gt; getSpecification(BusinessComponent bc) {\nvar fullTextSearchFilterParam = FullTextSearchExt.getFullTextSearchFilterParam(bc);\nvar specification = super.getSpecification(bc);\nreturn fullTextSearchFilterParam.map(e -&gt; and(repository.getFullTextSearchSpecification(e), specification)).orElse(specification);\n}\n</code></pre></p> <p><code>Step 5</code> Add fullTextSearch to corresponding .widget.json. </p> <p><code>enabled</code> true/false  </p> <p><code>placeholder</code> - description for  fullTextSearch</p> <p><pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List FullTextSearch\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Address\",\n\"key\": \"address\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Full Name\",\n\"key\": \"fullName\",\n\"type\": \"input\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"fullTextSearch\": {\n\"enabled\": true,\n\"placeholder\": \"Find by Name or Address or Custom Field\"\n}\n}\n}\n</code></pre>  Live Sample  GitHub</p> <p><code>Step 2</code> Add specifications for fulltextsearch fields to corresponding JpaRepository.  <pre><code>@Repository\npublic interface MyEntityRepository extends JpaRepository&lt;MyEntity, Long&gt;, JpaSpecificationExecutor&lt;MyEntity&gt; {\ndefault Specification&lt;MyEntity&gt; getCustomFieldLikeIgnoreCaseSpecification(String value) {\nreturn (root, query, cb) -&gt; FullTextSearchExt.likeIgnoreCase(value, cb, root.get(MyEntity_.customField));\n}\ndefault Specification&lt;MyEntity&gt; getCustomFieldTextLikeIgnoreCaseSpecification(String value) {\nreturn (root, query, cb) -&gt; FullTextSearchExt.likeIgnoreCase(value, cb, root.get(MyEntity_.customFieldText));\n}\ndefault Specification&lt;MyEntity&gt; getFullTextSearchSpecification(String value) {\nreturn getCustomFieldLikeIgnoreCaseSpecification(value)\n.or(getCustomFieldTextLikeIgnoreCaseSpecification(value));\n}\n}\n</code></pre></p> <p><code>Step 4</code> Add getSpecification to corresponding VersionAwareResponseService.  <pre><code>    @Override\nprotected Specification&lt;MyEntity&gt; getSpecification(BusinessComponent bc) {\nvar fullTextSearchFilterParam = FullTextSearchExt.getFullTextSearchFilterParam(bc);\nvar specification = super.getSpecification(bc);\nreturn fullTextSearchFilterParam.map(e -&gt; and(repository.getFullTextSearchSpecification(e), specification)).orElse(specification);\n}\n</code></pre></p> <p><code>Step 5</code> Add fullTextSearch to corresponding .widget.json. </p> <p><code>enabled</code> true/false  </p> <p><code>placeholder</code> - description for  fullTextSearch</p> <p><pre><code>{\n\"name\": \"myEntityPickAssocListPopup\",\n\"title\": \"AssocListPopup widget property FullTextSearch\",\n\"type\": \"AssocListPopup\",\n\"bc\": \"myEntityPick\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"fullTextSearch\": {\n\"enabled\": true,\n\"placeholder\": \"Find by Custom Field Text or Custom Field\"\n}\n}\n}\n</code></pre>  Live Sample  GitHub</p> <p><code>Step 2</code> Add specifications for fulltextsearch fields to corresponding JpaRepository.  <pre><code>@Repository\npublic interface MyEntityPickRepository extends JpaRepository&lt;MyEntityPick, Long&gt;, JpaSpecificationExecutor&lt;MyEntityPick&gt; {\ndefault Specification&lt;MyEntityPick&gt; getCustomFieldLikeIgnoreCaseSpecification(String value) {\nreturn (root, query, cb) -&gt; FullTextSearchExt.likeIgnoreCase(value, cb, root.get(MyEntityPick_.customField));\n}\ndefault Specification&lt;MyEntityPick&gt; getCustomFieldTextLikeIgnoreCaseSpecification(String value) {\nreturn (root, query, cb) -&gt; FullTextSearchExt.likeIgnoreCase(value, cb, root.get(MyEntityPick_.customFieldText));\n}\ndefault Specification&lt;MyEntityPick&gt; getFullTextSearchSpecification(String value) {\nreturn getCustomFieldLikeIgnoreCaseSpecification(value)\n.or(getCustomFieldTextLikeIgnoreCaseSpecification(value));\n}\n}\n</code></pre></p> <p><code>Step 4</code> Add getSpecification to corresponding VersionAwareResponseService.  <pre><code>    @Override\nprotected Specification&lt;MyEntityPick&gt; getSpecification(BusinessComponent bc) {\nvar fullTextSearchFilterParam = FullTextSearchExt.getFullTextSearchFilterParam(bc);\nvar specification = super.getSpecification(bc);\nreturn fullTextSearchFilterParam.map(e -&gt; and(repository.getFullTextSearchSpecification(e), specification)).orElse(specification);\n}\n</code></pre></p> <p><code>Step 5</code> Add fullTextSearch to corresponding .widget.json. </p> <p><code>enabled</code> true/false  </p> <p><code>placeholder</code> - description for  fullTextSearch</p> <pre><code>{\n\"name\": \"myEntityPickPickPickListPopup\",\n\"title\": \"PickListPopup widget property FullTextSearch\",\n\"type\": \"PickListPopup\",\n\"bc\": \"myEntityPickPick\",\n\"fields\": [\n{\n\"title\": \"Custom Field\",\n\"key\": \"customField\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Text\",\n\"key\": \"customFieldText\",\n\"type\": \"text\"\n}\n],\n\"options\": {\n\"fullTextSearch\": {\n\"enabled\": true,\n\"placeholder\": \"Find by Custom Field Text or Custom Field\"\n}\n}\n}\n</code></pre> <p> Live Sample  GitHub</p>"},{"location":"widget/type/property/filtration/filtration/#by-personal-filter-group","title":"by personal filter group","text":"<p><code>Personal filter group</code> - a user-filled filter can be saved for each individual user.</p> <p>A user-filled filter can be saved for each individual user.</p> <p>This function is available:</p> <ul> <li> <p>List (  Live Sample  GitHub )</p> </li> <li> <p>AdditionalList (  Live Sample  GitHub )</p> </li> </ul> <p>The \"Save Filters\" button is located within the gear icon. When the \"Save Filters\" button is clicked, a modal window appears displaying all custom filters, which can be deleted if desired.</p>"},{"location":"widget/type/property/filtration/filtration/#how-does-it-look_1","title":"How does it look?","text":"ListAdditionalList"},{"location":"widget/type/property/filtration/filtration/#how-to-add_1","title":"How to add?","text":"Example <p>The availability of filtering function depends on the type. See more field types</p> <p>For fields where individual filters are intended to be saved, it is essential to configure the filtering options. see <code>Step 1</code> and <code>Step 2</code></p> <p>Step 1 Add @SearchParameter to corresponding DataResponseDTO. (Advanced customization SearchParameter) <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\n@SearchParameter(name = \"customField\")\nprivate String customField;\n@SearchParameter(name = \"customFieldNew\")\nprivate String customFieldNew;\n@SearchParameter(name = \"customFieldMultivalueList.id\", provider = LongValueProvider.class)\nprivate MultivalueField customFieldMultivalue;\nprivate String customFieldMultivalueDisplayedKey;\n@SearchParameter(name = \"customFieldPicklistEntity.customField\")\nprivate String customFieldPicklist;\n@SearchParameter(name = \"customFieldPicklistEntity.id\", provider = LongValueProvider.class)\nprivate Long customFieldPicklistId;\npublic MyExampleDTO(MyEntity entity) {\nthis.id = entity.getId().toString();\nthis.customField = entity.getCustomField();\nthis.customFieldNew = entity.getCustomFieldNew();\nthis.customFieldMultivalue = entity.getCustomFieldMultivalueList().stream().collect(MultivalueField.toMultivalueField(\ne -&gt; String.valueOf(e.getId()),\ne -&gt; String.valueOf(e.getCustomField())\n));\nthis.customFieldMultivalueDisplayedKey = StringUtils.abbreviate(entity.getCustomFieldMultivalueList().stream().map(MyEntity::getCustomField\n).map(e -&gt; e.toString()).collect(Collectors.joining(\",\")), 12);\nthis.customFieldPicklistId = Optional.ofNullable(entity.getCustomFieldPicklistEntity())\n.map(e -&gt; e.getId())\n.orElse(null);\nthis.customFieldPicklist = Optional.ofNullable(entity.getCustomFieldPicklistEntity())\n.map(e -&gt; e.getCustomField())\n.orElse(null);\n}\n}\n</code></pre></p> <p>Step 2  Add fields.enableFilter to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nfields.enableFilter(MyExampleDTO_.customFieldPicklist);\nfields.enableFilter(MyExampleDTO_.customFieldMultivalue);\nfields.enableFilter(MyExampleDTO_.customFieldNew);\nfields.enableFilter(MyExampleDTO_.customField);\nfields.enableSort(MyExampleDTO_.customFieldNew);\nfields.enableSort(MyExampleDTO_.customField);\n}\n</code></pre></p> ListAdditionalList <p>Step 3 Add filterSetting to corresponding .widget.json. </p> <p><code>enabled</code> true/false  </p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field New\",\n\"key\": \"customFieldNew\",\n\"type\": \"input\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"filterSetting\": {\n\"enabled\": true\n}\n}\n}\n</code></pre> <p> Live Sample  GitHub</p> <p>Step 3 Add filterSetting to corresponding .widget.json. </p> <p><code>enabled</code> true/false  </p> <pre><code>{\n\"name\": \"MyExampleAdditionalList\",\n\"title\": \"AdditionalList\",\n\"type\": \"AdditionalList\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"Custom Field Dictionary\",\n\"key\": \"customFieldDictionary\",\n\"type\": \"dictionary\"\n},\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"actionGroups\": {\n\"include\": []\n},\n\"filterSetting\": {\n\"enabled\": true\n}\n}\n}\n</code></pre> <p> Live Sample  GitHub</p>"},{"location":"widget/type/property/filtration/filtration/#by-filter-group","title":"by filter group","text":"<p><code>Filter group</code> - predefined filters settings that users can use in an application. They allow users to quickly apply specific filtering criteria without having to manually input.</p> <p>This function is available:</p> <ul> <li>List   ( Live Sample  GitHub   )</li> <li>AdditionalList ( Live Sample  GitHub )</li> </ul> <p>The option to default filter by saved groups is currently unavailable.</p>"},{"location":"widget/type/property/filtration/filtration/#how-does-it-look_2","title":"How does it look?","text":"ListAdditionalList"},{"location":"widget/type/property/filtration/filtration/#how-to-add_2","title":"How to add?","text":"Example <p>Tips</p> <p>To write this drilldown, follow these steps:</p> <pre><code>    * Add a filter function for fields \n    * Visually fill in the necessary filters in the interface.\n    * Open the developer panel.\n    * Locate the required request.\n    * Use this query to substitute in your code to get a reference\n</code></pre> <p></p> <p>Add  business component in BC_FILTER_GROUPS TABLE</p> <p><code>name</code> - name predefined filter</p> <p><code>BC</code> - name business component</p> <p><code>filters</code> - conditions for filtration</p> <pre><code>  name;bc;filters;ID\n  Dictionary = High;myexample3618;customFieldDictionary.equalsOneOf=%5B%22High%22%\n</code></pre>"},{"location":"widget/type/property/filtration/filtration/#additional-properties","title":"Additional properties","text":""},{"location":"widget/type/property/filtration/filtration/#clear-filters","title":"Clear filters","text":"<p>If you have filtered by table, the \"Clear all filters\" button will appear. It is suggested to indicate the number of applied filters by displaying \"Clear n filters\" (where n represents the number of columns being filtered).</p>"},{"location":"widget/type/property/filtration/filtration/#how-does-it-look_3","title":"How does it look?","text":""},{"location":"widget/type/property/filtration/filtration/#how-to-add_3","title":"How to add?","text":"<p>on default</p>"},{"location":"widget/type/property/pagination/pagination/","title":"Pagination","text":"<p>Pagination is the process of dividing content into separate, discrete pages, making it easier to navigate and consume large amounts of information.</p> <p>The navigation arrows and limit settings block are removed if the number of records is less than the limit.</p> <p>This feature is available and recommended for use:</p> <ul> <li>List widget</li> <li>AssocListPopup widget</li> <li>PickListPopup widget</li> </ul> <p>Pagination modes:</p> <ul> <li>Default (nextAndPreviousWithCount)</li> <li>nextAndPreviousWithHasNext</li> <li>nextAndPreviousSmart</li> </ul> <p>By default, all widget types use the following navigation mode: <code>nextAndPreviousSmart</code></p> <p>However, for certain <code>exception widgets,</code> the default navigation mode is: <code>nextAndPreviousWithCount</code></p> <p><code>Exception Type Widgets</code>: </p> <ul> <li>List widget</li> <li>AssocListPopup widget</li> <li>PickListPopup widget</li> <li>GroupingHierarchy widget </li> <li>DashboardList</li> <li>Pie1D</li> <li>Column2D</li> <li>Line2D</li> <li>DualAxes2D</li> </ul> <p>The /count request is executed only if there is at least one widget with the <code>nextAndPreviousWithCount</code> mode on the view. If such a widget is present (as specified in the view\u2019s metadata), the /count request will be triggered.</p> API Calls (Frontend to Backend) nextAndPreviousWithCount nextAndPreviousWithHasNext nextAndPreviousSmart /meta + + + /count + - - /data + + + <p>Info</p> <p>Pagination won't function until the page is refreshed after adding records.</p> <p>Use Cases :</p> <ul> <li><code>nextAndPreviousWithCount</code>: Ideal for backends that leverage database sources.</li> <li><code>nextAndPreviousWithHasNext</code>: Designed for microservice-based backends where the presence of the next page can be determined, allowing the <code>hasNext</code> flag to be populated.</li> <li><code>nextAndPreviousSmart</code>: Suitable for microservice-based backends where it is not possible to determine if there is a next page, and the <code>hasNext</code> flag cannot be populated.  </li> </ul>"},{"location":"widget/type/property/pagination/pagination/#default-nextandpreviouswithcount","title":"Default (nextAndPreviousWithCount)","text":"<p> Live Sample \u00b7  GitHub</p> <p>Frontend Behavior:</p> <ul> <li>All three responses are utilized, including the <code>/count</code> result.</li> <li>This mode is best suited for backends that rely on database sources.</li> </ul>"},{"location":"widget/type/property/pagination/pagination/#how-does-it-look","title":"How does it look?","text":""},{"location":"widget/type/property/pagination/pagination/#how-to-add","title":"How to add?","text":"Example <p>Option 1. By default </p> <p>Option 2. Add in options parameter pagination to corresponding .widget.json.</p> <pre><code>  \"pagination\": {\n  \"type\": \"nextAndPreviousWithCount\"\n  }\n</code></pre> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\":  \"List property Pagination nextAndPreviousWithCount InnerSource\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"pagination\": {\n\"type\": \"nextAndPreviousWithCount\"\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/property/pagination/pagination/#nextandpreviouswithhasnext","title":"nextAndPreviousWithHasNext","text":"<p> Live Sample \u00b7  GitHub</p> <p>Frontend Behavior:</p> <ul> <li>The <code>/count</code> endpoint is called, but its result is not used.</li> <li>Instead, pagination is based <code>/data</code> that indicates whether there is a next or previous page (hasNext/hasPrevious).</li> </ul> <p></p> <p>Next button availability logic:</p> <ul> <li>If hasNext (from /data) is true, Next button is available.</li> <li>If hasNext (from /data) is false, Next button is disabled.</li> </ul>"},{"location":"widget/type/property/pagination/pagination/#how-does-it-look_1","title":"How does it look?","text":""},{"location":"widget/type/property/pagination/pagination/#how-to-add_1","title":"How to add?","text":"Example <p>Add in options parameter pagination to corresponding .widget.json.</p> <pre><code>  \"pagination\": {\n  \"type\": \"nextAndPreviousWihHasNext\"\n  }\n</code></pre> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"Widget property Pagination nextAndPreviousWihHasNext AnySource\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"pagination\": {\n\"type\": \"nextAndPreviousWihHasNext\"\n}\n}\n}\n</code></pre> <p>Info</p> <p>To deactivate the functionality <code>hasNext=true</code>add in application.yml <code>cxbox.api.any-source-has-next-enabled = false</code></p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/property/pagination/pagination/#nextandprevioussmart","title":"nextAndPreviousSmart","text":"<p> Live Sample \u00b7  GitHub</p> <p>Frontend Behavior:</p> <ul> <li>The <code>/count</code> endpoint is called, but its result is not used. </li> </ul> <p>Next button availability logic: If the number of records received from <code>/data</code> is less than _limit, Next button is disabled.</p> <p>Disadvantages of this mode:</p> <ul> <li>If the number of records is a multiple of _limit, a single jump to a page with no records will occur, since it is impossible to determine whether this is the last page.</li> <li>If the number of records is a multiple of _limit, a request for the next page will be sent even if it does not exist. If this request returns an error, it should be handled with a try {} catch {} block.   (For instance, when retrieving data for the next page from a microservice.)</li> </ul>"},{"location":"widget/type/property/pagination/pagination/#how-does-it-look_2","title":"How does it look?","text":""},{"location":"widget/type/property/pagination/pagination/#how-to-add_2","title":"How to add?","text":"Example <p>Add in options parameter pagination to corresponding .widget.json. <pre><code>\"pagination\": {\n\"type\": \"nextAndPreviousWihHasNext\"\n}\n</code></pre> <pre><code>    {\n\"name\": \"MyExampleList\",\n\"title\": \"Widget property Pagination nextAndPreviousSmart AnySource\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"pagination\": {\n\"type\": \"nextAndPreviousSmart\"\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/property/pagination/pagination/#hidelimitoptions","title":"hideLimitOptions","text":"<p> Live Sample \u00b7  GitHub</p> <p>Controls the visibility of the records-per-page selection option.</p> <p>This function is available:</p> <ul> <li>List widget</li> <li>AssocListPopup widget</li> <li>PickListPopup widget</li> </ul> <p>Values:</p> <ul> <li><code>true</code> \u2013 Hides the records-per-page selection option.</li> <li><code>false</code> (default if not specified) \u2013 Shows the records-per-page selection option.</li> </ul>"},{"location":"widget/type/property/pagination/pagination/#how-does-it-look_3","title":"How does it look?","text":""},{"location":"widget/type/property/pagination/pagination/#how-to-add_3","title":"How to add?","text":"Example <p>Add in options parameter pagination to corresponding .widget.json. <pre><code>\"pagination\": {\n  \"hideLimitOptions\" : true\n}\n</code></pre></p> <pre><code>    {\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"pagination\": {\n\"hideLimitOptions\" : true\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/property/pagination/pagination/#availablelimitslist","title":"availableLimitsList","text":"<p> Live Sample \u00b7  GitHub</p> <p>Specifies the available options for the number of items displayed per page. Users will see these values in a dropdown.</p> <p>This function is available:</p> <ul> <li>List widget</li> <li>AssocListPopup widget</li> <li>PickListPopup widget</li> </ul> <p>Values:</p> <p>An array of integers.</p> <p>Behavior:</p> <p>If not provided, the component use default values [5, 10,15, 20].</p> <p>The user will only be able to select from the specified values.</p> <p>Use Case:</p> <p>Restrict pagination options to specific values (e.g., 10, 25, 50, or 100 items per page).</p>"},{"location":"widget/type/property/pagination/pagination/#how-does-it-look_4","title":"How does it look?","text":""},{"location":"widget/type/property/pagination/pagination/#how-to-add_4","title":"How to add?","text":"Example <p>Add in options parameter pagination to corresponding .widget.json. <pre><code>\"pagination\": {\n    \"availableLimitsList\": [ 1,2,3 ]\n}\n</code></pre></p> <pre><code>    {\n\"name\": \"MyExampleList\",\n\"title\": \"List\",\n\"type\": \"List\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"customField\",\n\"key\": \"customField\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"pagination\": {\n\"availableLimitsList\": [ 1,2,3 ]\n}\n}\n}\n</code></pre> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/property/showcondition/showcondition/","title":"Show condition","text":"<p>The <code>showCondition</code> is used to define the availability or visibility of the widget dynamically. The <code>showCondition</code> in configuration represents the condition under which the widge will be made visible to the user.  It controls whether the widget appears on the user interface based on the value of a specific field in another or currentbusiness component.</p> <ul> <li><code>no show condition - recommended</code>: widget always visible</li> <li><code>show condition by current entity</code>: condition can include boolean expression depending on current entity fields. Field updates will trigger condition recalculation only on save or if field is force active</li> <li><code>show condition by parent entity</code>: condition can include boolean expression depending on parent entity. Parent field updates will trigger condition recalculation only on save or if field is force active shown on same view</li> </ul> <p>Tips</p> <p>It is recommended not to use <code>Show condition</code> when possible, because wide usage of this feature makes application hard to support.</p> <p>Info</p> <p> Live Sample \u00b7  GitHub</p> <p>Child entity data is loaded even when the parent is hidden based on the show condition.</p>"},{"location":"widget/type/property/showcondition/showcondition/#structure-showcondition","title":"Structure showCondition","text":"<pre><code>\"showCondition\": {\n\"bcName\": \"myexample\",\n\"params\": {\n\"fieldKey\": \"customFieldShowCondition\",\n\"value\": true\n}\n}\n</code></pre> <ul> <li>\"bcName\"</li> </ul> <p>Description:  BusinessComponent that condition described below applies to.</p> <p>Type: String(required).</p> <ul> <li>\"fieldKey\"</li> </ul> <p>Description: Name field with show condition.</p> <p>Type: String(required).</p> <ul> <li>\"value\"</li> </ul> <p>Description:  Value of the field  for the show condition to be met..</p> <p>Type: String/boolean/number/null (required).</p>"},{"location":"widget/type/property/showcondition/showcondition/#how-does-it-look","title":"How does it look?","text":"<ul> <li>AdditionalInfo widget - not applicable</li> <li>EmptyWidget</li> <li>Form Popup widget - not applicable</li> <li>Form widget</li> <li>HeaderWidget</li> <li>Info widget</li> <li>List widget</li> <li>PickListPopup widget - not applicable</li> <li>Statistics blocks widget - not applicable</li> </ul>"},{"location":"widget/type/property/showcondition/showcondition/#how-to-add","title":"How to add?","text":"<ul> <li>AdditionalInfo widget - not applicable</li> <li>EmptyWidget</li> <li>Form Popup widget - not applicable</li> <li>Form widget</li> <li>HeaderWidget</li> <li>Info widget</li> <li>List widget</li> <li>PickListPopup widget - not applicable</li> <li>Statistics blocks widget - not applicable</li> </ul>"},{"location":"widget/type/property/showcondition/showcondition/#deprecated-functions","title":"Deprecated functions","text":"<p>showCondition.isDefault marked depricate release cxbox-4.0.0-M9</p> <p>showCondition.sequence marked depricate release cxbox-4.0.0-M9 </p> <p>showCondition.multipleParams marked depricate release cxbox-4.0.0-M9</p> <p>showCondition.params.valueList marked depricate release  cxbox-4.0.0-M9</p>"},{"location":"widget/type/property/sorting/sorting/","title":"Sorting","text":"<p><code>Sorting</code> allows you to sort data in ascending or descending order.</p> <p>This function is available:</p> <ul> <li>for widgets: List, GroupingHierarchy.</li> <li>for fields: See more field types </li> </ul>"},{"location":"widget/type/property/sorting/sorting/#type-sorting","title":"Type sorting","text":"<p><code>Sorting</code> can be enabled in two ways:</p> <ul> <li>On the field Sorting must be enabled explicitly at the field level</li> <li><code>Not recommended.</code> At the application level Sorting is enabled by default for all fields in the application.</li> </ul> <p>Info</p> <p>Sorting won't function until the page is refreshed after adding or updating records. </p> <p>How does it look? </p>"},{"location":"widget/type/property/sorting/sorting/#on-the-field","title":"On the field","text":"<p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/property/sorting/sorting/#how-to-add","title":"How to add?","text":"Example <p>Step 1  Add <code>sort-enabled-default</code> = <code>false</code> in application.yml</p> <p>If the parameter is not set to true, sorting must be enabled explicitly at the field level. <pre><code>    cxbox:\n       widget:\n           fields: \n                sort-enabled-default: false\n</code></pre></p> <p>Step 2  Add fields.enableSort to corresponding FieldMetaBuilder.     <pre><code>    @Override\npublic void buildIndependentMeta(FieldsMeta&lt;InputSortDTO&gt; fields, InnerBcDescription bcDescription, Long parentId) {\nif (configuration.getForceActiveEnabled()) {\nfields.setForceActive(InputSortDTO_.customField);\n}\nfields.enableSort(InputSortDTO_.customField);\n}\n</code></pre></p>"},{"location":"widget/type/property/sorting/sorting/#at-the-application-level","title":"At the application level","text":"<p><code>Not recommended.</code></p> <p>If the parameter is set to true, sorting is enabled by default for all fields in the application.</p>"},{"location":"widget/type/property/sorting/sorting/#how-to-add_1","title":"How to add?","text":"Example <p>Add <code>sort-enabled-default</code> in application.yml</p> <pre><code>  cxbox:\n     widget:\n         fields: \n              sort-enabled-default: true\n</code></pre>"},{"location":"widget/type/property/sorting/sorting/#default-sorting","title":"Default sorting","text":"<p>If the parameter is set to true, sorting is enabled by default for all fields in the application.</p>"},{"location":"widget/type/property/sorting/sorting/#how-to-add_2","title":"How to add?","text":"Example <p>Add  business component in BC_PROPERTIES TABLE</p> <p>BC - name business component   PAGE_LIMIT - limit page default   SORT - default sorting</p> <pre><code>BC;PAGE_LIMIT;SORT;FILTER;ID\ndateSorting;1000;_sort.0.desc=customField;'\"\"';\n</code></pre>"},{"location":"widget/type/statblocks/statblocks/","title":"Statistics blocks","text":"<p><code>Statistics blocks</code>  widget is a  tool designed to display aggregated data in a visually accessible format. This data can be sourced either from a database or from external sources.</p> <p>The current number of columns per row is set to 3.</p>"},{"location":"widget/type/statblocks/statblocks/#basics","title":"Basics","text":"<p> Live Sample  GitHub</p>"},{"location":"widget/type/statblocks/statblocks/#how-does-it-look","title":"How does it look?","text":"With colorWithout color"},{"location":"widget/type/statblocks/statblocks/#how-to-add","title":"How to add?","text":"Example Default name fieldsCustom name fields <p>You have the option to utilized default  field names for standard properties such as color, icon, etc. When doing so, you'll not need to establish mappings for these fields to standard criteria</p> <p>Step1 Create DataResponseDTO with custom fields.</p> <p><pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\nprivate String title;\nprivate Long value;\nprivate String color;\nprivate String description;\nprivate String icon;\n}\n</code></pre> Step2  Create DAO extends AbstractAnySourceBaseDAO&lt;&gt; implements AnySourceBaseDAO.</p> <p>Title. Optional</p> <p><code>Value</code> - field that specifies formulas for data aggregation</p> <p>Icon. Optional</p> <p>Color. Optional</p> <p><code>Description</code> - comment for field. Optional</p> <p><code>Id</code> - We recommend assigning unique identifiers to each block. This is essential for the proper functioning of the application and for enabling drilldown.   <pre><code>@Service\n@RequiredArgsConstructor\npublic class MyExampleDao extends AbstractAnySourceBaseDAO&lt;MyExampleDTO&gt; implements\nAnySourceBaseDAO&lt;MyExampleDTO&gt; {\npublic static final String COUNT_ROW_ID = \"0\";\npublic static final String SUM_CUSTOM_FIELD_NUM = \"1\";\nprivate final MyEntityRepository repository;\n@Override\npublic String getId(final MyExampleDTO entity) {\nreturn entity.getId();\n}\n@Override\npublic void setId(final String id, final MyExampleDTO entity) {\nentity.setId(id);\n}\n@Override\npublic MyExampleDTO getByIdIgnoringFirstLevelCache(final BusinessComponent bc) {\nreturn getStats().stream().filter(s -&gt; Objects.equals(s.getId(), bc.getId())).findFirst().orElse(null);\n}\n@Override\npublic void delete(final BusinessComponent bc) {\nthrow new IllegalStateException();\n}\n@Override\npublic Page&lt;MyExampleDTO&gt; getList(final BusinessComponent bc, final QueryParameters queryParameters) {\nreturn new PageImpl&lt;&gt;(getStats());\n}\n@Override\npublic MyExampleDTO update(BusinessComponent bc, MyExampleDTO entity) {\nthrow new IllegalStateException();\n}\n@Override\npublic MyExampleDTO create(final BusinessComponent bc, final MyExampleDTO entity) {\nthrow new IllegalStateException();\n}\n@NonNull\nprivate List&lt;MyExampleDTO&gt; getStats() {\nList&lt;MyExampleDTO&gt; result = new ArrayList&lt;&gt;();\nMyExampleDTO newRow = new MyExampleDTO()\n.setTitle(\"All record\")\n.setValue(repository.count())\n.setIcon(\"team\")\n.setDescription(\"Count rows in table\");\nnewRow.setId(COUNT_ROW_ID);\nresult.add(newRow);\nMyExampleDTO newSum = new MyExampleDTO()\n.setTitle(\"Custom Field Num Total\")\n.setValue( repository.customTotal())\n.setIcon(\"team\")\n.setDescription(\"Custom Field Num Total\");\nnewRow.setId(COUNT_ROW_ID);\nnewSum.setId(SUM_CUSTOM_FIELD_NUM);\nresult.add(newSum);\nreturn result;\n}\n}\n</code></pre> Step3 Create Meta extends AnySourceFieldMetaBuilder.   <pre><code>@SuppressWarnings(\"EmptyMethod\")\n@Service\npublic class MyExampleMeta extends AnySourceFieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override  public void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bc,\nString id, String parentId)  {\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields,  BcDescription bc, String parentId) {\n}\n}\n</code></pre> Step4 Create Service extends AnySourceVersionAwareResponseService.   <pre><code>@SuppressWarnings({\"java:S\", \"java:S\"})\n@RequiredArgsConstructor\n@Service\npublic class MyExampleService extends AnySourceVersionAwareResponseService&lt;MyExampleDTO, MyExampleDTO&gt; {\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleMeta&gt; meta = MyExampleMeta.class;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleDao&gt; dao = MyExampleDao.class;\n@Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyExampleDTO entity, BusinessComponent bc) {\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyExampleDTO entity, MyExampleDTO data, BusinessComponent bc) {\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n}\n</code></pre></p> <p>Step5 Create Widget with  type StatsBlock   !!! tips       fields. We recommend including all fields used in the widget within this block. This maintains the principle of consistency in your application </p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"StatsBlock title\",\n\"type\": \"StatsBlock\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"value\",\n\"key\": \"value\",\n\"type\": \"number\"\n},\n{\n\"title\": \"title\",\n\"key\": \"title\",\n\"type\": \"input\"\n},\n{\n\"title\": \"icon\",\n\"key\": \"icon\",\n\"type\": \"input\"\n},\n{\n\"title\": \"description\",\n\"key\": \"description\",\n\"type\": \"hint\"\n}\n],\n\"options\": {\n}\n}\n</code></pre> <p>Tips</p> <p>To display statistical blocks on the same screen where data is added, you need to add RefreshBC property.</p> <p> Live Sample  GitHub</p> <p>You have the option to utilize custom field names for standard properties such as color, icon, etc. When doing so, you'll need to establish mappings for these fields to standard criteria</p> <p>Step1 Create DataResponseDTO with custom fields.  <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\nprivate String customFieldTitle;\nprivate String customFieldValue;\nprivate String customFieldIcon;\nprivate String customFieldDescription;\nprivate String customField;\nprivate String customFieldNum;\n}\n</code></pre> Step2  Create DAO extends AbstractAnySourceBaseDAO&lt;&gt; implements AnySourceBaseDAO.</p> <p>Title. Optional</p> <p>Value - field that specifies formulas for data aggregation</p> <p>Icon. Optional</p> <p>Color. Optional</p> <p>Description - comment for field. Optional</p> <p>Id - We recommend assigning unique identifiers to each block. This is essential for the proper functioning of the application and for enabling drilldown.</p> <p><pre><code>@Service\n@RequiredArgsConstructor\npublic class MyExampleDao extends AbstractAnySourceBaseDAO&lt;MyExampleDTO&gt; implements\nAnySourceBaseDAO&lt;MyExampleDTO&gt; {\npublic static final String COUNT_ROW_ID = \"0\";\npublic static final String SUM_CUSTOM_FIELD_NUM = \"1\";\nprivate final MyEntityRepository repository;\n@Override\npublic String getId(final MyExampleDTO entity) {\nreturn entity.getId();\n}\n@Override\npublic void setId(final String id, final MyExampleDTO entity) {\nentity.setId(id);\n}\n@Override\npublic MyExampleDTO getByIdIgnoringFirstLevelCache(final BusinessComponent bc) {\nreturn getStats().stream().filter(s -&gt; Objects.equals(s.getId(), bc.getId())).findFirst().orElse(null);\n}\n@Override\npublic void delete(final BusinessComponent bc) {\nthrow new IllegalStateException();\n}\n@Override\npublic Page&lt;MyExampleDTO&gt; getList(final BusinessComponent bc, final QueryParameters queryParameters) {\nreturn new PageImpl&lt;&gt;(getStats());\n}\n@Override\npublic MyExampleDTO update(BusinessComponent bc, MyExampleDTO entity) {\nthrow new IllegalStateException();\n}\n@Override\npublic MyExampleDTO create(final BusinessComponent bc, final MyExampleDTO entity) {\nthrow new IllegalStateException();\n}\n@NonNull\nprivate List&lt;MyExampleDTO&gt; getStats() {\nList&lt;MyExampleDTO&gt; result = new ArrayList&lt;&gt;();\nMyExampleDTO newRow = new MyExampleDTO()\n.setCustomFieldTitle(\"All record\")\n.setCustomFieldValue(String.valueOf(repository.count()))\n.setCustomFieldIcon(\"team\")\n.setCustomFieldDescription(\"Count rows in table\");\nnewRow.setId(COUNT_ROW_ID);\nresult.add(newRow);\nMyExampleDTO newSum = new MyExampleDTO()\n.setCustomFieldTitle(\"Custom Field Num Total\")\n.setCustomFieldValue(String.valueOf(repository.customTotal()))\n.setCustomFieldIcon(\"team\")\n.setCustomFieldDescription(\"Sum customFieldNum\");\nnewSum.setId(SUM_CUSTOM_FIELD_NUM);\nresult.add(newSum);\nreturn result;\n}\n}\n</code></pre> Step3 Create Meta extends AnySourceFieldMetaBuilder. <pre><code>@SuppressWarnings(\"EmptyMethod\")\n@Service\npublic class MyExampleMeta extends AnySourceFieldMetaBuilder&lt;MyExampleDTO&gt; {\n@Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bc,\nString id, String parentId)  {\n}\n@Override\npublic void buildIndependentMeta(FieldsMeta&lt;MyExampleDTO&gt; fields,  BcDescription bc, String parentId) {\n}\n}\n</code></pre> Step4 Create Service extends AnySourceVersionAwareResponseService. <pre><code>@SuppressWarnings({\"java:S\", \"java:S\"})\n@RequiredArgsConstructor\n@Service\npublic class MyExampleService extends AnySourceVersionAwareResponseService&lt;MyExampleDTO, MyExampleDTO&gt; {\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleMeta&gt; meta = MyExampleMeta.class;\n@Getter(onMethod_ = @Override)\nprivate final Class&lt;MyExampleDao&gt; dao = MyExampleDao.class;\n@Override\nprotected CreateResult&lt;MyExampleDTO&gt; doCreateEntity(MyExampleDTO entity, BusinessComponent bc) {\nreturn new CreateResult&lt;&gt;(entityToDto(bc, entity));\n}\n@Override\nprotected ActionResultDTO&lt;MyExampleDTO&gt; doUpdateEntity(MyExampleDTO entity, MyExampleDTO data, BusinessComponent bc) {\nreturn new ActionResultDTO&lt;&gt;(entityToDto(bc, entity));\n}\n}\n</code></pre> Step5 Create Widget with  type StatsBlock </p> <p>Tips</p> <p>fields.We recommend including all fields used in the widget within this block. This maintains the principle of consistency in your application options.stats - This map how custom fields are matched to standard properties. </p> <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"StatsBlock title\",\n\"type\": \"StatsBlock\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"Custom Field Title\",\n\"key\": \"customFieldTitle\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Value\",\n\"key\": \"customFieldValue\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Value\",\n\"key\": \"customFieldDescription\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Value\",\n\"key\": \"customFieldIcon\",\n\"type\": \"input\"\n},\n{\n\"title\": \"Custom Field Total\",\n\"key\": \"customFieldNum\",\n\"type\": \"input\"\n}\n],\n\"options\": {\n\"stats\": {\n\"valueFieldKey\": \"customFieldValue\",\n\"titleFieldKey\": \"customFieldTitle\",\n\"iconFieldKey\": \"customFieldIcon\",\n\"descriptionFieldKey\": \"customFieldDescription\"\n}\n}\n}\n</code></pre> <p>Tips</p> <p>To display statistical blocks on the same screen where data is added, you need to add RefreshBC property.</p> <p> Live Sample  GitHub</p>"},{"location":"widget/type/statblocks/statblocks/#main-visual-parts","title":"Main visual parts","text":"<p>We can modify the following parameters on this widget:</p> <ul> <li>Title. Optional</li> <li>Value - field that specifies formulas for data aggregation</li> <li>Description - comment for field. Optional</li> </ul> <p> </p>"},{"location":"widget/type/statblocks/statblocks/#title","title":"Title","text":""},{"location":"widget/type/statblocks/statblocks/#title-basic","title":"Title Basic","text":"<p>Title - a name displayed in a block. It is optional.</p> <p> Live Sample \u00b7  GitHub</p> <p>There are types of:</p> <ul> <li><code>constant title</code>: shows constant text.</li> <li><code>constant title empty</code>.</li> </ul>"},{"location":"widget/type/statblocks/statblocks/#how-does-it-look_1","title":"How does it look?","text":"Constant titleConstant title empty"},{"location":"widget/type/statblocks/statblocks/#how-to-add_1","title":"How to add?","text":"Example Constant titleConstant title empty <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"name\": \"MyExampleStat\",\n\"title\": \"StatsBlock title\",\n\"type\": \"StatsBlock\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"value\",\n\"key\": \"value\",\n\"type\": \"number\",\n\"bgColor\": \"#779FE\"\n},\n{\n\"title\": \"title\",\n\"key\": \"title\",\n\"type\": \"input\"\n},\n{\n\"title\": \"icon\",\n\"key\": \"icon\",\n\"type\": \"input\"\n},\n{\n\"title\": \"description\",\n\"key\": \"description\",\n\"type\": \"hint\"\n}\n]\n}\n</code></pre></p> <p>Step1 No use parameter title to .widget.json. <pre><code>{\n\"name\": \"MyExampleStat\",\n\"title\": \"StatsBlock title\",\n\"type\": \"StatsBlock\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"value\",\n\"key\": \"value\",\n\"type\": \"number\",\n\"bgColor\": \"#779FE\"\n},\n{\n\"title\": \"icon\",\n\"key\": \"icon\",\n\"type\": \"input\"\n},\n{\n\"title\": \"description\",\n\"key\": \"description\",\n\"type\": \"hint\"\n}\n]\n}\n</code></pre></p>"},{"location":"widget/type/statblocks/statblocks/#title-color","title":"Title Color","text":"<p>not applicable</p>"},{"location":"widget/type/statblocks/statblocks/#business-component","title":"Business component","text":"<p>This specifies the business component (BC) to which this form belongs. A business component represents a specific part of a system that handles a particular business logic or data.</p> <p>see more  Business component</p>"},{"location":"widget/type/statblocks/statblocks/#show-condition","title":"Show condition","text":"<p>not applicable</p>"},{"location":"widget/type/statblocks/statblocks/#fields","title":"Fields","text":""},{"location":"widget/type/statblocks/statblocks/#options-layout","title":"Options layout","text":"<p>options.layout - no use in this type.</p>"},{"location":"widget/type/statblocks/statblocks/#actions","title":"Actions","text":"<p><code>Actions</code> show available actions as separate buttons see Actions</p>"},{"location":"widget/type/statblocks/statblocks/#additional-properties","title":"Additional properties","text":""},{"location":"widget/type/statblocks/statblocks/#icon","title":"Icon","text":"<p> Live Sample \u00b7  GitHub</p> <p>Icon - picture representing a particular function.Optional Standard icons Cxbox-ui already includes this icon library.</p> <p>Ant Design icons</p> <p>There are types of:</p> <ul> <li><code>icon</code>.</li> <li><code>icon empty</code>.</li> </ul>"},{"location":"widget/type/statblocks/statblocks/#how-does-it-look_2","title":"How does it look?","text":"IconIcon empty"},{"location":"widget/type/statblocks/statblocks/#how-to-add_2","title":"How to add?","text":"Example IconIcon empty <p>Step1 Add name for title to .widget.json. <pre><code>{\n\"name\": \"MyExampleStat\",\n\"title\": \"StatsBlock title\",\n\"type\": \"StatsBlock\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"value\",\n\"key\": \"value\",\n\"type\": \"number\",\n\"bgColor\": \"#779FE\"\n},\n{\n\"title\": \"title\",\n\"key\": \"title\",\n\"type\": \"input\"\n},\n{\n\"title\": \"icon\",\n\"key\": \"icon\",\n\"type\": \"input\"\n},\n{\n\"title\": \"description\",\n\"key\": \"description\",\n\"type\": \"hint\"\n}\n]\n}\n</code></pre></p> <p>Step1 No use parameter title to .widget.json. <pre><code>{\n\"name\": \"MyExampleStat\",\n\"title\": \"StatsBlock title\",\n\"type\": \"StatsBlock\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"value\",\n\"key\": \"value\",\n\"type\": \"number\",\n\"bgColor\": \"#779FE\"\n},\n{\n\"title\": \"title\",\n\"key\": \"title\",\n\"type\": \"input\"\n},\n{\n\"title\": \"description\",\n\"key\": \"description\",\n\"type\": \"hint\"\n}\n]\n}\n</code></pre></p>"},{"location":"widget/type/statblocks/statblocks/#color","title":"Color","text":"<p><code>Color</code> allows you to specify a field block.Optional. It can be calculated based on business logic of application</p> <p>Calculated color</p> <p> Live Sample \u00b7  GitHub</p> <p>Constant color</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/statblocks/statblocks/#how-does-it-look_3","title":"How does it look?","text":""},{"location":"widget/type/statblocks/statblocks/#how-to-add_3","title":"How to add?","text":"Example Calculated colorConstant color <p>Step 1   Add <code>custom field for color</code> to corresponding DataResponseDTO. The field can contain a HEX color or be null.</p> <pre><code>@Getter\n@Setter\n@NoArgsConstructor\npublic class MyExampleDTO extends DataResponseDTO {\nprivate String title;\nprivate Long value;\nprivate String color;\nprivate String description;\nprivate String icon;\n}\n</code></pre> <p>Step 2 Add \"bgColorKey\" :  <code>custom field for color</code>  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"StatsBlock title\",\n\"type\": \"StatsBlock\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"value\",\n\"key\": \"value\",\n\"type\": \"number\",\n\"bgColorKey\": \"color\"\n},\n{\n\"title\": \"title\",\n\"key\": \"title\",\n\"type\": \"input\"\n},\n{\n\"title\": \"icon\",\n\"key\": \"icon\",\n\"type\": \"input\"\n},\n{\n\"title\": \"description\",\n\"key\": \"description\",\n\"type\": \"hint\"\n}\n]\n}\n</code></pre></p> <p>Add \"bgColor\" :  <code>HEX color</code>  to .widget.json. <pre><code>\n</code></pre></p>"},{"location":"widget/type/statblocks/statblocks/#widget-size","title":"Widget size","text":"<p>By default, we use the view gridWidth field to arrange widgets in a row, each occupying 1/3 of the given size.  For example, if the row has a total width of 24 spans, each widget will take up 8 spans.</p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/statblocks/statblocks/#how-does-it-look_4","title":"How does it look?","text":"view gridWidth 24 - recommendedview gridWidth 12view gridWidth 6"},{"location":"widget/type/statblocks/statblocks/#how-to-add_4","title":"How to add?","text":"Example gridWidth24 - recommendedgridWidth12gridWidth6 <p>Change gridWidth = 24  to corresponding view <pre><code>{\n\"name\": \"MyExampleStat\",\n\"title\": \"MyExampleStat\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/MyExampleStat\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleStat\",\n\"position\": 20,\n\"gridWidth\": 24\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Change gridWidth = 12  to corresponding view <pre><code>{\n\"name\": \"MyExampleStat\",\n\"title\": \"MyExampleStat\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/MyExampleStat\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleStat\",\n\"position\": 20,\n\"gridWidth\": 12\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p> <p>Change gridWidth = 6  to corresponding view <pre><code>{\n\"name\": \"MyExampleStat\",\n\"title\": \"MyExampleStat\",\n\"template\": \"DashboardView\",\n\"url\": \"/screen/myexample/view/MyExampleStat\",\n\"widgets\": [\n{\n\"widgetName\": \"SecondLevelMenu\",\n\"position\": 0,\n\"gridWidth\": 24\n},\n{\n\"widgetName\": \"MyExampleStat\",\n\"position\": 20,\n\"gridWidth\": 6\n}\n],\n\"rolesAllowed\": [\n\"CXBOX_USER\"\n]\n}\n</code></pre></p>"},{"location":"widget/type/statblocks/statblocks/#drilldown","title":"Drilldown","text":"<p> Live Sample \u00b7  GitHub</p> <p><code>DrillDown</code> allows you to navigate to another view by simply tapping on it. Target view and other drill-down parts can be calculated based on business logic of application</p> <p>Also, it optionally allows you to filter data on target view before it will be opened <code>see more</code> DrillDown</p>"},{"location":"widget/type/statblocks/statblocks/#how-does-it-look_5","title":"How does it look?","text":""},{"location":"widget/type/statblocks/statblocks/#how-to-add_5","title":"How to add?","text":"Example <p>Option 1 <code>Step 1</code> Add fields.setDrilldown to corresponding FieldMetaBuilder. <pre><code>    @Override\npublic void buildRowDependentMeta(RowDependentFieldsMeta&lt;MyExampleDTO&gt; fields, BcDescription bc,\nString id, String parentId) {\nfields.setDrilldownWithFilter(\nMyExampleDTO_.value,\nDrillDownType.INNER,\n\"/screen/myexample/view/myexamplelist\",\nfc -&gt; fc\n.add(PlatformMyExampleController.myExampleBc, MyExampleDTO.class, fb -&gt; fb\n.dictionaryEnum(MyExampleDTO_.customFieldStatus, getStatusFilterValues(id)))\n);\n}\nprivate CustomFieldEnum getStatusFilterValues(@NonNull String id) {\nif (ROW_ID_0.equals(id)) {\nreturn CustomFieldEnum.NEW;\n} else if (ROW_ID_1.equals(id)) {\nreturn CustomFieldEnum.IN_PROGRESS;\n}\nelse if (ROW_ID_2.equals(id)) {\nreturn CustomFieldEnum.CLOSE;\n}\nthrow new IllegalStateException(\"Unexpected value: \" + id);\n}\n</code></pre></p> <p><code>Step 2</code> Add \"drillDown\": \"true\"  to .widget.json. <pre><code>{\n\"name\": \"MyExampleList\",\n\"title\": \"StatsBlock title\",\n\"type\": \"StatsBlock\",\n\"bc\": \"myExampleBc\",\n\"fields\": [\n{\n\"title\": \"value\",\n\"key\": \"value\",\n\"type\": \"number\",\n\"bgColorKey\": \"color\",\n\"drillDown\": true\n},\n{\n\"title\": \"title\",\n\"key\": \"title\",\n\"type\": \"input\"\n},\n{\n\"title\": \"icon\",\n\"key\": \"icon\",\n\"type\": \"input\"\n},\n{\n\"title\": \"description\",\n\"key\": \"description\",\n\"type\": \"hint\"\n}\n]\n}\n</code></pre></p> <p>Option 2    Add \"drillDownKey\" :  <code>custom field</code>  to .widget.json. See more Drilldown </p> <p> Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/statblocks/statblocks/#highlighting-functionality","title":"Highlighting Functionality","text":"<p> Live Sample \u00b7  GitHub</p> <p>Highlighting Functionality for the Current Item (Tile)</p> <p>Parent-Child Hierarchy. This approach implements a parent-child widget dependency, which introduces the following behavioral specifics:</p> <ol> <li> <p>Initialization and Cursor Focus</p> <ul> <li>Upon screen opening, the cursor is automatically set to the first record in the dataset received by the parent widget.</li> </ul> </li> <li> <p>Mandatory \"All Records\" Entry</p> <ul> <li>For the filtering mechanism to function correctly, the parent widget must include a static \"All Records\" entry (or an equivalent item).</li> <li>Purpose: When this item is selected, the child table widget should display all available records without applying any filters based on the parent widget's selection. This entry should typically be the first item in the list and selected by default during initialization.</li> </ul> </li> <li> <p>Restriction for Parent Widget (StatsBlock)</p> <ul> <li>If the parent widget is a statistical block (StatsBlock), its configuration must not use drilldowns, as the navigational function is already handled by its linkage to the child widget.</li> </ul> </li> <li> <p>Tabs are not to be used</p> </li> </ol>"},{"location":"widget/type/statblocks/statblocks/#how-does-it-look_6","title":"How does it look?","text":""},{"location":"widget/type/statblocks/statblocks/#how-to-add_6","title":"How to add?","text":"Example <p>Info</p> <p>For the parent-child dependency to work, the IDs assigned to StatBlock widgets must be of type long.</p> <p><code>Step 1</code> Add dependency parent/child  to corresponding EnumBcIdentifier.</p> <p>parent -&gt; bc for StatsBlock</p> <pre><code>    // @formatter:on\nmyexample(MyExampleService.class),\nmyexample(myexample,MyExampleService.class);\n// @formatter:on\n</code></pre> <p><code>Step 2</code> Add getParentSpecification to corresponding ResponseService.  Add filtering based on the assigned IDs corresponding *Dao.</p> <p><pre><code>    @Override\nprotected Specification&lt;MyEntity&gt; getParentSpecification(BusinessComponent bc) {\nreturn switch (bc.getParentId()) {\ncase \"2\" -&gt; createStatusSpecification(bc, ExampleStatus.NOT_STARTED);\ncase \"3\" -&gt; createStatusSpecification(bc, ExampleStatus.IN_COMPLETION);\ncase \"4\" -&gt; createStatusSpecification(bc, ExampleStatus.IN_PROGRESS);\ncase \"5\" -&gt; createStatusSpecification(bc, ExampleStatus.COMPLETED);\ncase \"6\" -&gt; createStatusSpecification(bc, ExampleStatus.CANCELLED);\ndefault -&gt; (root, cq, cb) -&gt; cb.and();\n};\n}\nprivate Specification&lt;MyEntity&gt; createStatusSpecification(BusinessComponent bc, ExampleStatus status) {\nreturn (root, cq, cb) -&gt; cb.and(\nsuper.getParentSpecification(bc).toPredicate(root, cq, cb),\ncb.equal(root.get(MyEntity_.status), status)\n);\n}\n</code></pre> <code>Step 2</code> Add bcCursor to corresponding widget.json. A new <code>bcCursor</code> option has been introduced to control the visual highlighting of the selected UI element.</p> <ul> <li> <p><code>bcCursor: show</code> When this option is enabled, the selected item is highlighted. Additionally, for parent items, the system automatically displays the child widgets associated with the selected tile.</p> </li> <li> <p><code>bcCursor: none</code> (default value)   Default mode. Visual highlighting of the active element is disabled. The interface behavior corresponds to the previous version.</p> </li> </ul> <p><pre><code>{\n\"name\": \"exampleStats\",\n\"title\": \"\",\n\"type\": \"StatsBlock\",\n\"bc\": \"myexample\",\n\"fields\": [\n{\n\"title\": \"value\",\n\"key\": \"value\",\n\"type\": \"number\",\n\"bgColorKey\": \"color\"\n},\n{\n\"title\": \"title\",\n\"key\": \"title\",\n\"type\": \"input\"\n},\n{\n\"title\": \"icon\",\n\"key\": \"icon\",\n\"type\": \"input\"\n},\n{\n\"title\": \"description\",\n\"key\": \"description\",\n\"type\": \"hint\"\n}\n],\n\"options\": {\n\"stats\": {\n\"bcCursor\": \"show\",\n\"valueFieldKey\": \"value\",\n\"titleFieldKey\": \"title\",\n\"iconFieldKey\": \"icon\",\n\"descriptionFieldKey\": \"description\"\n}\n}\n}\n</code></pre>  Live Sample \u00b7  GitHub</p>"},{"location":"widget/type/statblocks/statblocks/#configuring-selected-item-opacity","title":"Configuring selected item opacity","text":"<p>The transparency of the visual highlight for a selected widget element is controlled by the <code>selectedItemOpacity</code> constant.</p> <p>Location: ui/src/components/widgets/StatsBlock/constants.ts</p> <p>Current Value: 0.5 (50% opacity / 50% transparent)</p>"},{"location":"widget/type/statblocks/statblocks/#configuring-number-of-columns","title":"Configuring number of columns","text":"<p>If needed, you can change this in the frontend component settings in StatsBlock.tsx using the grid prop. </p> <p>Example: <code>gutter: 16, sm: 3, column: 6</code>- which results in 3 columns.</p> <p>Location: ui/src/components/widgets/StatsBlock/StatsBlock.tsx</p> <p>Current Value: <code>3</code>  which results in 3 columns</p> <p>Advanced customization</p>"}]}